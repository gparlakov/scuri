/** Create an object with methods that are autoSpy-ed to use as mock dependency */
export function autoSpy<T>(obj: new (...args: any[]) => T): SpyOf<T> {
    const res: SpyOf<T> = {} as any;

    // turns out that in target:es2015 the methods attached to the prototype are not enumerable so Object.keys returns []. So to workaround that and keep some backwards compatibility - merge with ownPropertyNames - that disregards the enumerable property.
    const keys = new Set([...Object.keys(obj.prototype), ...Object.getOwnPropertyNames(obj.prototype)]);
    keys.forEach(key => {
        res[key] = jest.fn();
    });

    return res;
}

/**
 * Keeps the types of the properties and methods and adds the Spy properties to each.
 * That way we could instruct the mocked method what to return and inquire about the calls.
 * Also the `T &` part of the type is so that private members are part of the type signature.
 * For example `autoSpy(HttpClient)` will have the `private handler: HttpHandler` property only if the
 * SpyOf<T> begins with `T & {`
 * @example
 * it('should carry the types', () => {
 *     // arrange
 *     const ser1 = autoSpy(Service);
 *     ser1.method.mockReturnValue(' some value');
 *     // act
 *     const res = ser1.method();
 *
 *     // assert
 *     expect(ser1.method).toHaveBeenCalled();
 *     expect(res).toBe(' some value');
 * });
 *
 * export class Service {
 *  property: string;
 *  method() {
 *     return 'true';
 *  }
 * }
 */
export type SpyOf<T> = T &
    {
        [k in keyof T]: T[k] & jest.Mock<T[k]>;
    };

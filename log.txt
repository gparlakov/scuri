
> scuri@1.4.0-rc.4 test C:\Users\gparl\projects\scuri
> jest --runInBand "--bail=false" "all.deps-calls-with-return-types.spec.ts"

{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'Found /tsconfig.json',
  timestamp: 1669130812756
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'Parsed json {\r\n' +
    '    "compilerOptions": {\r\n' +
    '        "baseUrl": ".",\r\n' +
    '        "typeRoots": ["./node_modules"]\r\n' +
    '    }\r\n' +
    '}\r\n',
  timestamp: 1669130812764
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'parseConfig:readDirectory /',
  timestamp: 1669130812767
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'parsed config: {"options":{"baseUrl":"/","typeRoots":["/node_modules"],"configFilePath":"/tsconfig.json"},"fileNames":["deps-calls-with-return-types-dep-included.spec.ts","deps-calls-with-return-types-dep-included.ts","deps-calls-with-return-types.dependency.ts","deps-calls-with-return-types.spec.ts","deps-calls-with-return-types.ts"],"typeAcquisition":{"enable":false,"include":[],"exclude":[]},"raw":{"compilerOptions":{"baseUrl":".","typeRoots":["./node_modules"]}},"errors":[],"wildcardDirectories":{"":1},"compileOnSave":false}',
  timestamp: 1669130812775
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'Creating program for \\deps-calls-with-return-types.ts, with options\n' +
    '{"baseUrl":"/","typeRoots":["/node_modules"],"configFilePath":"/tsconfig.json"}',
  timestamp: 1669130812775
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: getCurrentDirectory /}',
  timestamp: 1669130812776
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /deps-calls-with-return-types.ts, [object Object]',
  timestamp: 1669130812779
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: readFile /deps-calls-with-return-types.ts: /** starts on next line*/\r\n' +
    "import { switchMap, switchMapTo, tap } from 'rxjs/operators';\r\n" +
    "import { ServiceWithMethods } from './deps-calls-with-return-types.dependency';\r\n" +
    '\r\n' +
    'export class ExampleComponent {\r\n' +
    '    constructor(private readonly service:ServiceWithMethods) {}\r\n' +
    '\r\n' +
    '    async aMethod() {\r\n' +
    '        const d = this.service.justAMethod();\r\n' +
    '\r\n' +
    '        return this.service.observableReturning().pipe(\r\n' +
    '            switchMap(v => this.service.promiseReturning())\r\n' +
    '        );\r\n' +
    '    }\r\n' +
    '\r\n' +
    '    async anotherMethod() {\r\n' +
    '        this.service.aVoidMethod();\r\n' +
    '        this.service.property$.pipe(\r\n' +
    '            switchMap(v => this.service.promiseProp),\r\n' +
    '            switchMapTo(this.service.observable$),\r\n' +
    '            switchMapTo(this.service.subject$),\r\n' +
    '            tap({error: () => this.service.aNeverMethod()})\r\n' +
    '        )\r\n' +
    '    }\r\n' +
    '}\r\n',
  timestamp: 1669130812779
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /rxjs: true',
  timestamp: 1669130812792
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /rxjs: true',
  timestamp: 1669130812792
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /rxjs: true',
  timestamp: 1669130812792
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /rxjs/operators.ts:false',
  timestamp: 1669130812793
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /rxjs/operators.tsx:false',
  timestamp: 1669130812793
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /rxjs/operators.d.ts:false',
  timestamp: 1669130812793
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /rxjs/operators: true',
  timestamp: 1669130812793
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /rxjs/operators: true',
  timestamp: 1669130812794
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /rxjs/operators/package.json:false',
  timestamp: 1669130812794
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /rxjs/operators: true',
  timestamp: 1669130812794
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /rxjs/operators: true',
  timestamp: 1669130812794
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /rxjs/operators/index.ts:false',
  timestamp: 1669130812794
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /rxjs/operators/index.tsx:false',
  timestamp: 1669130812794
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /rxjs/operators/index.d.ts:false',
  timestamp: 1669130812795
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules: true',
  timestamp: 1669130812795
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/operators: true',
  timestamp: 1669130812795
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/operators/package.json:true',
  timestamp: 1669130812795
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: readFile /node_modules/rxjs/operators/package.json: {\n' +
    '  "name": "rxjs/operators",\n' +
    '  "typings": "./index.d.ts",\n' +
    '  "main": "./index.js",\n' +
    '  "module": "../_esm5/operators/index.js",\n' +
    '  "es2015": "../_esm2015/operators/index.js",\n' +
    '  "sideEffects": false\n' +
    '}\n',
  timestamp: 1669130812796
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs: true',
  timestamp: 1669130812796
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/operators.ts:false',
  timestamp: 1669130812797
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/operators.tsx:false',
  timestamp: 1669130812797
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/operators.d.ts:false',
  timestamp: 1669130812797
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/operators: true',
  timestamp: 1669130812797
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/operators: true',
  timestamp: 1669130812797
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/operators/index.d.ts:true',
  timestamp: 1669130812797
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/operators/index.d.ts:true',
  timestamp: 1669130812798
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /: true',
  timestamp: 1669130812799
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /: true',
  timestamp: 1669130812799
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /deps-calls-with-return-types.dependency.ts:true',
  timestamp: 1669130812799
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/operators/index.d.ts, [object Object]',
  timestamp: 1669130812799
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/operators/index.d.ts: export { audit } from '../internal/operators/audit';\n" +
    "export { auditTime } from '../internal/operators/auditTime';\n" +
    "export { buffer } from '../internal/operators/buffer';\n" +
    "export { bufferCount } from '../internal/operators/bufferCount';\n" +
    "export { bufferTime } from '../internal/operators/bufferTime';\n" +
    "export { bufferToggle } from '../internal/operators/bufferToggle';\n" +
    "export { bufferWhen } from '../internal/operators/bufferWhen';\n" +
    "export { catchError } from '../internal/operators/catchError';\n" +
    "export { combineAll } from '../internal/operators/combineAll';\n" +
    "export { combineLatest } from '../internal/operators/combineLatest';\n" +
    "export { concat } from '../internal/operators/concat';\n" +
    "export { concatAll } from '../internal/operators/concatAll';\n" +
    "export { concatMap } from '../internal/operators/concatMap';\n" +
    "export { concatMapTo } from '../internal/operators/concatMapTo';\n" +
    "export { count } from '../internal/operators/count';\n" +
    "export { debounce } from '../internal/operators/debounce';\n" +
    "export { debounceTime } from '../internal/operators/debounceTime';\n" +
    "export { defaultIfEmpty } from '../internal/operators/defaultIfEmpty';\n" +
    "export { delay } from '../internal/operators/delay';\n" +
    "export { delayWhen } from '../internal/operators/delayWhen';\n" +
    "export { dematerialize } from '../internal/operators/dematerialize';\n" +
    "export { distinct } from '../internal/operators/distinct';\n" +
    "export { distinctUntilChanged } from '../internal/operators/distinctUntilChanged';\n" +
    "export { distinctUntilKeyChanged } from '../internal/operators/distinctUntilKeyChanged';\n" +
    "export { elementAt } from '../internal/operators/elementAt';\n" +
    "export { endWith } from '../internal/operators/endWith';\n" +
    "export { every } from '../internal/operators/every';\n" +
    "export { exhaust } from '../internal/operators/exhaust';\n" +
    "export { exhaustMap } from '../internal/operators/exhaustMap';\n" +
    "export { expand } from '../internal/operators/expand';\n" +
    "export { filter } from '../internal/operators/filter';\n" +
    "export { finalize } from '../internal/operators/finalize';\n" +
    "export { find } from '../internal/operators/find';\n" +
    "export { findIndex } from '../internal/operators/findIndex';\n" +
    "export { first } from '../internal/operators/first';\n" +
    "export { groupBy } from '../internal/operators/groupBy';\n" +
    "export { ignoreElements } from '../internal/operators/ignoreElements';\n" +
    "export { isEmpty } from '../internal/operators/isEmpty';\n" +
    "export { last } from '../internal/operators/last';\n" +
    "export { map } from '../internal/operators/map';\n" +
    "export { mapTo } from '../internal/operators/mapTo';\n" +
    "export { materialize } from '../internal/operators/materialize';\n" +
    "export { max } from '../internal/operators/max';\n" +
    "export { merge } from '../internal/operators/merge';\n" +
    "export { mergeAll } from '../internal/operators/mergeAll';\n" +
    "export { mergeMap, flatMap } from '../internal/operators/mergeMap';\n" +
    "export { mergeMapTo } from '../internal/operators/mergeMapTo';\n" +
    "export { mergeScan } from '../internal/operators/mergeScan';\n" +
    "export { min } from '../internal/operators/min';\n" +
    "export { multicast } from '../internal/operators/multicast';\n" +
    "export { observeOn } from '../internal/operators/observeOn';\n" +
    "export { onErrorResumeNext } from '../internal/operators/onErrorResumeNext';\n" +
    "export { pairwise } from '../internal/operators/pairwise';\n" +
    "export { partition } from '../internal/operators/partition';\n" +
    "export { pluck } from '../internal/operators/pluck';\n" +
    "export { publish } from '../internal/operators/publish';\n" +
    "export { publishBehavior } from '../internal/operators/publishBehavior';\n" +
    "export { publishLast } from '../internal/operators/publishLast';\n" +
    "export { publishReplay } from '../internal/operators/publishReplay';\n" +
    "export { race } from '../internal/operators/race';\n" +
    "export { reduce } from '../internal/operators/reduce';\n" +
    "export { repeat } from '../internal/operators/repeat';\n" +
    "export { repeatWhen } from '../internal/operators/repeatWhen';\n" +
    "export { retry } from '../internal/operators/retry';\n" +
    "export { retryWhen } from '../internal/operators/retryWhen';\n" +
    "export { refCount } from '../internal/operators/refCount';\n" +
    "export { sample } from '../internal/operators/sample';\n" +
    "export { sampleTime } from '../internal/operators/sampleTime';\n" +
    "export { scan } from '../internal/operators/scan';\n" +
    "export { sequenceEqual } from '../internal/operators/sequenceEqual';\n" +
    "export { share } from '../internal/operators/share';\n" +
    "export { shareReplay } from '../internal/operators/shareReplay';\n" +
    "export { single } from '../internal/operators/single';\n" +
    "export { skip } from '../internal/operators/skip';\n" +
    "export { skipLast } from '../internal/operators/skipLast';\n" +
    "export { skipUntil } from '../internal/operators/skipUntil';\n" +
    "export { skipWhile } from '../internal/operators/skipWhile';\n" +
    "export { startWith } from '../internal/operators/startWith';\n" +
    "export { subscribeOn } from '../internal/operators/subscribeOn';\n" +
    "export { switchAll } from '../internal/operators/switchAll';\n" +
    "export { switchMap } from '../internal/operators/switchMap';\n" +
    "export { switchMapTo } from '../internal/operators/switchMapTo';\n" +
    "export { take } from '../internal/operators/take';\n" +
    "export { takeLast } from '../internal/operators/takeLast';\n" +
    "export { takeUntil } from '../internal/operators/takeUntil';\n" +
    "export { takeWhile } from '../internal/operators/takeWhile';\n" +
    "export { tap } from '../internal/operators/tap';\n" +
    "export { throttle } from '../internal/operators/throttle';\n" +
    "export { throttleTime } from '../internal/operators/throttleTime';\n" +
    "export { throwIfEmpty } from '../internal/operators/throwIfEmpty';\n" +
    "export { timeInterval } from '../internal/operators/timeInterval';\n" +
    "export { timeout } from '../internal/operators/timeout';\n" +
    "export { timeoutWith } from '../internal/operators/timeoutWith';\n" +
    "export { timestamp } from '../internal/operators/timestamp';\n" +
    "export { toArray } from '../internal/operators/toArray';\n" +
    "export { window } from '../internal/operators/window';\n" +
    "export { windowCount } from '../internal/operators/windowCount';\n" +
    "export { windowTime } from '../internal/operators/windowTime';\n" +
    "export { windowToggle } from '../internal/operators/windowToggle';\n" +
    "export { windowWhen } from '../internal/operators/windowWhen';\n" +
    "export { withLatestFrom } from '../internal/operators/withLatestFrom';\n" +
    "export { zip } from '../internal/operators/zip';\n" +
    "export { zipAll } from '../internal/operators/zipAll';\n",
  timestamp: 1669130812800
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812809
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812809
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/audit.ts:false',
  timestamp: 1669130812809
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/audit.tsx:false',
  timestamp: 1669130812809
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/audit.d.ts:true',
  timestamp: 1669130812809
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs: true',
  timestamp: 1669130812809
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/package.json:true',
  timestamp: 1669130812810
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: readFile /node_modules/rxjs/package.json: {\n' +
    '  "name": "rxjs",\n' +
    '  "version": "6.6.7",\n' +
    '  "description": "Reactive Extensions for modern JavaScript",\n' +
    '  "main": "./index.js",\n' +
    '  "sideEffects": false,\n' +
    '  "config": {\n' +
    '    "commitizen": {\n' +
    '      "path": "cz-conventional-changelog"\n' +
    '    }\n' +
    '  },\n' +
    '  "nyc": {\n' +
    '    "include": [\n' +
    '      "src/*.ts",\n' +
    '      "src/**/*.ts"\n' +
    '    ],\n' +
    '    "exclude": [\n' +
    '      "node_modules",\n' +
    '      "dist",\n' +
    '      "*.d.ts",\n' +
    '      "src/**/MiscJSDoc.ts"\n' +
    '    ],\n' +
    '    "extension": [\n' +
    '      ".ts"\n' +
    '    ],\n' +
    '    "reporter": [\n' +
    '      "html"\n' +
    '    ],\n' +
    '    "all": true\n' +
    '  },\n' +
    '  "lint-staged": {\n' +
    '    "linters": {\n' +
    '      "*.@(js)": [\n' +
    '        "eslint --fix",\n' +
    '        "git add"\n' +
    '      ],\n' +
    '      "*.@(ts)": [\n' +
    '        "tslint --fix",\n' +
    '        "git add"\n' +
    '      ]\n' +
    '    },\n' +
    '    "ignore": [\n' +
    '      "spec-dtslint/**/*.{js,ts}",\n' +
    '      "api_guard/**/*.{js,ts}"\n' +
    '    ]\n' +
    '  },\n' +
    '  "repository": {\n' +
    '    "type": "git",\n' +
    '    "url": "https://github.com/reactivex/rxjs.git"\n' +
    '  },\n' +
    '  "keywords": [\n' +
    '    "Rx",\n' +
    '    "RxJS",\n' +
    '    "ReactiveX",\n' +
    '    "ReactiveExtensions",\n' +
    '    "Streams",\n' +
    '    "Observables",\n' +
    '    "Observable",\n' +
    '    "Stream",\n' +
    '    "ES6",\n' +
    '    "ES2015"\n' +
    '  ],\n' +
    '  "author": "Ben Lesh <ben@benlesh.com>",\n' +
    '  "contributors": [\n' +
    '    {\n' +
    '      "name": "Ben Lesh",\n' +
    '      "email": "ben@benlesh.com"\n' +
    '    },\n' +
    '    {\n' +
    '      "name": "Paul Taylor",\n' +
    '      "email": "paul.e.taylor@me.com"\n' +
    '    },\n' +
    '    {\n' +
    '      "name": "Jeff Cross",\n' +
    '      "email": "crossj@google.com"\n' +
    '    },\n' +
    '    {\n' +
    '      "name": "Matthew Podwysocki",\n' +
    '      "email": "matthewp@microsoft.com"\n' +
    '    },\n' +
    '    {\n' +
    '      "name": "OJ Kwon",\n' +
    '      "email": "kwon.ohjoong@gmail.com"\n' +
    '    },\n' +
    '    {\n' +
    '      "name": "Andre Staltz",\n' +
    '      "email": "andre@staltz.com"\n' +
    '    }\n' +
    '  ],\n' +
    '  "license": "Apache-2.0",\n' +
    '  "bugs": {\n' +
    '    "url": "https://github.com/ReactiveX/RxJS/issues"\n' +
    '  },\n' +
    '  "homepage": "https://github.com/ReactiveX/RxJS",\n' +
    '  "dependencies": {\n' +
    '    "tslib": "^1.9.0"\n' +
    '  },\n' +
    '  "devDependencies": {\n' +
    '    "@angular-devkit/build-optimizer": "0.4.6",\n' +
    '    "@angular-devkit/schematics": "^0.5.4",\n' +
    '    "@types/chai": "4.1.2",\n' +
    '    "@types/lodash": "4.14.102",\n' +
    '    "@types/mocha": "2.2.48",\n' +
    '    "@types/node": "9.4.5",\n' +
    '    "@types/sinon": "4.1.3",\n' +
    '    "@types/sinon-chai": "2.7.29",\n' +
    '    "@types/source-map": "^0.5.2",\n' +
    '    "babel-polyfill": "6.26.0",\n' +
    '    "benchmark": "2.1.0",\n' +
    '    "benchpress": "2.0.0-beta.1",\n' +
    '    "chai": "4.1.2",\n' +
    '    "check-side-effects": "0.0.20",\n' +
    '    "color": "3.0.0",\n' +
    '    "colors": "1.1.2",\n' +
    '    "commitizen": "2.9.6",\n' +
    '    "coveralls": "3.0.0",\n' +
    '    "cross-env": "5.1.3",\n' +
    '    "cz-conventional-changelog": "1.2.0",\n' +
    '    "danger": "1.1.0",\n' +
    '    "dependency-cruiser": "2.13.0",\n' +
    '    "doctoc": "1.3.0",\n' +
    '    "dtslint": "0.6.1",\n' +
    '    "escape-string-regexp": "1.0.5",\n' +
    '    "esdoc": "0.4.7",\n' +
    '    "eslint": "4.17.0",\n' +
    '    "eslint-plugin-jasmine": "^2.10.1",\n' +
    '    "fs-extra": "5.0.0",\n' +
    '    "get-folder-size": "1.0.1",\n' +
    '    "glob": "7.1.2",\n' +
    '    "gm": "1.23.1",\n' +
    '    "google-closure-compiler-js": "20170218.0.0",\n' +
    '    "gzip-size": "4.1.0",\n' +
    '    "http-server": "0.11.1",\n' +
    '    "husky": "0.14.3",\n' +
    '    "klaw-sync": "3.0.2",\n' +
    '    "lint-staged": "7.1.1",\n' +
    '    "lodash": "4.17.5",\n' +
    '    "markdown-doctest": "0.9.1",\n' +
    '    "minimist": "1.2.0",\n' +
    '    "mkdirp": "^1.0.4",\n' +
    '    "mocha": "5.0.0",\n' +
    '    "mocha-in-sauce": "0.0.1",\n' +
    '    "npm-run-all": "4.1.2",\n' +
    '    "nyc": "11.4.1",\n' +
    '    "opn-cli": "3.1.0",\n' +
    '    "platform": "1.3.5",\n' +
    '    "promise": "8.0.1",\n' +
    '    "protractor": "3.1.1",\n' +
    '    "rollup": "0.66.6",\n' +
    '    "rollup-plugin-alias": "1.4.0",\n' +
    '    "rollup-plugin-inject": "2.0.0",\n' +
    '    "rollup-plugin-node-resolve": "2.0.0",\n' +
    '    "rx": "latest",\n' +
    '    "rxjs": "^5.5.7",\n' +
    '    "shx": "^0.3.2",\n' +
    '    "sinon": "4.3.0",\n' +
    '    "sinon-chai": "2.14.0",\n' +
    '    "source-map-support": "0.5.3",\n' +
    '    "symbol-observable": "1.0.1",\n' +
    '    "systemjs": "^0.21.0",\n' +
    '    "ts-api-guardian": "^0.5.0",\n' +
    '    "ts-node": "6.1.0",\n' +
    '    "tsconfig-paths": "3.2.0",\n' +
    '    "tslint": "5.9.1",\n' +
    '    "tslint-etc": "1.2.6",\n' +
    '    "tslint-no-toplevel-property-access": "0.0.2",\n' +
    '    "tslint-no-unused-expression-chai": "0.0.3",\n' +
    '    "typescript": "^3.0.1",\n' +
    '    "validate-commit-msg": "2.14.0",\n' +
    '    "webpack": "1.13.1",\n' +
    '    "xmlhttprequest": "1.8.0"\n' +
    '  },\n' +
    '  "engines": {\n' +
    '    "npm": ">=2.0.0"\n' +
    '  },\n' +
    '  "typings": "./index.d.ts",\n' +
    '  "ng-update": {\n' +
    '    "migrations": "./migrations/collection.json"\n' +
    '  },\n' +
    '  "module": "./_esm5/index.js",\n' +
    '  "es2015": "./_esm2015/index.js"\n' +
    '}\n',
  timestamp: 1669130812810
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812818
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812818
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/auditTime.ts:false',
  timestamp: 1669130812818
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/auditTime.tsx:false',
  timestamp: 1669130812818
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/auditTime.d.ts:true',
  timestamp: 1669130812818
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812818
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812818
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/buffer.ts:false',
  timestamp: 1669130812819
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/buffer.tsx:false',
  timestamp: 1669130812819
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/buffer.d.ts:true',
  timestamp: 1669130812819
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812819
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812819
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/bufferCount.ts:false',
  timestamp: 1669130812819
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/bufferCount.tsx:false',
  timestamp: 1669130812819
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/bufferCount.d.ts:true',
  timestamp: 1669130812819
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812820
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812820
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/bufferTime.ts:false',
  timestamp: 1669130812820
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/bufferTime.tsx:false',
  timestamp: 1669130812820
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/bufferTime.d.ts:true',
  timestamp: 1669130812820
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812821
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812821
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/bufferToggle.ts:false',
  timestamp: 1669130812821
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/bufferToggle.tsx:false',
  timestamp: 1669130812821
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/bufferToggle.d.ts:true',
  timestamp: 1669130812821
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812821
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812821
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/bufferWhen.ts:false',
  timestamp: 1669130812821
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/bufferWhen.tsx:false',
  timestamp: 1669130812821
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/bufferWhen.d.ts:true',
  timestamp: 1669130812821
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812822
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812822
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/catchError.ts:false',
  timestamp: 1669130812822
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/catchError.tsx:false',
  timestamp: 1669130812822
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/catchError.d.ts:true',
  timestamp: 1669130812822
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812822
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812822
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/combineAll.ts:false',
  timestamp: 1669130812822
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/combineAll.tsx:false',
  timestamp: 1669130812822
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/combineAll.d.ts:true',
  timestamp: 1669130812823
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812823
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812823
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/combineLatest.ts:false',
  timestamp: 1669130812823
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/combineLatest.tsx:false',
  timestamp: 1669130812823
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/combineLatest.d.ts:true',
  timestamp: 1669130812823
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812823
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812823
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/concat.ts:false',
  timestamp: 1669130812823
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/concat.tsx:false',
  timestamp: 1669130812823
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/concat.d.ts:true',
  timestamp: 1669130812824
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812824
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812824
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/concatAll.ts:false',
  timestamp: 1669130812824
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/concatAll.tsx:false',
  timestamp: 1669130812824
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/concatAll.d.ts:true',
  timestamp: 1669130812824
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812824
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812824
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/concatMap.ts:false',
  timestamp: 1669130812824
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/concatMap.tsx:false',
  timestamp: 1669130812824
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/concatMap.d.ts:true',
  timestamp: 1669130812825
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812825
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812825
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/concatMapTo.ts:false',
  timestamp: 1669130812825
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/concatMapTo.tsx:false',
  timestamp: 1669130812825
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/concatMapTo.d.ts:true',
  timestamp: 1669130812825
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812825
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812826
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/count.ts:false',
  timestamp: 1669130812826
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/count.tsx:false',
  timestamp: 1669130812826
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/count.d.ts:true',
  timestamp: 1669130812826
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812826
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812826
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/debounce.ts:false',
  timestamp: 1669130812827
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/debounce.tsx:false',
  timestamp: 1669130812827
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/debounce.d.ts:true',
  timestamp: 1669130812827
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812827
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812827
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/debounceTime.ts:false',
  timestamp: 1669130812827
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/debounceTime.tsx:false',
  timestamp: 1669130812828
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/debounceTime.d.ts:true',
  timestamp: 1669130812828
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812828
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812828
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/defaultIfEmpty.ts:false',
  timestamp: 1669130812828
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/defaultIfEmpty.tsx:false',
  timestamp: 1669130812828
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/defaultIfEmpty.d.ts:true',
  timestamp: 1669130812829
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812829
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812829
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/delay.ts:false',
  timestamp: 1669130812829
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/delay.tsx:false',
  timestamp: 1669130812829
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/delay.d.ts:true',
  timestamp: 1669130812830
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812830
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812830
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/delayWhen.ts:false',
  timestamp: 1669130812830
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/delayWhen.tsx:false',
  timestamp: 1669130812830
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/delayWhen.d.ts:true',
  timestamp: 1669130812830
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812831
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812831
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/dematerialize.ts:false',
  timestamp: 1669130812831
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/dematerialize.tsx:false',
  timestamp: 1669130812831
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/dematerialize.d.ts:true',
  timestamp: 1669130812831
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812831
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812832
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/distinct.ts:false',
  timestamp: 1669130812832
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/distinct.tsx:false',
  timestamp: 1669130812832
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/distinct.d.ts:true',
  timestamp: 1669130812832
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812832
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812832
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/distinctUntilChanged.ts:false',
  timestamp: 1669130812833
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/distinctUntilChanged.tsx:false',
  timestamp: 1669130812833
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/distinctUntilChanged.d.ts:true',
  timestamp: 1669130812833
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812833
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812833
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/distinctUntilKeyChanged.ts:false',
  timestamp: 1669130812833
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/distinctUntilKeyChanged.tsx:false',
  timestamp: 1669130812833
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/distinctUntilKeyChanged.d.ts:true',
  timestamp: 1669130812834
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812834
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812834
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/elementAt.ts:false',
  timestamp: 1669130812834
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/elementAt.tsx:false',
  timestamp: 1669130812834
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/elementAt.d.ts:true',
  timestamp: 1669130812834
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812835
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812835
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/endWith.ts:false',
  timestamp: 1669130812835
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/endWith.tsx:false',
  timestamp: 1669130812835
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/endWith.d.ts:true',
  timestamp: 1669130812835
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812835
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812836
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/every.ts:false',
  timestamp: 1669130812836
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/every.tsx:false',
  timestamp: 1669130812836
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/every.d.ts:true',
  timestamp: 1669130812836
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812836
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812836
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/exhaust.ts:false',
  timestamp: 1669130812836
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/exhaust.tsx:false',
  timestamp: 1669130812837
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/exhaust.d.ts:true',
  timestamp: 1669130812837
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812837
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812837
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/exhaustMap.ts:false',
  timestamp: 1669130812837
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/exhaustMap.tsx:false',
  timestamp: 1669130812837
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/exhaustMap.d.ts:true',
  timestamp: 1669130812837
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812838
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812838
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/expand.ts:false',
  timestamp: 1669130812838
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/expand.tsx:false',
  timestamp: 1669130812838
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/expand.d.ts:true',
  timestamp: 1669130812838
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812838
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812839
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/filter.ts:false',
  timestamp: 1669130812839
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/filter.tsx:false',
  timestamp: 1669130812839
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/filter.d.ts:true',
  timestamp: 1669130812839
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812839
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812839
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/finalize.ts:false',
  timestamp: 1669130812840
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/finalize.tsx:false',
  timestamp: 1669130812840
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/finalize.d.ts:true',
  timestamp: 1669130812840
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812840
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812840
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/find.ts:false',
  timestamp: 1669130812840
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/find.tsx:false',
  timestamp: 1669130812840
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/find.d.ts:true',
  timestamp: 1669130812841
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812841
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812841
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/findIndex.ts:false',
  timestamp: 1669130812841
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/findIndex.tsx:false',
  timestamp: 1669130812841
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/findIndex.d.ts:true',
  timestamp: 1669130812841
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812842
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812842
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/first.ts:false',
  timestamp: 1669130812842
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/first.tsx:false',
  timestamp: 1669130812842
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/first.d.ts:true',
  timestamp: 1669130812842
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812843
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812843
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/groupBy.ts:false',
  timestamp: 1669130812843
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/groupBy.tsx:false',
  timestamp: 1669130812843
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/groupBy.d.ts:true',
  timestamp: 1669130812843
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812844
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812844
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/ignoreElements.ts:false',
  timestamp: 1669130812844
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/ignoreElements.tsx:false',
  timestamp: 1669130812844
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/ignoreElements.d.ts:true',
  timestamp: 1669130812844
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812844
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812845
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/isEmpty.ts:false',
  timestamp: 1669130812845
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/isEmpty.tsx:false',
  timestamp: 1669130812845
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/isEmpty.d.ts:true',
  timestamp: 1669130812845
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812845
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812845
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/last.ts:false',
  timestamp: 1669130812845
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/last.tsx:false',
  timestamp: 1669130812845
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/last.d.ts:true',
  timestamp: 1669130812845
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812846
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812846
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/map.ts:false',
  timestamp: 1669130812846
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/map.tsx:false',
  timestamp: 1669130812846
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/map.d.ts:true',
  timestamp: 1669130812846
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812846
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812846
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/mapTo.ts:false',
  timestamp: 1669130812846
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/mapTo.tsx:false',
  timestamp: 1669130812846
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/mapTo.d.ts:true',
  timestamp: 1669130812847
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812847
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812847
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/materialize.ts:false',
  timestamp: 1669130812847
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/materialize.tsx:false',
  timestamp: 1669130812847
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/materialize.d.ts:true',
  timestamp: 1669130812847
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812847
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812847
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/max.ts:false',
  timestamp: 1669130812847
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/max.tsx:false',
  timestamp: 1669130812847
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/max.d.ts:true',
  timestamp: 1669130812847
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812848
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812848
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/merge.ts:false',
  timestamp: 1669130812848
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/merge.tsx:false',
  timestamp: 1669130812848
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/merge.d.ts:true',
  timestamp: 1669130812848
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812848
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812848
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/mergeAll.ts:false',
  timestamp: 1669130812848
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/mergeAll.tsx:false',
  timestamp: 1669130812848
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/mergeAll.d.ts:true',
  timestamp: 1669130812848
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812849
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812849
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/mergeMap.ts:false',
  timestamp: 1669130812849
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/mergeMap.tsx:false',
  timestamp: 1669130812849
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/mergeMap.d.ts:true',
  timestamp: 1669130812849
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812849
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812849
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/mergeMapTo.ts:false',
  timestamp: 1669130812849
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/mergeMapTo.tsx:false',
  timestamp: 1669130812849
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/mergeMapTo.d.ts:true',
  timestamp: 1669130812849
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812850
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812850
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/mergeScan.ts:false',
  timestamp: 1669130812850
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/mergeScan.tsx:false',
  timestamp: 1669130812850
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/mergeScan.d.ts:true',
  timestamp: 1669130812850
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812850
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812850
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/min.ts:false',
  timestamp: 1669130812850
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/min.tsx:false',
  timestamp: 1669130812850
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/min.d.ts:true',
  timestamp: 1669130812850
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812850
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812851
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/multicast.ts:false',
  timestamp: 1669130812851
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/multicast.tsx:false',
  timestamp: 1669130812851
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/multicast.d.ts:true',
  timestamp: 1669130812851
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812851
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812851
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/observeOn.ts:false',
  timestamp: 1669130812851
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/observeOn.tsx:false',
  timestamp: 1669130812851
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/observeOn.d.ts:true',
  timestamp: 1669130812851
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812851
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812851
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/onErrorResumeNext.ts:false',
  timestamp: 1669130812852
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/onErrorResumeNext.tsx:false',
  timestamp: 1669130812852
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/onErrorResumeNext.d.ts:true',
  timestamp: 1669130812852
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812852
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812852
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/pairwise.ts:false',
  timestamp: 1669130812852
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/pairwise.tsx:false',
  timestamp: 1669130812852
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/pairwise.d.ts:true',
  timestamp: 1669130812852
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812852
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812852
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/partition.ts:false',
  timestamp: 1669130812852
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/partition.tsx:false',
  timestamp: 1669130812853
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/partition.d.ts:true',
  timestamp: 1669130812853
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812853
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812853
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/pluck.ts:false',
  timestamp: 1669130812853
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/pluck.tsx:false',
  timestamp: 1669130812853
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/pluck.d.ts:true',
  timestamp: 1669130812853
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812853
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812853
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/publish.ts:false',
  timestamp: 1669130812853
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/publish.tsx:false',
  timestamp: 1669130812854
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/publish.d.ts:true',
  timestamp: 1669130812854
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812854
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812854
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/publishBehavior.ts:false',
  timestamp: 1669130812855
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/publishBehavior.tsx:false',
  timestamp: 1669130812855
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/publishBehavior.d.ts:true',
  timestamp: 1669130812855
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812855
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812855
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/publishLast.ts:false',
  timestamp: 1669130812855
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/publishLast.tsx:false',
  timestamp: 1669130812855
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/publishLast.d.ts:true',
  timestamp: 1669130812855
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812856
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812856
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/publishReplay.ts:false',
  timestamp: 1669130812856
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/publishReplay.tsx:false',
  timestamp: 1669130812856
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/publishReplay.d.ts:true',
  timestamp: 1669130812856
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812856
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812856
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/race.ts:false',
  timestamp: 1669130812856
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/race.tsx:false',
  timestamp: 1669130812856
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/race.d.ts:true',
  timestamp: 1669130812857
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812857
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812857
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/reduce.ts:false',
  timestamp: 1669130812857
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/reduce.tsx:false',
  timestamp: 1669130812857
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/reduce.d.ts:true',
  timestamp: 1669130812857
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812857
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812857
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/repeat.ts:false',
  timestamp: 1669130812857
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/repeat.tsx:false',
  timestamp: 1669130812857
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/repeat.d.ts:true',
  timestamp: 1669130812858
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812858
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812858
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/repeatWhen.ts:false',
  timestamp: 1669130812858
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/repeatWhen.tsx:false',
  timestamp: 1669130812858
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/repeatWhen.d.ts:true',
  timestamp: 1669130812858
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812858
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812858
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/retry.ts:false',
  timestamp: 1669130812858
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/retry.tsx:false',
  timestamp: 1669130812858
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/retry.d.ts:true',
  timestamp: 1669130812858
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812859
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812859
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/retryWhen.ts:false',
  timestamp: 1669130812859
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/retryWhen.tsx:false',
  timestamp: 1669130812859
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/retryWhen.d.ts:true',
  timestamp: 1669130812859
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812859
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812859
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/refCount.ts:false',
  timestamp: 1669130812859
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/refCount.tsx:false',
  timestamp: 1669130812860
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/refCount.d.ts:true',
  timestamp: 1669130812860
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812860
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812860
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/sample.ts:false',
  timestamp: 1669130812860
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/sample.tsx:false',
  timestamp: 1669130812861
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/sample.d.ts:true',
  timestamp: 1669130812861
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812861
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812861
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/sampleTime.ts:false',
  timestamp: 1669130812861
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/sampleTime.tsx:false',
  timestamp: 1669130812861
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/sampleTime.d.ts:true',
  timestamp: 1669130812861
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812861
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812862
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/scan.ts:false',
  timestamp: 1669130812862
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/scan.tsx:false',
  timestamp: 1669130812862
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/scan.d.ts:true',
  timestamp: 1669130812862
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812862
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812862
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/sequenceEqual.ts:false',
  timestamp: 1669130812862
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/sequenceEqual.tsx:false',
  timestamp: 1669130812862
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/sequenceEqual.d.ts:true',
  timestamp: 1669130812862
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812863
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812863
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/share.ts:false',
  timestamp: 1669130812863
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/share.tsx:false',
  timestamp: 1669130812863
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/share.d.ts:true',
  timestamp: 1669130812863
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812863
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812863
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/shareReplay.ts:false',
  timestamp: 1669130812863
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/shareReplay.tsx:false',
  timestamp: 1669130812863
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/shareReplay.d.ts:true',
  timestamp: 1669130812863
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812863
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812864
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/single.ts:false',
  timestamp: 1669130812864
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/single.tsx:false',
  timestamp: 1669130812864
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/single.d.ts:true',
  timestamp: 1669130812864
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812864
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812864
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/skip.ts:false',
  timestamp: 1669130812864
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/skip.tsx:false',
  timestamp: 1669130812864
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/skip.d.ts:true',
  timestamp: 1669130812864
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812864
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812864
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/skipLast.ts:false',
  timestamp: 1669130812865
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/skipLast.tsx:false',
  timestamp: 1669130812865
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/skipLast.d.ts:true',
  timestamp: 1669130812865
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812865
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812865
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/skipUntil.ts:false',
  timestamp: 1669130812865
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/skipUntil.tsx:false',
  timestamp: 1669130812865
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/skipUntil.d.ts:true',
  timestamp: 1669130812865
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812865
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812865
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/skipWhile.ts:false',
  timestamp: 1669130812865
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/skipWhile.tsx:false',
  timestamp: 1669130812865
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/skipWhile.d.ts:true',
  timestamp: 1669130812866
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812866
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812866
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/startWith.ts:false',
  timestamp: 1669130812866
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/startWith.tsx:false',
  timestamp: 1669130812866
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/startWith.d.ts:true',
  timestamp: 1669130812866
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812866
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812866
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/subscribeOn.ts:false',
  timestamp: 1669130812866
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/subscribeOn.tsx:false',
  timestamp: 1669130812866
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/subscribeOn.d.ts:true',
  timestamp: 1669130812866
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812867
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812867
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/switchAll.ts:false',
  timestamp: 1669130812867
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/switchAll.tsx:false',
  timestamp: 1669130812867
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/switchAll.d.ts:true',
  timestamp: 1669130812867
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812867
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812867
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/switchMap.ts:false',
  timestamp: 1669130812867
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/switchMap.tsx:false',
  timestamp: 1669130812867
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/switchMap.d.ts:true',
  timestamp: 1669130812867
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812867
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812868
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/switchMapTo.ts:false',
  timestamp: 1669130812868
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/switchMapTo.tsx:false',
  timestamp: 1669130812868
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/switchMapTo.d.ts:true',
  timestamp: 1669130812868
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812868
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812868
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/take.ts:false',
  timestamp: 1669130812868
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/take.tsx:false',
  timestamp: 1669130812868
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/take.d.ts:true',
  timestamp: 1669130812868
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812868
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812868
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/takeLast.ts:false',
  timestamp: 1669130812869
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/takeLast.tsx:false',
  timestamp: 1669130812869
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/takeLast.d.ts:true',
  timestamp: 1669130812869
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812869
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812869
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/takeUntil.ts:false',
  timestamp: 1669130812869
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/takeUntil.tsx:false',
  timestamp: 1669130812869
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/takeUntil.d.ts:true',
  timestamp: 1669130812869
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812869
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812869
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/takeWhile.ts:false',
  timestamp: 1669130812869
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/takeWhile.tsx:false',
  timestamp: 1669130812870
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/takeWhile.d.ts:true',
  timestamp: 1669130812870
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812870
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812870
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/tap.ts:false',
  timestamp: 1669130812870
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/tap.tsx:false',
  timestamp: 1669130812870
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/tap.d.ts:true',
  timestamp: 1669130812870
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812870
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812871
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/throttle.ts:false',
  timestamp: 1669130812871
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/throttle.tsx:false',
  timestamp: 1669130812871
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/throttle.d.ts:true',
  timestamp: 1669130812871
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812871
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812871
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/throttleTime.ts:false',
  timestamp: 1669130812871
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/throttleTime.tsx:false',
  timestamp: 1669130812871
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/throttleTime.d.ts:true',
  timestamp: 1669130812871
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812871
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812872
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/throwIfEmpty.ts:false',
  timestamp: 1669130812872
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/throwIfEmpty.tsx:false',
  timestamp: 1669130812872
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/throwIfEmpty.d.ts:true',
  timestamp: 1669130812872
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812872
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812872
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/timeInterval.ts:false',
  timestamp: 1669130812872
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/timeInterval.tsx:false',
  timestamp: 1669130812872
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/timeInterval.d.ts:true',
  timestamp: 1669130812872
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812873
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812873
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/timeout.ts:false',
  timestamp: 1669130812873
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/timeout.tsx:false',
  timestamp: 1669130812873
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/timeout.d.ts:true',
  timestamp: 1669130812873
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812873
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812873
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/timeoutWith.ts:false',
  timestamp: 1669130812873
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/timeoutWith.tsx:false',
  timestamp: 1669130812873
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/timeoutWith.d.ts:true',
  timestamp: 1669130812873
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812873
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812874
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/timestamp.ts:false',
  timestamp: 1669130812874
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/timestamp.tsx:false',
  timestamp: 1669130812874
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/timestamp.d.ts:true',
  timestamp: 1669130812874
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812874
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812874
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/toArray.ts:false',
  timestamp: 1669130812874
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/toArray.tsx:false',
  timestamp: 1669130812874
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/toArray.d.ts:true',
  timestamp: 1669130812874
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812874
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812874
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/window.ts:false',
  timestamp: 1669130812874
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/window.tsx:false',
  timestamp: 1669130812875
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/window.d.ts:true',
  timestamp: 1669130812875
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812875
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812875
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/windowCount.ts:false',
  timestamp: 1669130812875
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/windowCount.tsx:false',
  timestamp: 1669130812875
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/windowCount.d.ts:true',
  timestamp: 1669130812875
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812875
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812875
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/windowTime.ts:false',
  timestamp: 1669130812875
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/windowTime.tsx:false',
  timestamp: 1669130812875
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/windowTime.d.ts:true',
  timestamp: 1669130812876
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812876
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812876
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/windowToggle.ts:false',
  timestamp: 1669130812876
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/windowToggle.tsx:false',
  timestamp: 1669130812876
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/windowToggle.d.ts:true',
  timestamp: 1669130812876
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812876
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812876
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/windowWhen.ts:false',
  timestamp: 1669130812876
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/windowWhen.tsx:false',
  timestamp: 1669130812876
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/windowWhen.d.ts:true',
  timestamp: 1669130812876
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812878
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812878
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/withLatestFrom.ts:false',
  timestamp: 1669130812878
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/withLatestFrom.tsx:false',
  timestamp: 1669130812878
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/withLatestFrom.d.ts:true',
  timestamp: 1669130812879
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812879
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812879
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/zip.ts:false',
  timestamp: 1669130812879
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/zip.tsx:false',
  timestamp: 1669130812879
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/zip.d.ts:true',
  timestamp: 1669130812879
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812879
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130812879
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/zipAll.ts:false',
  timestamp: 1669130812879
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/zipAll.tsx:false',
  timestamp: 1669130812879
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/zipAll.d.ts:true',
  timestamp: 1669130812879
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/audit.d.ts, [object Object]',
  timestamp: 1669130812880
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/audit.d.ts: import { MonoTypeOperatorFunction, SubscribableOrPromise } from '../types';\n" +
    '/**\n' +
    ' * Ignores source values for a duration determined by another Observable, then\n' +
    ' * emits the most recent value from the source Observable, then repeats this\n' +
    ' * process.\n' +
    ' *\n' +
    ` * <span class="informal">It's like {@link auditTime}, but the silencing\n` +
    ' * duration is determined by a second Observable.</span>\n' +
    ' *\n' +
    ' * ![](audit.png)\n' +
    ' *\n' +
    ' * `audit` is similar to `throttle`, but emits the last value from the silenced\n' +
    ' * time window, instead of the first value. `audit` emits the most recent value\n' +
    ' * from the source Observable on the output Observable as soon as its internal\n' +
    ' * timer becomes disabled, and ignores source values while the timer is enabled.\n' +
    ' * Initially, the timer is disabled. As soon as the first source value arrives,\n' +
    ' * the timer is enabled by calling the `durationSelector` function with the\n' +
    ' * source value, which returns the "duration" Observable. When the duration\n' +
    ' * Observable emits a value or completes, the timer is disabled, then the most\n' +
    ' * recent source value is emitted on the output Observable, and this process\n' +
    ' * repeats for the next source value.\n' +
    ' *\n' +
    ' * ## Example\n' +
    ' *\n' +
    ' * Emit clicks at a rate of at most one click per second\n' +
    ' * ```ts\n' +
    " * import { fromEvent, interval } from 'rxjs';\n" +
    " * import { audit } from 'rxjs/operators'\n" +
    ' *\n' +
    " * const clicks = fromEvent(document, 'click');\n" +
    ' * const result = clicks.pipe(audit(ev => interval(1000)));\n' +
    ' * result.subscribe(x => console.log(x));\n' +
    ' * ```\n' +
    ' * @see {@link auditTime}\n' +
    ' * @see {@link debounce}\n' +
    ' * @see {@link delayWhen}\n' +
    ' * @see {@link sample}\n' +
    ' * @see {@link throttle}\n' +
    ' *\n' +
    ' * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n' +
    ' * that receives a value from the source Observable, for computing the silencing\n' +
    ' * duration, returned as an Observable or a Promise.\n' +
    ' * @return {Observable<T>} An Observable that performs rate-limiting of\n' +
    ' * emissions from the source Observable.\n' +
    ' * @method audit\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function audit<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): MonoTypeOperatorFunction<T>;\n',
  timestamp: 1669130812880
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130812886
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130812886
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/types.ts:false',
  timestamp: 1669130812886
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/types.tsx:false',
  timestamp: 1669130812886
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/types.d.ts:true',
  timestamp: 1669130812887
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/types.d.ts, [object Object]',
  timestamp: 1669130812887
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/types.d.ts: import { Observable } from './Observable';\n" +
    "import { Subscription } from './Subscription';\n" +
    '/**\n' +
    ' * Note: This will add Symbol.observable globally for all TypeScript users,\n' +
    ' * however, we are no longer polyfilling Symbol.observable\n' +
    ' */\n' +
    'declare global {\n' +
    '    interface SymbolConstructor {\n' +
    '        readonly observable: symbol;\n' +
    '    }\n' +
    '}\n' +
    '/** OPERATOR INTERFACES */\n' +
    'export interface UnaryFunction<T, R> {\n' +
    '    (source: T): R;\n' +
    '}\n' +
    'export interface OperatorFunction<T, R> extends UnaryFunction<Observable<T>, Observable<R>> {\n' +
    '}\n' +
    'export declare type FactoryOrValue<T> = T | (() => T);\n' +
    'export interface MonoTypeOperatorFunction<T> extends OperatorFunction<T, T> {\n' +
    '}\n' +
    'export interface Timestamp<T> {\n' +
    '    value: T;\n' +
    '    timestamp: number;\n' +
    '}\n' +
    'export interface TimeInterval<T> {\n' +
    '    value: T;\n' +
    '    interval: number;\n' +
    '}\n' +
    '/** SUBSCRIPTION INTERFACES */\n' +
    'export interface Unsubscribable {\n' +
    '    unsubscribe(): void;\n' +
    '}\n' +
    'export declare type TeardownLogic = Unsubscribable | Function | void;\n' +
    'export interface SubscriptionLike extends Unsubscribable {\n' +
    '    unsubscribe(): void;\n' +
    '    readonly closed: boolean;\n' +
    '}\n' +
    'export declare type SubscribableOrPromise<T> = Subscribable<T> | Subscribable<never> | PromiseLike<T> | InteropObservable<T>;\n' +
    '/** OBSERVABLE INTERFACES */\n' +
    'export interface Subscribable<T> {\n' +
    '    subscribe(observer?: PartialObserver<T>): Unsubscribable;\n' +
    '    /** @deprecated Use an observer instead of a complete callback */\n' +
    '    subscribe(next: null | undefined, error: null | undefined, complete: () => void): Unsubscribable;\n' +
    '    /** @deprecated Use an observer instead of an error callback */\n' +
    '    subscribe(next: null | undefined, error: (error: any) => void, complete?: () => void): Unsubscribable;\n' +
    '    /** @deprecated Use an observer instead of a complete callback */\n' +
    '    subscribe(next: (value: T) => void, error: null | undefined, complete: () => void): Unsubscribable;\n' +
    '    subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Unsubscribable;\n' +
    '}\n' +
    'export declare type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T> | Iterable<T>;\n' +
    '/** @deprecated use {@link InteropObservable } */\n' +
    'export declare type ObservableLike<T> = InteropObservable<T>;\n' +
    'export declare type InteropObservable<T> = {\n' +
    '    [Symbol.observable]: () => Subscribable<T>;\n' +
    '};\n' +
    '/** OBSERVER INTERFACES */\n' +
    'export interface NextObserver<T> {\n' +
    '    closed?: boolean;\n' +
    '    next: (value: T) => void;\n' +
    '    error?: (err: any) => void;\n' +
    '    complete?: () => void;\n' +
    '}\n' +
    'export interface ErrorObserver<T> {\n' +
    '    closed?: boolean;\n' +
    '    next?: (value: T) => void;\n' +
    '    error: (err: any) => void;\n' +
    '    complete?: () => void;\n' +
    '}\n' +
    'export interface CompletionObserver<T> {\n' +
    '    closed?: boolean;\n' +
    '    next?: (value: T) => void;\n' +
    '    error?: (err: any) => void;\n' +
    '    complete: () => void;\n' +
    '}\n' +
    'export declare type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n' +
    'export interface Observer<T> {\n' +
    '    closed?: boolean;\n' +
    '    next: (value: T) => void;\n' +
    '    error: (err: any) => void;\n' +
    '    complete: () => void;\n' +
    '}\n' +
    '/** SCHEDULER INTERFACES */\n' +
    'export interface SchedulerLike {\n' +
    '    now(): number;\n' +
    '    schedule<T>(work: (this: SchedulerAction<T>, state?: T) => void, delay?: number, state?: T): Subscription;\n' +
    '}\n' +
    'export interface SchedulerAction<T> extends Subscription {\n' +
    '    schedule(state?: T, delay?: number): Subscription;\n' +
    '}\n' +
    'export declare type ObservedValueOf<O> = O extends ObservableInput<infer T> ? T : never;\n' +
    'export declare type ObservedValuesFromArray<X> = X extends Array<ObservableInput<infer T>> ? T : never;\n',
  timestamp: 1669130812887
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130812898
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130812898
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Observable.ts:false',
  timestamp: 1669130812898
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Observable.tsx:false',
  timestamp: 1669130812898
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Observable.d.ts:true',
  timestamp: 1669130812898
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130812898
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130812898
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Subscription.ts:false',
  timestamp: 1669130812899
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Subscription.tsx:false',
  timestamp: 1669130812899
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Subscription.d.ts:true',
  timestamp: 1669130812899
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/Observable.d.ts, [object Object]',
  timestamp: 1669130812899
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/Observable.d.ts: import { Operator } from './Operator';\n" +
    "import { Subscriber } from './Subscriber';\n" +
    "import { Subscription } from './Subscription';\n" +
    "import { TeardownLogic, OperatorFunction, PartialObserver, Subscribable } from './types';\n" +
    "import { iif } from './observable/iif';\n" +
    "import { throwError } from './observable/throwError';\n" +
    '/**\n' +
    ' * A representation of any set of values over any amount of time. This is the most basic building block\n' +
    ' * of RxJS.\n' +
    ' *\n' +
    ' * @class Observable<T>\n' +
    ' */\n' +
    'export declare class Observable<T> implements Subscribable<T> {\n' +
    '    /** Internal implementation detail, do not use directly. */\n' +
    '    _isScalar: boolean;\n' +
    '    /** @deprecated This is an internal implementation detail, do not use. */\n' +
    '    source: Observable<any>;\n' +
    '    /** @deprecated This is an internal implementation detail, do not use. */\n' +
    '    operator: Operator<any, T>;\n' +
    '    /**\n' +
    '     * @constructor\n' +
    '     * @param {Function} subscribe the function that is called when the Observable is\n' +
    '     * initially subscribed to. This function is given a Subscriber, to which new values\n' +
    '     * can be `next`ed, or an `error` method can be called to raise an error, or\n' +
    '     * `complete` can be called to notify of a successful completion.\n' +
    '     */\n' +
    '    constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic);\n' +
    '    /**\n' +
    '     * Creates a new cold Observable by calling the Observable constructor\n' +
    '     * @static true\n' +
    '     * @owner Observable\n' +
    '     * @method create\n' +
    '     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n' +
    '     * @return {Observable} a new cold observable\n' +
    '     * @nocollapse\n' +
    '     * @deprecated use new Observable() instead\n' +
    '     */\n' +
    '    static create: Function;\n' +
    '    /**\n' +
    '     * Creates a new Observable, with this Observable as the source, and the passed\n' +
    "     * operator defined as the new observable's operator.\n" +
    '     * @method lift\n' +
    '     * @param {Operator} operator the operator defining the operation to take on the observable\n' +
    '     * @return {Observable} a new observable with the Operator applied\n' +
    '     */\n' +
    '    lift<R>(operator: Operator<T, R>): Observable<R>;\n' +
    '    subscribe(observer?: PartialObserver<T>): Subscription;\n' +
    '    /** @deprecated Use an observer instead of a complete callback */\n' +
    '    subscribe(next: null | undefined, error: null | undefined, complete: () => void): Subscription;\n' +
    '    /** @deprecated Use an observer instead of an error callback */\n' +
    '    subscribe(next: null | undefined, error: (error: any) => void, complete?: () => void): Subscription;\n' +
    '    /** @deprecated Use an observer instead of a complete callback */\n' +
    '    subscribe(next: (value: T) => void, error: null | undefined, complete: () => void): Subscription;\n' +
    '    subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n' +
    '    /** @deprecated This is an internal implementation detail, do not use. */\n' +
    '    _trySubscribe(sink: Subscriber<T>): TeardownLogic;\n' +
    '    /**\n' +
    '     * @method forEach\n' +
    '     * @param {Function} next a handler for each value emitted by the observable\n' +
    '     * @param {PromiseConstructor} [promiseCtor] a constructor function used to instantiate the Promise\n' +
    '     * @return {Promise} a promise that either resolves on observable completion or\n' +
    '     *  rejects with the handled error\n' +
    '     */\n' +
    '    forEach(next: (value: T) => void, promiseCtor?: PromiseConstructorLike): Promise<void>;\n' +
    '    /** @internal This is an internal implementation detail, do not use. */\n' +
    '    _subscribe(subscriber: Subscriber<any>): TeardownLogic;\n' +
    '    /**\n' +
    '     * @nocollapse\n' +
    "     * @deprecated In favor of iif creation function: import { iif } from 'rxjs';\n" +
    '     */\n' +
    '    static if: typeof iif;\n' +
    '    /**\n' +
    '     * @nocollapse\n' +
    "     * @deprecated In favor of throwError creation function: import { throwError } from 'rxjs';\n" +
    '     */\n' +
    '    static throw: typeof throwError;\n' +
    '    pipe(): Observable<T>;\n' +
    '    pipe<A>(op1: OperatorFunction<T, A>): Observable<A>;\n' +
    '    pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>;\n' +
    '    pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>;\n' +
    '    pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>;\n' +
    '    pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>;\n' +
    '    pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>;\n' +
    '    pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>;\n' +
    '    pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>;\n' +
    '    pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>;\n' +
    '    pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>, ...operations: OperatorFunction<any, any>[]): Observable<{}>;\n' +
    '    toPromise<T>(this: Observable<T>): Promise<T>;\n' +
    '    toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n' +
    '    toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n' +
    '}\n',
  timestamp: 1669130812899
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130812913
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130812913
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Operator.ts:false',
  timestamp: 1669130812913
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Operator.tsx:false',
  timestamp: 1669130812913
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Operator.d.ts:true',
  timestamp: 1669130812913
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130812913
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130812913
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Subscriber.ts:false',
  timestamp: 1669130812914
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Subscriber.tsx:false',
  timestamp: 1669130812914
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Subscriber.d.ts:true',
  timestamp: 1669130812914
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130812914
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130812914
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/types.ts:false',
  timestamp: 1669130812914
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/types.tsx:false',
  timestamp: 1669130812914
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/types.d.ts:true',
  timestamp: 1669130812914
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130812914
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130812914
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/iif.ts:false',
  timestamp: 1669130812914
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/iif.tsx:false',
  timestamp: 1669130812914
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/iif.d.ts:true',
  timestamp: 1669130812914
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130812915
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130812915
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/throwError.ts:false',
  timestamp: 1669130812915
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/throwError.tsx:false',
  timestamp: 1669130812915
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/throwError.d.ts:true',
  timestamp: 1669130812915
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/Operator.d.ts, [object Object]',
  timestamp: 1669130812915
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/Operator.d.ts: import { Subscriber } from './Subscriber';\n" +
    "import { TeardownLogic } from './types';\n" +
    'export interface Operator<T, R> {\n' +
    '    call(subscriber: Subscriber<R>, source: any): TeardownLogic;\n' +
    '}\n',
  timestamp: 1669130812915
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/Subscriber.d.ts, [object Object]',
  timestamp: 1669130812916
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/Subscriber.d.ts: import { Observer, PartialObserver } from './types';\n" +
    "import { Subscription } from './Subscription';\n" +
    '/**\n' +
    ' * Implements the {@link Observer} interface and extends the\n' +
    ' * {@link Subscription} class. While the {@link Observer} is the public API for\n' +
    ' * consuming the values of an {@link Observable}, all Observers get converted to\n' +
    ' * a Subscriber, in order to provide Subscription-like capabilities such as\n' +
    ' * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n' +
    ' * implementing operators, but it is rarely used as a public API.\n' +
    ' *\n' +
    ' * @class Subscriber<T>\n' +
    ' */\n' +
    'export declare class Subscriber<T> extends Subscription implements Observer<T> {\n' +
    '    /**\n' +
    '     * A static factory for a Subscriber, given a (potentially partial) definition\n' +
    '     * of an Observer.\n' +
    '     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n' +
    '     * @param {function(e: ?any): void} [error] The `error` callback of an\n' +
    '     * Observer.\n' +
    '     * @param {function(): void} [complete] The `complete` callback of an\n' +
    '     * Observer.\n' +
    '     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n' +
    '     * Observer represented by the given arguments.\n' +
    '     * @nocollapse\n' +
    '     */\n' +
    '    static create<T>(next?: (x?: T) => void, error?: (e?: any) => void, complete?: () => void): Subscriber<T>;\n' +
    '    /** @internal */ syncErrorValue: any;\n' +
    '    /** @internal */ syncErrorThrown: boolean;\n' +
    '    /** @internal */ syncErrorThrowable: boolean;\n' +
    '    protected isStopped: boolean;\n' +
    '    protected destination: PartialObserver<any> | Subscriber<any>;\n' +
    '    /**\n' +
    '     * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n' +
    '     * defined Observer or a `next` callback function.\n' +
    '     * @param {function(e: ?any): void} [error] The `error` callback of an\n' +
    '     * Observer.\n' +
    '     * @param {function(): void} [complete] The `complete` callback of an\n' +
    '     * Observer.\n' +
    '     */\n' +
    '    constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void), error?: (e?: any) => void, complete?: () => void);\n' +
    '    /**\n' +
    '     * The {@link Observer} callback to receive notifications of type `next` from\n' +
    '     * the Observable, with a value. The Observable may call this method 0 or more\n' +
    '     * times.\n' +
    '     * @param {T} [value] The `next` value.\n' +
    '     * @return {void}\n' +
    '     */\n' +
    '    next(value?: T): void;\n' +
    '    /**\n' +
    '     * The {@link Observer} callback to receive notifications of type `error` from\n' +
    '     * the Observable, with an attached `Error`. Notifies the Observer that\n' +
    '     * the Observable has experienced an error condition.\n' +
    '     * @param {any} [err] The `error` exception.\n' +
    '     * @return {void}\n' +
    '     */\n' +
    '    error(err?: any): void;\n' +
    '    /**\n' +
    '     * The {@link Observer} callback to receive a valueless notification of type\n' +
    '     * `complete` from the Observable. Notifies the Observer that the Observable\n' +
    '     * has finished sending push-based notifications.\n' +
    '     * @return {void}\n' +
    '     */\n' +
    '    complete(): void;\n' +
    '    unsubscribe(): void;\n' +
    '    protected _next(value: T): void;\n' +
    '    protected _error(err: any): void;\n' +
    '    protected _complete(): void;\n' +
    '    /** @deprecated This is an internal implementation detail, do not use. */\n' +
    '    _unsubscribeAndRecycle(): Subscriber<T>;\n' +
    '}\n' +
    '/**\n' +
    ' * We need this JSDoc comment for affecting ESDoc.\n' +
    ' * @ignore\n' +
    ' * @extends {Ignored}\n' +
    ' */\n' +
    'export declare class SafeSubscriber<T> extends Subscriber<T> {\n' +
    '    private _parentSubscriber;\n' +
    '    private _context;\n' +
    '    constructor(_parentSubscriber: Subscriber<T>, observerOrNext?: PartialObserver<T> | ((value: T) => void), error?: (e?: any) => void, complete?: () => void);\n' +
    '    next(value?: T): void;\n' +
    '    error(err?: any): void;\n' +
    '    complete(): void;\n' +
    '    private __tryOrUnsub;\n' +
    '    private __tryOrSetError;\n' +
    '    /** @internal This is an internal implementation detail, do not use. */\n' +
    '    _unsubscribe(): void;\n' +
    '}\n',
  timestamp: 1669130812916
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/Subscription.d.ts, [object Object]',
  timestamp: 1669130812924
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/Subscription.d.ts: import { SubscriptionLike, TeardownLogic } from './types';\n" +
    '/**\n' +
    ' * Represents a disposable resource, such as the execution of an Observable. A\n' +
    ' * Subscription has one important method, `unsubscribe`, that takes no argument\n' +
    ' * and just disposes the resource held by the subscription.\n' +
    ' *\n' +
    ' * Additionally, subscriptions may be grouped together through the `add()`\n' +
    ' * method, which will attach a child Subscription to the current Subscription.\n' +
    ' * When a Subscription is unsubscribed, all its children (and its grandchildren)\n' +
    ' * will be unsubscribed as well.\n' +
    ' *\n' +
    ' * @class Subscription\n' +
    ' */\n' +
    'export declare class Subscription implements SubscriptionLike {\n' +
    '    /** @nocollapse */\n' +
    '    static EMPTY: Subscription;\n' +
    '    /**\n' +
    '     * A flag to indicate whether this Subscription has already been unsubscribed.\n' +
    '     * @type {boolean}\n' +
    '     */\n' +
    '    closed: boolean;\n' +
    '    /** @internal */\n' +
    '    protected _parentOrParents: Subscription | Subscription[];\n' +
    '    /** @internal */\n' +
    '    private _subscriptions;\n' +
    '    /**\n' +
    '     * @param {function(): void} [unsubscribe] A function describing how to\n' +
    '     * perform the disposal of resources when the `unsubscribe` method is called.\n' +
    '     */\n' +
    '    constructor(unsubscribe?: () => void);\n' +
    '    /**\n' +
    '     * Disposes the resources held by the subscription. May, for instance, cancel\n' +
    '     * an ongoing Observable execution or cancel any other type of work that\n' +
    '     * started when the Subscription was created.\n' +
    '     * @return {void}\n' +
    '     */\n' +
    '    unsubscribe(): void;\n' +
    '    /**\n' +
    '     * Adds a tear down to be called during the unsubscribe() of this\n' +
    '     * Subscription. Can also be used to add a child subscription.\n' +
    '     *\n' +
    '     * If the tear down being added is a subscription that is already\n' +
    '     * unsubscribed, is the same reference `add` is being called on, or is\n' +
    '     * `Subscription.EMPTY`, it will not be added.\n' +
    '     *\n' +
    '     * If this subscription is already in an `closed` state, the passed\n' +
    '     * tear down logic will be executed immediately.\n' +
    '     *\n' +
    '     * When a parent subscription is unsubscribed, any child subscriptions that were added to it are also unsubscribed.\n' +
    '     *\n' +
    '     * @param {TeardownLogic} teardown The additional logic to execute on\n' +
    '     * teardown.\n' +
    '     * @return {Subscription} Returns the Subscription used or created to be\n' +
    '     * added to the inner subscriptions list. This Subscription can be used with\n' +
    '     * `remove()` to remove the passed teardown logic from the inner subscriptions\n' +
    '     * list.\n' +
    '     */\n' +
    '    add(teardown: TeardownLogic): Subscription;\n' +
    '    /**\n' +
    '     * Removes a Subscription from the internal list of subscriptions that will\n' +
    '     * unsubscribe during the unsubscribe process of this Subscription.\n' +
    '     * @param {Subscription} subscription The subscription to remove.\n' +
    '     * @return {void}\n' +
    '     */\n' +
    '    remove(subscription: Subscription): void;\n' +
    '}\n',
  timestamp: 1669130812924
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/observable/iif.d.ts, [object Object]',
  timestamp: 1669130812927
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/observable/iif.d.ts: import { Observable } from '../Observable';\n" +
    "import { SubscribableOrPromise } from '../types';\n" +
    '/**\n' +
    ' * Decides at subscription time which Observable will actually be subscribed.\n' +
    ' *\n' +
    ' * <span class="informal">`If` statement for Observables.</span>\n' +
    ' *\n' +
    ' * `iif` accepts a condition function and two Observables. When\n' +
    ' * an Observable returned by the operator is subscribed, condition function will be called.\n' +
    ' * Based on what boolean it returns at that moment, consumer will subscribe either to\n' +
    ' * the first Observable (if condition was true) or to the second (if condition was false). Condition\n' +
    ' * function may also not return anything - in that case condition will be evaluated as false and\n' +
    ' * second Observable will be subscribed.\n' +
    ' *\n' +
    ' * Note that Observables for both cases (true and false) are optional. If condition points to an Observable that\n' +
    ' * was left undefined, resulting stream will simply complete immediately. That allows you to, rather\n' +
    ' * than controlling which Observable will be subscribed, decide at runtime if consumer should have access\n' +
    ' * to given Observable or not.\n' +
    ' *\n' +
    ' * If you have more complex logic that requires decision between more than two Observables, {@link defer}\n' +
    ' * will probably be a better choice. Actually `iif` can be easily implemented with {@link defer}\n' +
    ' * and exists only for convenience and readability reasons.\n' +
    ' *\n' +
    ' *\n' +
    ' * ## Examples\n' +
    ' * ### Change at runtime which Observable will be subscribed\n' +
    ' * ```ts\n' +
    " * import { iif, of } from 'rxjs';\n" +
    ' *\n' +
    ' * let subscribeToFirst;\n' +
    ' * const firstOrSecond = iif(\n' +
    ' *   () => subscribeToFirst,\n' +
    " *   of('first'),\n" +
    " *   of('second'),\n" +
    ' * );\n' +
    ' *\n' +
    ' * subscribeToFirst = true;\n' +
    ' * firstOrSecond.subscribe(value => console.log(value));\n' +
    ' *\n' +
    ' * // Logs:\n' +
    ' * // "first"\n' +
    ' *\n' +
    ' * subscribeToFirst = false;\n' +
    ' * firstOrSecond.subscribe(value => console.log(value));\n' +
    ' *\n' +
    ' * // Logs:\n' +
    ' * // "second"\n' +
    ' *\n' +
    ' * ```\n' +
    ' *\n' +
    ' * ### Control an access to an Observable\n' +
    ' * ```ts\n' +
    ' * let accessGranted;\n' +
    ' * const observableIfYouHaveAccess = iif(\n' +
    ' *   () => accessGranted,\n' +
    " *   of('It seems you have an access...'), // Note that only one Observable is passed to the operator.\n" +
    ' * );\n' +
    ' *\n' +
    ' * accessGranted = true;\n' +
    ' * observableIfYouHaveAccess.subscribe(\n' +
    ' *   value => console.log(value),\n' +
    ' *   err => {},\n' +
    " *   () => console.log('The end'),\n" +
    ' * );\n' +
    ' *\n' +
    ' * // Logs:\n' +
    ' * // "It seems you have an access..."\n' +
    ' * // "The end"\n' +
    ' *\n' +
    ' * accessGranted = false;\n' +
    ' * observableIfYouHaveAccess.subscribe(\n' +
    ' *   value => console.log(value),\n' +
    ' *   err => {},\n' +
    " *   () => console.log('The end'),\n" +
    ' * );\n' +
    ' *\n' +
    ' * // Logs:\n' +
    ' * // "The end"\n' +
    ' * ```\n' +
    ' *\n' +
    ' * @see {@link defer}\n' +
    ' *\n' +
    ' * @param {function(): boolean} condition Condition which Observable should be chosen.\n' +
    ' * @param {Observable} [trueObservable] An Observable that will be subscribed if condition is true.\n' +
    ' * @param {Observable} [falseObservable] An Observable that will be subscribed if condition is false.\n' +
    ' * @return {Observable} Either first or second Observable, depending on condition.\n' +
    ' * @static true\n' +
    ' * @name iif\n' +
    ' * @owner Observable\n' +
    '*/\n' +
    'export declare function iif<T = never, F = never>(condition: () => boolean, trueResult?: SubscribableOrPromise<T>, falseResult?: SubscribableOrPromise<F>): Observable<T | F>;\n',
  timestamp: 1669130812927
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130812930
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130812930
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Observable.ts:false',
  timestamp: 1669130812930
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Observable.tsx:false',
  timestamp: 1669130812930
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Observable.d.ts:true',
  timestamp: 1669130812930
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130812930
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130812930
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/types.ts:false',
  timestamp: 1669130812930
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/types.tsx:false',
  timestamp: 1669130812930
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/types.d.ts:true',
  timestamp: 1669130812931
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/observable/throwError.d.ts, [object Object]',
  timestamp: 1669130812931
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/observable/throwError.d.ts: import { Observable } from '../Observable';\n" +
    "import { SchedulerLike } from '../types';\n" +
    '/**\n' +
    ' * Creates an Observable that emits no items to the Observer and immediately\n' +
    ' * emits an error notification.\n' +
    ' *\n' +
    ` * <span class="informal">Just emits 'error', and nothing else.\n` +
    ' * </span>\n' +
    ' *\n' +
    ' * ![](throw.png)\n' +
    ' *\n' +
    ' * This static operator is useful for creating a simple Observable that only\n' +
    ' * emits the error notification. It can be used for composing with other\n' +
    ' * Observables, such as in a {@link mergeMap}.\n' +
    ' *\n' +
    ' * ## Examples\n' +
    ' * ### Emit the number 7, then emit an error\n' +
    ' * ```ts\n' +
    " * import { throwError, concat, of } from 'rxjs';\n" +
    ' *\n' +
    " * const result = concat(of(7), throwError(new Error('oops!')));\n" +
    ' * result.subscribe(x => console.log(x), e => console.error(e));\n' +
    ' *\n' +
    ' * // Logs:\n' +
    ' * // 7\n' +
    ' * // Error: oops!\n' +
    ' * ```\n' +
    ' *\n' +
    ' * ---\n' +
    ' *\n' +
    " * ### Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 2\n" +
    ' * ```ts\n' +
    " * import { throwError, interval, of } from 'rxjs';\n" +
    " * import { mergeMap } from 'rxjs/operators';\n" +
    ' *\n' +
    ' * interval(1000).pipe(\n' +
    ' *   mergeMap(x => x === 2\n' +
    " *     ? throwError('Twos are bad')\n" +
    " *     : of('a', 'b', 'c')\n" +
    ' *   ),\n' +
    ' * ).subscribe(x => console.log(x), e => console.error(e));\n' +
    ' *\n' +
    ' * // Logs:\n' +
    ' * // a\n' +
    ' * // b\n' +
    ' * // c\n' +
    ' * // a\n' +
    ' * // b\n' +
    ' * // c\n' +
    ' * // Twos are bad\n' +
    ' * ```\n' +
    ' *\n' +
    ' * @see {@link Observable}\n' +
    ' * @see {@link empty}\n' +
    ' * @see {@link never}\n' +
    ' * @see {@link of}\n' +
    ' *\n' +
    ' * @param {any} error The particular Error to pass to the error notification.\n' +
    ' * @param {SchedulerLike} [scheduler] A {@link SchedulerLike} to use for scheduling\n' +
    ' * the emission of the error notification.\n' +
    ' * @return {Observable} An error Observable: emits only the error notification\n' +
    ' * using the given error argument.\n' +
    ' * @static true\n' +
    ' * @name throwError\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function throwError(error: any, scheduler?: SchedulerLike): Observable<never>;\n',
  timestamp: 1669130812931
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/auditTime.d.ts, [object Object]',
  timestamp: 1669130812932
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/auditTime.d.ts: import { MonoTypeOperatorFunction, SchedulerLike } from '../types';\n" +
    '/**\n' +
    ' * Ignores source values for `duration` milliseconds, then emits the most recent\n' +
    ' * value from the source Observable, then repeats this process.\n' +
    ' *\n' +
    ' * <span class="informal">When it sees a source value, it ignores that plus\n' +
    ' * the next ones for `duration` milliseconds, and then it emits the most recent\n' +
    ' * value from the source.</span>\n' +
    ' *\n' +
    ' * ![](auditTime.png)\n' +
    ' *\n' +
    ' * `auditTime` is similar to `throttleTime`, but emits the last value from the\n' +
    ' * silenced time window, instead of the first value. `auditTime` emits the most\n' +
    ' * recent value from the source Observable on the output Observable as soon as\n' +
    ' * its internal timer becomes disabled, and ignores source values while the\n' +
    ' * timer is enabled. Initially, the timer is disabled. As soon as the first\n' +
    ' * source value arrives, the timer is enabled. After `duration` milliseconds (or\n' +
    ' * the time unit determined internally by the optional `scheduler`) has passed,\n' +
    ' * the timer is disabled, then the most recent source value is emitted on the\n' +
    ' * output Observable, and this process repeats for the next source value.\n' +
    ' * Optionally takes a {@link SchedulerLike} for managing timers.\n' +
    ' *\n' +
    ' * ## Example\n' +
    ' *\n' +
    ' * Emit clicks at a rate of at most one click per second\n' +
    ' * ```ts\n' +
    " * import { fromEvent } from 'rxjs';\n" +
    " * import { auditTime } from 'rxjs/operators';\n" +
    ' *\n' +
    " * const clicks = fromEvent(document, 'click');\n" +
    ' * const result = clicks.pipe(auditTime(1000));\n' +
    ' * result.subscribe(x => console.log(x));\n' +
    ' * ```\n' +
    ' *\n' +
    ' * @see {@link audit}\n' +
    ' * @see {@link debounceTime}\n' +
    ' * @see {@link delay}\n' +
    ' * @see {@link sampleTime}\n' +
    ' * @see {@link throttleTime}\n' +
    ' *\n' +
    ' * @param {number} duration Time to wait before emitting the most recent source\n' +
    ' * value, measured in milliseconds or the time unit determined internally\n' +
    ' * by the optional `scheduler`.\n' +
    ' * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\n' +
    ' * managing the timers that handle the rate-limiting behavior.\n' +
    ' * @return {Observable<T>} An Observable that performs rate-limiting of\n' +
    ' * emissions from the source Observable.\n' +
    ' * @method auditTime\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function auditTime<T>(duration: number, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n',
  timestamp: 1669130812932
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/buffer.d.ts, [object Object]',
  timestamp: 1669130812934
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/buffer.d.ts: import { Observable } from '../Observable';\n" +
    "import { OperatorFunction } from '../types';\n" +
    '/**\n' +
    ' * Buffers the source Observable values until `closingNotifier` emits.\n' +
    ' *\n' +
    ' * <span class="informal">Collects values from the past as an array, and emits\n' +
    ' * that array only when another Observable emits.</span>\n' +
    ' *\n' +
    ' * ![](buffer.png)\n' +
    ' *\n' +
    ' * Buffers the incoming Observable values until the given `closingNotifier`\n' +
    ' * Observable emits a value, at which point it emits the buffer on the output\n' +
    ' * Observable and starts a new buffer internally, awaiting the next time\n' +
    ' * `closingNotifier` emits.\n' +
    ' *\n' +
    ' * ## Example\n' +
    ' *\n' +
    ' * On every click, emit array of most recent interval events\n' +
    ' *\n' +
    ' * ```ts\n' +
    " * import { fromEvent, interval } from 'rxjs';\n" +
    " * import { buffer } from 'rxjs/operators';\n" +
    ' *\n' +
    " * const clicks = fromEvent(document, 'click');\n" +
    ' * const intervalEvents = interval(1000);\n' +
    ' * const buffered = intervalEvents.pipe(buffer(clicks));\n' +
    ' * buffered.subscribe(x => console.log(x));\n' +
    ' * ```\n' +
    ' *\n' +
    ' * @see {@link bufferCount}\n' +
    ' * @see {@link bufferTime}\n' +
    ' * @see {@link bufferToggle}\n' +
    ' * @see {@link bufferWhen}\n' +
    ' * @see {@link window}\n' +
    ' *\n' +
    ' * @param {Observable<any>} closingNotifier An Observable that signals the\n' +
    ' * buffer to be emitted on the output Observable.\n' +
    ' * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n' +
    ' * values.\n' +
    ' * @method buffer\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function buffer<T>(closingNotifier: Observable<any>): OperatorFunction<T, T[]>;\n',
  timestamp: 1669130812934
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130812936
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130812936
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Observable.ts:false',
  timestamp: 1669130812936
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Observable.tsx:false',
  timestamp: 1669130812936
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Observable.d.ts:true',
  timestamp: 1669130812937
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/bufferCount.d.ts, [object Object]',
  timestamp: 1669130812937
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/bufferCount.d.ts: import { OperatorFunction } from '../types';\n" +
    '/**\n' +
    ' * Buffers the source Observable values until the size hits the maximum\n' +
    ' * `bufferSize` given.\n' +
    ' *\n' +
    ' * <span class="informal">Collects values from the past as an array, and emits\n' +
    ' * that array only when its size reaches `bufferSize`.</span>\n' +
    ' *\n' +
    ' * ![](bufferCount.png)\n' +
    ' *\n' +
    ' * Buffers a number of values from the source Observable by `bufferSize` then\n' +
    ' * emits the buffer and clears it, and starts a new buffer each\n' +
    ' * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n' +
    ' * `null`, then new buffers are started immediately at the start of the source\n' +
    ' * and when each buffer closes and is emitted.\n' +
    ' *\n' +
    ' * ## Examples\n' +
    ' *\n' +
    ' * Emit the last two click events as an array\n' +
    ' *\n' +
    ' * ```ts\n' +
    " * import { fromEvent } from 'rxjs';\n" +
    " * import { bufferCount } from 'rxjs/operators';\n" +
    ' *\n' +
    " * const clicks = fromEvent(document, 'click');\n" +
    ' * const buffered = clicks.pipe(bufferCount(2));\n' +
    ' * buffered.subscribe(x => console.log(x));\n' +
    ' * ```\n' +
    ' *\n' +
    ' * On every click, emit the last two click events as an array\n' +
    ' *\n' +
    ' * ```ts\n' +
    " * import { fromEvent } from 'rxjs';\n" +
    " * import { bufferCount } from 'rxjs/operators';\n" +
    ' *\n' +
    " * const clicks = fromEvent(document, 'click');\n" +
    ' * const buffered = clicks.pipe(bufferCount(2, 1));\n' +
    ' * buffered.subscribe(x => console.log(x));\n' +
    ' * ```\n' +
    ' *\n' +
    ' * @see {@link buffer}\n' +
    ' * @see {@link bufferTime}\n' +
    ' * @see {@link bufferToggle}\n' +
    ' * @see {@link bufferWhen}\n' +
    ' * @see {@link pairwise}\n' +
    ' * @see {@link windowCount}\n' +
    ' *\n' +
    ' * @param {number} bufferSize The maximum size of the buffer emitted.\n' +
    ' * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n' +
    ' * For example if `startBufferEvery` is `2`, then a new buffer will be started\n' +
    ' * on every other value from the source. A new buffer is started at the\n' +
    ' * beginning of the source by default.\n' +
    ' * @return {Observable<T[]>} An Observable of arrays of buffered values.\n' +
    ' * @method bufferCount\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function bufferCount<T>(bufferSize: number, startBufferEvery?: number): OperatorFunction<T, T[]>;\n',
  timestamp: 1669130812937
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/bufferTime.d.ts, [object Object]',
  timestamp: 1669130812938
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/bufferTime.d.ts: import { OperatorFunction, SchedulerLike } from '../types';\n" +
    'export declare function bufferTime<T>(bufferTimeSpan: number, scheduler?: SchedulerLike): OperatorFunction<T, T[]>;\n' +
    'export declare function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number | null | undefined, scheduler?: SchedulerLike): OperatorFunction<T, T[]>;\n' +
    'export declare function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number | null | undefined, maxBufferSize: number, scheduler?: SchedulerLike): OperatorFunction<T, T[]>;\n',
  timestamp: 1669130812938
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/bufferToggle.d.ts, [object Object]',
  timestamp: 1669130812939
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/bufferToggle.d.ts: import { OperatorFunction, SubscribableOrPromise } from '../types';\n" +
    '/**\n' +
    ' * Buffers the source Observable values starting from an emission from\n' +
    ' * `openings` and ending when the output of `closingSelector` emits.\n' +
    ' *\n' +
    ' * <span class="informal">Collects values from the past as an array. Starts\n' +
    ' * collecting only when `opening` emits, and calls the `closingSelector`\n' +
    ' * function to get an Observable that tells when to close the buffer.</span>\n' +
    ' *\n' +
    ' * ![](bufferToggle.png)\n' +
    ' *\n' +
    ' * Buffers values from the source by opening the buffer via signals from an\n' +
    ' * Observable provided to `openings`, and closing and sending the buffers when\n' +
    ' * a Subscribable or Promise returned by the `closingSelector` function emits.\n' +
    ' *\n' +
    ' * ## Example\n' +
    ' *\n' +
    ' * Every other second, emit the click events from the next 500ms\n' +
    ' *\n' +
    ' * ```ts\n' +
    " * import { fromEvent, interval, EMPTY } from 'rxjs';\n" +
    " * import { bufferToggle } from 'rxjs/operators';\n" +
    ' *\n' +
    " * const clicks = fromEvent(document, 'click');\n" +
    ' * const openings = interval(1000);\n' +
    ' * const buffered = clicks.pipe(bufferToggle(openings, i =>\n' +
    ' *   i % 2 ? interval(500) : EMPTY\n' +
    ' * ));\n' +
    ' * buffered.subscribe(x => console.log(x));\n' +
    ' * ```\n' +
    ' *\n' +
    ' * @see {@link buffer}\n' +
    ' * @see {@link bufferCount}\n' +
    ' * @see {@link bufferTime}\n' +
    ' * @see {@link bufferWhen}\n' +
    ' * @see {@link windowToggle}\n' +
    ' *\n' +
    ' * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n' +
    ' * buffers.\n' +
    ' * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n' +
    ' * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n' +
    ' * which, when it emits, signals that the associated buffer should be emitted\n' +
    ' * and cleared.\n' +
    ' * @return {Observable<T[]>} An observable of arrays of buffered values.\n' +
    ' * @method bufferToggle\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function bufferToggle<T, O>(openings: SubscribableOrPromise<O>, closingSelector: (value: O) => SubscribableOrPromise<any>): OperatorFunction<T, T[]>;\n',
  timestamp: 1669130812939
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/bufferWhen.d.ts, [object Object]',
  timestamp: 1669130812941
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/bufferWhen.d.ts: import { Observable } from '../Observable';\n" +
    "import { OperatorFunction } from '../types';\n" +
    '/**\n' +
    ' * Buffers the source Observable values, using a factory function of closing\n' +
    ' * Observables to determine when to close, emit, and reset the buffer.\n' +
    ' *\n' +
    ' * <span class="informal">Collects values from the past as an array. When it\n' +
    ' * starts collecting values, it calls a function that returns an Observable that\n' +
    ' * tells when to close the buffer and restart collecting.</span>\n' +
    ' *\n' +
    ' * ![](bufferWhen.png)\n' +
    ' *\n' +
    ' * Opens a buffer immediately, then closes the buffer when the observable\n' +
    ' * returned by calling `closingSelector` function emits a value. When it closes\n' +
    ' * the buffer, it immediately opens a new buffer and repeats the process.\n' +
    ' *\n' +
    ' * ## Example\n' +
    ' *\n' +
    ' * Emit an array of the last clicks every [1-5] random seconds\n' +
    ' *\n' +
    ' * ```ts\n' +
    " * import { fromEvent, interval } from 'rxjs';\n" +
    " * import { bufferWhen } from 'rxjs/operators';\n" +
    ' *\n' +
    " * const clicks = fromEvent(document, 'click');\n" +
    ' * const buffered = clicks.pipe(bufferWhen(() =>\n' +
    ' *   interval(1000 + Math.random() * 4000)\n' +
    ' * ));\n' +
    ' * buffered.subscribe(x => console.log(x));\n' +
    ' * ```\n' +
    ' *\n' +
    ' *\n' +
    ' * @see {@link buffer}\n' +
    ' * @see {@link bufferCount}\n' +
    ' * @see {@link bufferTime}\n' +
    ' * @see {@link bufferToggle}\n' +
    ' * @see {@link windowWhen}\n' +
    ' *\n' +
    ' * @param {function(): Observable} closingSelector A function that takes no\n' +
    ' * arguments and returns an Observable that signals buffer closure.\n' +
    ' * @return {Observable<T[]>} An observable of arrays of buffered values.\n' +
    ' * @method bufferWhen\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function bufferWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, T[]>;\n',
  timestamp: 1669130812941
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/catchError.d.ts, [object Object]',
  timestamp: 1669130812944
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/catchError.d.ts: import { Observable } from '../Observable';\n" +
    "import { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\n" +
    'export declare function catchError<T, O extends ObservableInput<any>>(selector: (err: any, caught: Observable<T>) => O): OperatorFunction<T, T | ObservedValueOf<O>>;\n',
  timestamp: 1669130812945
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/combineAll.d.ts, [object Object]',
  timestamp: 1669130812945
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/combineAll.d.ts: import { OperatorFunction, ObservableInput } from '../types';\n" +
    'export declare function combineAll<T>(): OperatorFunction<ObservableInput<T>, T[]>;\n' +
    'export declare function combineAll<T>(): OperatorFunction<any, T[]>;\n' +
    'export declare function combineAll<T, R>(project: (...values: T[]) => R): OperatorFunction<ObservableInput<T>, R>;\n' +
    'export declare function combineAll<R>(project: (...values: Array<any>) => R): OperatorFunction<any, R>;\n',
  timestamp: 1669130812945
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/combineLatest.d.ts, [object Object]',
  timestamp: 1669130812947
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/combineLatest.d.ts: import { ObservableInput, OperatorFunction } from '../types';\n" +
    '/** @deprecated Deprecated in favor of static combineLatest. */\n' +
    'export declare function combineLatest<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\n' +
    '/** @deprecated Deprecated in favor of static combineLatest. */\n' +
    'export declare function combineLatest<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\n' +
    '/** @deprecated Deprecated in favor of static combineLatest. */\n' +
    'export declare function combineLatest<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\n' +
    '/** @deprecated Deprecated in favor of static combineLatest. */\n' +
    'export declare function combineLatest<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\n' +
    '/** @deprecated Deprecated in favor of static combineLatest. */\n' +
    'export declare function combineLatest<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\n' +
    '/** @deprecated Deprecated in favor of static combineLatest. */\n' +
    'export declare function combineLatest<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R>;\n' +
    '/** @deprecated Deprecated in favor of static combineLatest. */\n' +
    'export declare function combineLatest<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\n' +
    '/** @deprecated Deprecated in favor of static combineLatest. */\n' +
    'export declare function combineLatest<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\n' +
    '/** @deprecated Deprecated in favor of static combineLatest. */\n' +
    'export declare function combineLatest<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\n' +
    '/** @deprecated Deprecated in favor of static combineLatest. */\n' +
    'export declare function combineLatest<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\n' +
    '/** @deprecated Deprecated in favor of static combineLatest. */\n' +
    'export declare function combineLatest<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]>;\n' +
    '/** @deprecated Deprecated in favor of static combineLatest. */\n' +
    'export declare function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\n' +
    '/** @deprecated Deprecated in favor of static combineLatest. */\n' +
    'export declare function combineLatest<T, R>(array: ObservableInput<T>[]): OperatorFunction<T, Array<T>>;\n' +
    '/** @deprecated Deprecated in favor of static combineLatest. */\n' +
    'export declare function combineLatest<T, TOther, R>(array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n',
  timestamp: 1669130812947
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/concat.d.ts, [object Object]',
  timestamp: 1669130812954
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/concat.d.ts: import { ObservableInput, OperatorFunction, MonoTypeOperatorFunction, SchedulerLike } from '../types';\n" +
    '/** @deprecated Deprecated in favor of static concat. */\n' +
    'export declare function concat<T>(scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n' +
    '/** @deprecated Deprecated in favor of static concat. */\n' +
    'export declare function concat<T, T2>(v2: ObservableInput<T2>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2>;\n' +
    '/** @deprecated Deprecated in favor of static concat. */\n' +
    'export declare function concat<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3>;\n' +
    '/** @deprecated Deprecated in favor of static concat. */\n' +
    'export declare function concat<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4>;\n' +
    '/** @deprecated Deprecated in favor of static concat. */\n' +
    'export declare function concat<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\n' +
    '/** @deprecated Deprecated in favor of static concat. */\n' +
    'export declare function concat<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\n' +
    '/** @deprecated Deprecated in favor of static concat. */\n' +
    'export declare function concat<T>(...observables: Array<ObservableInput<T> | SchedulerLike>): MonoTypeOperatorFunction<T>;\n' +
    '/** @deprecated Deprecated in favor of static concat. */\n' +
    'export declare function concat<T, R>(...observables: Array<ObservableInput<any> | SchedulerLike>): OperatorFunction<T, R>;\n',
  timestamp: 1669130812955
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/concatAll.d.ts, [object Object]',
  timestamp: 1669130812958
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/concatAll.d.ts: import { OperatorFunction, ObservableInput } from '../types';\n" +
    'export declare function concatAll<T>(): OperatorFunction<ObservableInput<T>, T>;\n' +
    'export declare function concatAll<R>(): OperatorFunction<any, R>;\n',
  timestamp: 1669130812958
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/concatMap.d.ts, [object Object]',
  timestamp: 1669130812959
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/concatMap.d.ts: import { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\n" +
    'export declare function concatMap<T, O extends ObservableInput<any>>(project: (value: T, index: number) => O): OperatorFunction<T, ObservedValueOf<O>>;\n' +
    '/** @deprecated resultSelector no longer supported, use inner map instead */\n' +
    'export declare function concatMap<T, O extends ObservableInput<any>>(project: (value: T, index: number) => O, resultSelector: undefined): OperatorFunction<T, ObservedValueOf<O>>;\n' +
    '/** @deprecated resultSelector no longer supported, use inner map instead */\n' +
    'export declare function concatMap<T, R, O extends ObservableInput<any>>(project: (value: T, index: number) => O, resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n',
  timestamp: 1669130812959
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/concatMapTo.d.ts, [object Object]',
  timestamp: 1669130812960
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/concatMapTo.d.ts: import { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\n" +
    'export declare function concatMapTo<T, O extends ObservableInput<any>>(observable: O): OperatorFunction<T, ObservedValueOf<O>>;\n' +
    '/** @deprecated */\n' +
    'export declare function concatMapTo<T, O extends ObservableInput<any>>(observable: O, resultSelector: undefined): OperatorFunction<T, ObservedValueOf<O>>;\n' +
    '/** @deprecated */\n' +
    'export declare function concatMapTo<T, R, O extends ObservableInput<any>>(observable: O, resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n',
  timestamp: 1669130812960
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/count.d.ts, [object Object]',
  timestamp: 1669130812964
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/count.d.ts: import { Observable } from '../Observable';\n" +
    "import { OperatorFunction } from '../types';\n" +
    '/**\n' +
    ' * Counts the number of emissions on the source and emits that number when the\n' +
    ' * source completes.\n' +
    ' *\n' +
    ' * <span class="informal">Tells how many values were emitted, when the source\n' +
    ' * completes.</span>\n' +
    ' *\n' +
    ' * ![](count.png)\n' +
    ' *\n' +
    ' * `count` transforms an Observable that emits values into an Observable that\n' +
    ' * emits a single value that represents the number of values emitted by the\n' +
    ' * source Observable. If the source Observable terminates with an error, `count`\n' +
    ' * will pass this error notification along without emitting a value first. If\n' +
    ' * the source Observable does not terminate at all, `count` will neither emit\n' +
    ' * a value nor terminate. This operator takes an optional `predicate` function\n' +
    ' * as argument, in which case the output emission will represent the number of\n' +
    ' * source values that matched `true` with the `predicate`.\n' +
    ' *\n' +
    ' * ## Examples\n' +
    ' *\n' +
    ' * Counts how many seconds have passed before the first click happened\n' +
    ' * ```ts\n' +
    " * import { fromEvent, interval } from 'rxjs';\n" +
    " * import { count, takeUntil } from 'rxjs/operators';\n" +
    ' *\n' +
    ' * const seconds = interval(1000);\n' +
    " * const clicks = fromEvent(document, 'click');\n" +
    ' * const secondsBeforeClick = seconds.pipe(takeUntil(clicks));\n' +
    ' * const result = secondsBeforeClick.pipe(count());\n' +
    ' * result.subscribe(x => console.log(x));\n' +
    ' * ```\n' +
    ' *\n' +
    ' * Counts how many odd numbers are there between 1 and 7\n' +
    ' * ```ts\n' +
    " * import { range } from 'rxjs';\n" +
    " * import { count } from 'rxjs/operators';\n" +
    ' *\n' +
    ' * const numbers = range(1, 7);\n' +
    ' * const result = numbers.pipe(count(i => i % 2 === 1));\n' +
    ' * result.subscribe(x => console.log(x));\n' +
    ' * // Results in:\n' +
    ' * // 4\n' +
    ' * ```\n' +
    ' *\n' +
    ' * @see {@link max}\n' +
    ' * @see {@link min}\n' +
    ' * @see {@link reduce}\n' +
    ' *\n' +
    ' * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n' +
    ' * boolean function to select what values are to be counted. It is provided with\n' +
    ' * arguments of:\n' +
    ' * - `value`: the value from the source Observable.\n' +
    ' * - `index`: the (zero-based) "index" of the value from the source Observable.\n' +
    ' * - `source`: the source Observable instance itself.\n' +
    ' * @return {Observable} An Observable of one number that represents the count as\n' +
    ' * described above.\n' +
    ' * @method count\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function count<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): OperatorFunction<T, number>;\n',
  timestamp: 1669130812964
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/debounce.d.ts, [object Object]',
  timestamp: 1669130812965
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/debounce.d.ts: import { MonoTypeOperatorFunction, SubscribableOrPromise } from '../types';\n" +
    '/**\n' +
    ' * Emits a value from the source Observable only after a particular time span\n' +
    ' * determined by another Observable has passed without another source emission.\n' +
    ' *\n' +
    ` * <span class="informal">It's like {@link debounceTime}, but the time span of\n` +
    ' * emission silence is determined by a second Observable.</span>\n' +
    ' *\n' +
    ' * ![](debounce.png)\n' +
    ' *\n' +
    ' * `debounce` delays values emitted by the source Observable, but drops previous\n' +
    ' * pending delayed emissions if a new value arrives on the source Observable.\n' +
    ' * This operator keeps track of the most recent value from the source\n' +
    ' * Observable, and spawns a duration Observable by calling the\n' +
    ' * `durationSelector` function. The value is emitted only when the duration\n' +
    ' * Observable emits a value or completes, and if no other value was emitted on\n' +
    ' * the source Observable since the duration Observable was spawned. If a new\n' +
    ' * value appears before the duration Observable emits, the previous value will\n' +
    ' * be dropped and will not be emitted on the output Observable.\n' +
    ' *\n' +
    ' * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n' +
    ' * delay-like operator since output emissions do not necessarily occur at the\n' +
    ' * same time as they did on the source Observable.\n' +
    ' *\n' +
    ' * ## Example\n' +
    ' * Emit the most recent click after a burst of clicks\n' +
    ' * ```ts\n' +
    " * import { fromEvent, interval } from 'rxjs';\n" +
    " * import { debounce } from 'rxjs/operators';\n" +
    ' *\n' +
    " * const clicks = fromEvent(document, 'click');\n" +
    ' * const result = clicks.pipe(debounce(() => interval(1000)));\n' +
    ' * result.subscribe(x => console.log(x));\n' +
    ' * ```\n' +
    ' *\n' +
    ' * @see {@link audit}\n' +
    ' * @see {@link debounceTime}\n' +
    ' * @see {@link delayWhen}\n' +
    ' * @see {@link throttle}\n' +
    ' *\n' +
    ' * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n' +
    ' * that receives a value from the source Observable, for computing the timeout\n' +
    ' * duration for each source value, returned as an Observable or a Promise.\n' +
    ' * @return {Observable} An Observable that delays the emissions of the source\n' +
    ' * Observable by the specified duration Observable returned by\n' +
    ' * `durationSelector`, and may drop some values if they occur too frequently.\n' +
    ' * @method debounce\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function debounce<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): MonoTypeOperatorFunction<T>;\n',
  timestamp: 1669130812965
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/debounceTime.d.ts, [object Object]',
  timestamp: 1669130812967
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/debounceTime.d.ts: import { MonoTypeOperatorFunction, SchedulerLike } from '../types';\n" +
    '/**\n' +
    ' * Emits a value from the source Observable only after a particular time span\n' +
    ' * has passed without another source emission.\n' +
    ' *\n' +
    ` * <span class="informal">It's like {@link delay}, but passes only the most\n` +
    ' * recent value from each burst of emissions.</span>\n' +
    ' *\n' +
    ' * ![](debounceTime.png)\n' +
    ' *\n' +
    ' * `debounceTime` delays values emitted by the source Observable, but drops\n' +
    ' * previous pending delayed emissions if a new value arrives on the source\n' +
    ' * Observable. This operator keeps track of the most recent value from the\n' +
    ' * source Observable, and emits that only when `dueTime` enough time has passed\n' +
    ' * without any other value appearing on the source Observable. If a new value\n' +
    ' * appears before `dueTime` silence occurs, the previous value will be dropped\n' +
    ' * and will not be emitted on the output Observable.\n' +
    ' *\n' +
    ' * This is a rate-limiting operator, because it is impossible for more than one\n' +
    ' * value to be emitted in any time window of duration `dueTime`, but it is also\n' +
    ' * a delay-like operator since output emissions do not occur at the same time as\n' +
    ' * they did on the source Observable. Optionally takes a {@link SchedulerLike} for\n' +
    ' * managing timers.\n' +
    ' *\n' +
    ' * ## Example\n' +
    ' * Emit the most recent click after a burst of clicks\n' +
    ' * ```ts\n' +
    " * import { fromEvent } from 'rxjs';\n" +
    " * import { debounceTime } from 'rxjs/operators';\n" +
    ' *\n' +
    " * const clicks = fromEvent(document, 'click');\n" +
    ' * const result = clicks.pipe(debounceTime(1000));\n' +
    ' * result.subscribe(x => console.log(x));\n' +
    ' * ```\n' +
    ' *\n' +
    ' * @see {@link auditTime}\n' +
    ' * @see {@link debounce}\n' +
    ' * @see {@link delay}\n' +
    ' * @see {@link sampleTime}\n' +
    ' * @see {@link throttleTime}\n' +
    ' *\n' +
    ' * @param {number} dueTime The timeout duration in milliseconds (or the time\n' +
    ' * unit determined internally by the optional `scheduler`) for the window of\n' +
    ' * time required to wait for emission silence before emitting the most recent\n' +
    ' * source value.\n' +
    ' * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\n' +
    ' * managing the timers that handle the timeout for each value.\n' +
    ' * @return {Observable} An Observable that delays the emissions of the source\n' +
    ' * Observable by the specified `dueTime`, and may drop some values if they occur\n' +
    ' * too frequently.\n' +
    ' * @method debounceTime\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function debounceTime<T>(dueTime: number, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n',
  timestamp: 1669130812967
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/defaultIfEmpty.d.ts, [object Object]',
  timestamp: 1669130812972
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/defaultIfEmpty.d.ts: import { OperatorFunction, MonoTypeOperatorFunction } from '../types';\n" +
    'export declare function defaultIfEmpty<T>(defaultValue?: T): MonoTypeOperatorFunction<T>;\n' +
    'export declare function defaultIfEmpty<T, R>(defaultValue?: R): OperatorFunction<T, T | R>;\n',
  timestamp: 1669130812972
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/delay.d.ts, [object Object]',
  timestamp: 1669130812973
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/delay.d.ts: import { MonoTypeOperatorFunction, SchedulerLike } from '../types';\n" +
    '/**\n' +
    ' * Delays the emission of items from the source Observable by a given timeout or\n' +
    ' * until a given Date.\n' +
    ' *\n' +
    ' * <span class="informal">Time shifts each item by some specified amount of\n' +
    ' * milliseconds.</span>\n' +
    ' *\n' +
    ' * ![](delay.png)\n' +
    ' *\n' +
    ' * If the delay argument is a Number, this operator time shifts the source\n' +
    ' * Observable by that amount of time expressed in milliseconds. The relative\n' +
    ' * time intervals between the values are preserved.\n' +
    ' *\n' +
    ' * If the delay argument is a Date, this operator time shifts the start of the\n' +
    ' * Observable execution until the given date occurs.\n' +
    ' *\n' +
    ' * ## Examples\n' +
    ' * Delay each click by one second\n' +
    ' * ```ts\n' +
    " * import { fromEvent } from 'rxjs';\n" +
    " * import { delay } from 'rxjs/operators';\n" +
    ' *\n' +
    " * const clicks = fromEvent(document, 'click');\n" +
    ' * const delayedClicks = clicks.pipe(delay(1000)); // each click emitted after 1 second\n' +
    ' * delayedClicks.subscribe(x => console.log(x));\n' +
    ' * ```\n' +
    ' *\n' +
    ' * Delay all clicks until a future date happens\n' +
    ' * ```ts\n' +
    " * import { fromEvent } from 'rxjs';\n" +
    " * import { delay } from 'rxjs/operators';\n" +
    ' *\n' +
    " * const clicks = fromEvent(document, 'click');\n" +
    " * const date = new Date('March 15, 2050 12:00:00'); // in the future\n" +
    ' * const delayedClicks = clicks.pipe(delay(date)); // click emitted only after that date\n' +
    ' * delayedClicks.subscribe(x => console.log(x));\n' +
    ' * ```\n' +
    ' *\n' +
    ' * @see {@link debounceTime}\n' +
    ' * @see {@link delayWhen}\n' +
    ' *\n' +
    ' * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n' +
    ' * a `Date` until which the emission of the source items is delayed.\n' +
    ' * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\n' +
    ' * managing the timers that handle the time-shift for each item.\n' +
    ' * @return {Observable} An Observable that delays the emissions of the source\n' +
    ' * Observable by the specified timeout or Date.\n' +
    ' * @method delay\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function delay<T>(delay: number | Date, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n',
  timestamp: 1669130812973
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/delayWhen.d.ts, [object Object]',
  timestamp: 1669130812977
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/delayWhen.d.ts: import { Observable } from '../Observable';\n" +
    "import { MonoTypeOperatorFunction } from '../types';\n" +
    '/** @deprecated In future versions, empty notifiers will no longer re-emit the source value on the output observable. */\n' +
    'export declare function delayWhen<T>(delayDurationSelector: (value: T, index: number) => Observable<never>, subscriptionDelay?: Observable<any>): MonoTypeOperatorFunction<T>;\n' +
    'export declare function delayWhen<T>(delayDurationSelector: (value: T, index: number) => Observable<any>, subscriptionDelay?: Observable<any>): MonoTypeOperatorFunction<T>;\n',
  timestamp: 1669130812977
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/dematerialize.d.ts, [object Object]',
  timestamp: 1669130812979
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/dematerialize.d.ts: import { Notification } from '../Notification';\n" +
    "import { OperatorFunction } from '../types';\n" +
    '/**\n' +
    ' * Converts an Observable of {@link Notification} objects into the emissions\n' +
    ' * that they represent.\n' +
    ' *\n' +
    ' * <span class="informal">Unwraps {@link Notification} objects as actual `next`,\n' +
    ' * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n' +
    ' *\n' +
    ' * ![](dematerialize.png)\n' +
    ' *\n' +
    ' * `dematerialize` is assumed to operate an Observable that only emits\n' +
    ' * {@link Notification} objects as `next` emissions, and does not emit any\n' +
    ' * `error`. Such Observable is the output of a `materialize` operation. Those\n' +
    ' * notifications are then unwrapped using the metadata they contain, and emitted\n' +
    ' * as `next`, `error`, and `complete` on the output Observable.\n' +
    ' *\n' +
    ' * Use this operator in conjunction with {@link materialize}.\n' +
    ' *\n' +
    ' * ## Example\n' +
    ' * Convert an Observable of Notifications to an actual Observable\n' +
    ' * ```ts\n' +
    " * import { of, Notification } from 'rxjs';\n" +
    " * import { dematerialize } from 'rxjs/operators';\n" +
    ' *\n' +
    " * const notifA = new Notification('N', 'A');\n" +
    " * const notifB = new Notification('N', 'B');\n" +
    " * const notifE = new Notification('E', undefined,\n" +
    " *   new TypeError('x.toUpperCase is not a function')\n" +
    ' * );\n' +
    ' * const materialized = of(notifA, notifB, notifE);\n' +
    ' * const upperCase = materialized.pipe(dematerialize());\n' +
    ' * upperCase.subscribe(x => console.log(x), e => console.error(e));\n' +
    ' *\n' +
    ' * // Results in:\n' +
    ' * // A\n' +
    ' * // B\n' +
    ' * // TypeError: x.toUpperCase is not a function\n' +
    ' * ```\n' +
    ' *\n' +
    ' * @see {@link Notification}\n' +
    ' * @see {@link materialize}\n' +
    ' *\n' +
    ' * @return {Observable} An Observable that emits items and notifications\n' +
    ' * embedded in Notification objects emitted by the source Observable.\n' +
    ' * @method dematerialize\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function dematerialize<T>(): OperatorFunction<Notification<T>, T>;\n',
  timestamp: 1669130812980
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130812983
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130812983
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Notification.ts:false',
  timestamp: 1669130812983
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Notification.tsx:false',
  timestamp: 1669130812984
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Notification.d.ts:true',
  timestamp: 1669130812984
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/Notification.d.ts, [object Object]',
  timestamp: 1669130812984
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/Notification.d.ts: import { PartialObserver } from './types';\n" +
    "import { Observable } from './Observable';\n" +
    '/**\n' +
    ' * @deprecated NotificationKind is deprecated as const enums are not compatible with isolated modules. Use a string literal instead.\n' +
    ' */\n' +
    'export declare enum NotificationKind {\n' +
    '    NEXT = "N",\n' +
    '    ERROR = "E",\n' +
    '    COMPLETE = "C"\n' +
    '}\n' +
    '/**\n' +
    ' * Represents a push-based event or value that an {@link Observable} can emit.\n' +
    ' * This class is particularly useful for operators that manage notifications,\n' +
    ' * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n' +
    ' * others. Besides wrapping the actual delivered value, it also annotates it\n' +
    ' * with metadata of, for instance, what type of push message it is (`next`,\n' +
    ' * `error`, or `complete`).\n' +
    ' *\n' +
    ' * @see {@link materialize}\n' +
    ' * @see {@link dematerialize}\n' +
    ' * @see {@link observeOn}\n' +
    ' *\n' +
    ' * @class Notification<T>\n' +
    ' */\n' +
    'export declare class Notification<T> {\n' +
    "    kind: 'N' | 'E' | 'C';\n" +
    '    value?: T;\n' +
    '    error?: any;\n' +
    '    hasValue: boolean;\n' +
    "    constructor(kind: 'N' | 'E' | 'C', value?: T, error?: any);\n" +
    '    /**\n' +
    '     * Delivers to the given `observer` the value wrapped by this Notification.\n' +
    '     * @param {Observer} observer\n' +
    '     * @return\n' +
    '     */\n' +
    '    observe(observer: PartialObserver<T>): any;\n' +
    '    /**\n' +
    '     * Given some {@link Observer} callbacks, deliver the value represented by the\n' +
    '     * current Notification to the correctly corresponding callback.\n' +
    '     * @param {function(value: T): void} next An Observer `next` callback.\n' +
    '     * @param {function(err: any): void} [error] An Observer `error` callback.\n' +
    '     * @param {function(): void} [complete] An Observer `complete` callback.\n' +
    '     * @return {any}\n' +
    '     */\n' +
    '    do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any;\n' +
    '    /**\n' +
    '     * Takes an Observer or its individual callback functions, and calls `observe`\n' +
    '     * or `do` methods accordingly.\n' +
    '     * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n' +
    '     * the `next` callback.\n' +
    '     * @param {function(err: any): void} [error] An Observer `error` callback.\n' +
    '     * @param {function(): void} [complete] An Observer `complete` callback.\n' +
    '     * @return {any}\n' +
    '     */\n' +
    '    accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void): any;\n' +
    '    /**\n' +
    '     * Returns a simple Observable that just delivers the notification represented\n' +
    '     * by this Notification instance.\n' +
    '     * @return {any}\n' +
    '     */\n' +
    '    toObservable(): Observable<T>;\n' +
    '    private static completeNotification;\n' +
    '    private static undefinedValueNotification;\n' +
    '    /**\n' +
    '     * A shortcut to create a Notification instance of the type `next` from a\n' +
    '     * given value.\n' +
    '     * @param {T} value The `next` value.\n' +
    '     * @return {Notification<T>} The "next" Notification representing the\n' +
    '     * argument.\n' +
    '     * @nocollapse\n' +
    '     */\n' +
    '    static createNext<T>(value: T): Notification<T>;\n' +
    '    /**\n' +
    '     * A shortcut to create a Notification instance of the type `error` from a\n' +
    '     * given error.\n' +
    '     * @param {any} [err] The `error` error.\n' +
    '     * @return {Notification<T>} The "error" Notification representing the\n' +
    '     * argument.\n' +
    '     * @nocollapse\n' +
    '     */\n' +
    '    static createError<T>(err?: any): Notification<T>;\n' +
    '    /**\n' +
    '     * A shortcut to create a Notification instance of the type `complete`.\n' +
    '     * @return {Notification<any>} The valueless "complete" Notification.\n' +
    '     * @nocollapse\n' +
    '     */\n' +
    '    static createComplete(): Notification<any>;\n' +
    '}\n',
  timestamp: 1669130812984
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/distinct.d.ts, [object Object]',
  timestamp: 1669130812992
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/distinct.d.ts: import { Observable } from '../Observable';\n" +
    "import { Subscriber } from '../Subscriber';\n" +
    "import { MonoTypeOperatorFunction } from '../types';\n" +
    "import { SimpleOuterSubscriber } from '../innerSubscribe';\n" +
    '/**\n' +
    ' * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n' +
    ' *\n' +
    ' * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n' +
    ' * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n' +
    ' * source observable directly with an equality check against previous values.\n' +
    ' *\n' +
    ' * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n' +
    ' *\n' +
    ' * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n' +
    ' * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n' +
    ' * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n' +
    ' * that the internal `Set` can be "flushed", basically clearing it of values.\n' +
    ' *\n' +
    ' * ## Examples\n' +
    ' * A simple example with numbers\n' +
    ' * ```ts\n' +
    " * import { of } from 'rxjs';\n" +
    " * import { distinct } from 'rxjs/operators';\n" +
    ' *\n' +
    ' * of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1).pipe(\n' +
    ' *     distinct(),\n' +
    ' *   )\n' +
    ' *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n' +
    ' * ```\n' +
    ' *\n' +
    ' * An example using a keySelector function\n' +
    ' * ```typescript\n' +
    " * import { of } from 'rxjs';\n" +
    " * import { distinct } from 'rxjs/operators';\n" +
    ' *\n' +
    ' * interface Person {\n' +
    ' *    age: number,\n' +
    ' *    name: string\n' +
    ' * }\n' +
    ' *\n' +
    ' * of<Person>(\n' +
    " *     { age: 4, name: 'Foo'},\n" +
    " *     { age: 7, name: 'Bar'},\n" +
    " *     { age: 5, name: 'Foo'},\n" +
    ' *   ).pipe(\n' +
    ' *     distinct((p: Person) => p.name),\n' +
    ' *   )\n' +
    ' *   .subscribe(x => console.log(x));\n' +
    ' *\n' +
    ' * // displays:\n' +
    " * // { age: 4, name: 'Foo' }\n" +
    " * // { age: 7, name: 'Bar' }\n" +
    ' * ```\n' +
    ' * @see {@link distinctUntilChanged}\n' +
    ' * @see {@link distinctUntilKeyChanged}\n' +
    ' *\n' +
    ' * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n' +
    ' * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n' +
    ' * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n' +
    ' * @method distinct\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function distinct<T, K>(keySelector?: (value: T) => K, flushes?: Observable<any>): MonoTypeOperatorFunction<T>;\n' +
    '/**\n' +
    ' * We need this JSDoc comment for affecting ESDoc.\n' +
    ' * @ignore\n' +
    ' * @extends {Ignored}\n' +
    ' */\n' +
    'export declare class DistinctSubscriber<T, K> extends SimpleOuterSubscriber<T, T> {\n' +
    '    private keySelector?;\n' +
    '    private values;\n' +
    '    constructor(destination: Subscriber<T>, keySelector?: (value: T) => K, flushes?: Observable<any>);\n' +
    '    notifyNext(): void;\n' +
    '    notifyError(error: any): void;\n' +
    '    protected _next(value: T): void;\n' +
    '    private _useKeySelector;\n' +
    '    private _finalizeNext;\n' +
    '}\n',
  timestamp: 1669130812992
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130812996
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130812996
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Subscriber.ts:false',
  timestamp: 1669130812996
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Subscriber.tsx:false',
  timestamp: 1669130812997
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Subscriber.d.ts:true',
  timestamp: 1669130812997
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130812997
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130812997
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/innerSubscribe.ts:false',
  timestamp: 1669130812997
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/innerSubscribe.tsx:false',
  timestamp: 1669130812997
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/innerSubscribe.d.ts:true',
  timestamp: 1669130812997
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/innerSubscribe.d.ts, [object Object]',
  timestamp: 1669130812998
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: readFile /node_modules/rxjs/internal/innerSubscribe.d.ts: /** @prettier */\n' +
    "import { Subscription } from './Subscription';\n" +
    "import { Subscriber } from './Subscriber';\n" +
    'interface SimpleOuterSubscriberLike<T> {\n' +
    '    /**\n' +
    '     * A handler for inner next notifications from the inner subscription\n' +
    '     * @param innerValue the value nexted by the inner producer\n' +
    '     */\n' +
    '    notifyNext(innerValue: T): void;\n' +
    '    /**\n' +
    '     * A handler for inner error notifications from the inner subscription\n' +
    '     * @param err the error from the inner producer\n' +
    '     */\n' +
    '    notifyError(err: any): void;\n' +
    '    /**\n' +
    '     * A handler for inner complete notifications from the inner subscription.\n' +
    '     */\n' +
    '    notifyComplete(): void;\n' +
    '}\n' +
    'export declare class SimpleInnerSubscriber<T> extends Subscriber<T> {\n' +
    '    private parent;\n' +
    '    constructor(parent: SimpleOuterSubscriberLike<any>);\n' +
    '    protected _next(value: T): void;\n' +
    '    protected _error(error: any): void;\n' +
    '    protected _complete(): void;\n' +
    '}\n' +
    'export declare class ComplexInnerSubscriber<T, R> extends Subscriber<R> {\n' +
    '    private parent;\n' +
    '    outerValue: T;\n' +
    '    outerIndex: number;\n' +
    '    constructor(parent: ComplexOuterSubscriber<T, R>, outerValue: T, outerIndex: number);\n' +
    '    protected _next(value: R): void;\n' +
    '    protected _error(error: any): void;\n' +
    '    protected _complete(): void;\n' +
    '}\n' +
    'export declare class SimpleOuterSubscriber<T, R> extends Subscriber<T> implements SimpleOuterSubscriberLike<R> {\n' +
    '    notifyNext(innerValue: R): void;\n' +
    '    notifyError(err: any): void;\n' +
    '    notifyComplete(): void;\n' +
    '}\n' +
    '/**\n' +
    ' * DO NOT USE (formerly "OuterSubscriber")\n' +
    " * TODO: We want to refactor this and remove it. It is retaining values it shouldn't for long\n" +
    ' * periods of time.\n' +
    ' */\n' +
    'export declare class ComplexOuterSubscriber<T, R> extends Subscriber<T> {\n' +
    '    /**\n' +
    '     * @param _outerValue Used by: bufferToggle, delayWhen, windowToggle\n' +
    '     * @param innerValue Used by: subclass default, combineLatest, race, bufferToggle, windowToggle, withLatestFrom\n' +
    '     * @param _outerIndex Used by: combineLatest, race, withLatestFrom\n' +
    '     * @param _innerSub Used by: delayWhen\n' +
    '     */\n' +
    '    notifyNext(_outerValue: T, innerValue: R, _outerIndex: number, _innerSub: ComplexInnerSubscriber<T, R>): void;\n' +
    '    notifyError(error: any): void;\n' +
    '    /**\n' +
    '     * @param _innerSub Used by: race, bufferToggle, delayWhen, windowToggle, windowWhen\n' +
    '     */\n' +
    '    notifyComplete(_innerSub: ComplexInnerSubscriber<T, R>): void;\n' +
    '}\n' +
    'export declare function innerSubscribe(result: any, innerSubscriber: Subscriber<any>): Subscription | undefined;\n' +
    'export {};\n',
  timestamp: 1669130812998
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/distinctUntilChanged.d.ts, [object Object]',
  timestamp: 1669130813002
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/distinctUntilChanged.d.ts: import { MonoTypeOperatorFunction } from '../types';\n" +
    'export declare function distinctUntilChanged<T>(compare?: (x: T, y: T) => boolean): MonoTypeOperatorFunction<T>;\n' +
    'export declare function distinctUntilChanged<T, K>(compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): MonoTypeOperatorFunction<T>;\n',
  timestamp: 1669130813002
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/distinctUntilKeyChanged.d.ts, [object Object]',
  timestamp: 1669130813002
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/distinctUntilKeyChanged.d.ts: import { MonoTypeOperatorFunction } from '../types';\n" +
    'export declare function distinctUntilKeyChanged<T>(key: keyof T): MonoTypeOperatorFunction<T>;\n' +
    'export declare function distinctUntilKeyChanged<T, K extends keyof T>(key: K, compare: (x: T[K], y: T[K]) => boolean): MonoTypeOperatorFunction<T>;\n',
  timestamp: 1669130813003
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/elementAt.d.ts, [object Object]',
  timestamp: 1669130813003
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/elementAt.d.ts: import { MonoTypeOperatorFunction } from '../types';\n" +
    '/**\n' +
    ' * Emits the single value at the specified `index` in a sequence of emissions\n' +
    ' * from the source Observable.\n' +
    ' *\n' +
    ' * <span class="informal">Emits only the i-th value, then completes.</span>\n' +
    ' *\n' +
    ' * ![](elementAt.png)\n' +
    ' *\n' +
    ' * `elementAt` returns an Observable that emits the item at the specified\n' +
    ' * `index` in the source Observable, or a default value if that `index` is out\n' +
    ' * of range and the `default` argument is provided. If the `default` argument is\n' +
    ' * not given and the `index` is out of range, the output Observable will emit an\n' +
    ' * `ArgumentOutOfRangeError` error.\n' +
    ' *\n' +
    ' * ## Example\n' +
    ' * Emit only the third click event\n' +
    ' * ```ts\n' +
    " * import { fromEvent } from 'rxjs';\n" +
    " * import { elementAt } from 'rxjs/operators';\n" +
    ' *\n' +
    " * const clicks = fromEvent(document, 'click');\n" +
    ' * const result = clicks.pipe(elementAt(2));\n' +
    ' * result.subscribe(x => console.log(x));\n' +
    ' *\n' +
    ' * // Results in:\n' +
    ' * // click 1 = nothing\n' +
    ' * // click 2 = nothing\n' +
    ' * // click 3 = MouseEvent object logged to console\n' +
    ' * ```\n' +
    ' *\n' +
    ' * @see {@link first}\n' +
    ' * @see {@link last}\n' +
    ' * @see {@link skip}\n' +
    ' * @see {@link single}\n' +
    ' * @see {@link take}\n' +
    ' *\n' +
    ' * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n' +
    " * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n" +
    ' * Observable has completed before emitting the i-th `next` notification.\n' +
    ' *\n' +
    ' * @param {number} index Is the number `i` for the i-th source emission that has\n' +
    ' * happened since the subscription, starting from the number `0`.\n' +
    ' * @param {T} [defaultValue] The default value returned for missing indices.\n' +
    ' * @return {Observable} An Observable that emits a single item, if it is found.\n' +
    ' * Otherwise, will emit the default value if given. If not, then emits an error.\n' +
    ' * @method elementAt\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function elementAt<T>(index: number, defaultValue?: T): MonoTypeOperatorFunction<T>;\n',
  timestamp: 1669130813004
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/endWith.d.ts, [object Object]',
  timestamp: 1669130813005
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/endWith.d.ts: import { MonoTypeOperatorFunction, SchedulerLike, OperatorFunction } from '../types';\n" +
    '/** @deprecated use {@link scheduled} and {@link concatAll} (e.g. `scheduled([source, [a, b, c]], scheduler).pipe(concatAll())`) */\n' +
    'export declare function endWith<T>(scheduler: SchedulerLike): MonoTypeOperatorFunction<T>;\n' +
    '/** @deprecated use {@link scheduled} and {@link concatAll} (e.g. `scheduled([source, [a, b, c]], scheduler).pipe(concatAll())`) */\n' +
    'export declare function endWith<T, A>(v1: A, scheduler: SchedulerLike): OperatorFunction<T, T | A>;\n' +
    '/** @deprecated use {@link scheduled} and {@link concatAll} (e.g. `scheduled([source, [a, b, c]], scheduler).pipe(concatAll())`) */\n' +
    'export declare function endWith<T, A, B>(v1: A, v2: B, scheduler: SchedulerLike): OperatorFunction<T, T | A | B>;\n' +
    '/** @deprecated use {@link scheduled} and {@link concatAll} (e.g. `scheduled([source, [a, b, c]], scheduler).pipe(concatAll())`) */\n' +
    'export declare function endWith<T, A, B, C>(v1: A, v2: B, v3: C, scheduler: SchedulerLike): OperatorFunction<T, T | A | B | C>;\n' +
    '/** @deprecated use {@link scheduled} and {@link concatAll} (e.g. `scheduled([source, [a, b, c]], scheduler).pipe(concatAll())`) */\n' +
    'export declare function endWith<T, A, B, C, D>(v1: A, v2: B, v3: C, v4: D, scheduler: SchedulerLike): OperatorFunction<T, T | A | B | C | D>;\n' +
    '/** @deprecated use {@link scheduled} and {@link concatAll} (e.g. `scheduled([source, [a, b, c]], scheduler).pipe(concatAll())`) */\n' +
    'export declare function endWith<T, A, B, C, D, E>(v1: A, v2: B, v3: C, v4: D, v5: E, scheduler: SchedulerLike): OperatorFunction<T, T | A | B | C | D | E>;\n' +
    '/** @deprecated use {@link scheduled} and {@link concatAll} (e.g. `scheduled([source, [a, b, c]], scheduler).pipe(concatAll())`) */\n' +
    'export declare function endWith<T, A, B, C, D, E, F>(v1: A, v2: B, v3: C, v4: D, v5: E, v6: F, scheduler: SchedulerLike): OperatorFunction<T, T | A | B | C | D | E | F>;\n' +
    'export declare function endWith<T, A>(v1: A): OperatorFunction<T, T | A>;\n' +
    'export declare function endWith<T, A, B>(v1: A, v2: B): OperatorFunction<T, T | A | B>;\n' +
    'export declare function endWith<T, A, B, C>(v1: A, v2: B, v3: C): OperatorFunction<T, T | A | B | C>;\n' +
    'export declare function endWith<T, A, B, C, D>(v1: A, v2: B, v3: C, v4: D): OperatorFunction<T, T | A | B | C | D>;\n' +
    'export declare function endWith<T, A, B, C, D, E>(v1: A, v2: B, v3: C, v4: D, v5: E): OperatorFunction<T, T | A | B | C | D | E>;\n' +
    'export declare function endWith<T, A, B, C, D, E, F>(v1: A, v2: B, v3: C, v4: D, v5: E, v6: F): OperatorFunction<T, T | A | B | C | D | E | F>;\n' +
    'export declare function endWith<T, Z = T>(...array: Z[]): OperatorFunction<T, T | Z>;\n' +
    '/** @deprecated use {@link scheduled} and {@link concatAll} (e.g. `scheduled([source, [a, b, c]], scheduler).pipe(concatAll())`) */\n' +
    'export declare function endWith<T, Z = T>(...array: Array<Z | SchedulerLike>): OperatorFunction<T, T | Z>;\n',
  timestamp: 1669130813005
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/every.d.ts, [object Object]',
  timestamp: 1669130813009
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/every.d.ts: import { Observable } from '../Observable';\n" +
    "import { OperatorFunction } from '../types';\n" +
    '/**\n' +
    ' * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n' +
    ' *\n' +
    ' * ## Example\n' +
    ' * A simple example emitting true if all elements are less than 5, false otherwise\n' +
    ' * ```ts\n' +
    " * import { of } from 'rxjs';\n" +
    " * import { every } from 'rxjs/operators';\n" +
    ' *\n' +
    ' *  of(1, 2, 3, 4, 5, 6).pipe(\n' +
    ' *     every(x => x < 5),\n' +
    ' * )\n' +
    ' * .subscribe(x => console.log(x)); // -> false\n' +
    ' * ```\n' +
    ' *\n' +
    ' * @param {function} predicate A function for determining if an item meets a specified condition.\n' +
    ' * @param {any} [thisArg] Optional object to use for `this` in the callback.\n' +
    ' * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n' +
    ' * @method every\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function every<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean, thisArg?: any): OperatorFunction<T, boolean>;\n',
  timestamp: 1669130813009
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/exhaust.d.ts, [object Object]',
  timestamp: 1669130813012
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/exhaust.d.ts: import { ObservableInput, OperatorFunction } from '../types';\n" +
    'export declare function exhaust<T>(): OperatorFunction<ObservableInput<T>, T>;\n' +
    'export declare function exhaust<R>(): OperatorFunction<any, R>;\n',
  timestamp: 1669130813013
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/exhaustMap.d.ts, [object Object]',
  timestamp: 1669130813013
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/exhaustMap.d.ts: import { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\n" +
    'export declare function exhaustMap<T, O extends ObservableInput<any>>(project: (value: T, index: number) => O): OperatorFunction<T, ObservedValueOf<O>>;\n' +
    '/** @deprecated resultSelector is no longer supported. Use inner map instead. */\n' +
    'export declare function exhaustMap<T, O extends ObservableInput<any>>(project: (value: T, index: number) => O, resultSelector: undefined): OperatorFunction<T, ObservedValueOf<O>>;\n' +
    '/** @deprecated resultSelector is no longer supported. Use inner map instead. */\n' +
    'export declare function exhaustMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n',
  timestamp: 1669130813013
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/expand.d.ts, [object Object]',
  timestamp: 1669130813016
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/expand.d.ts: import { Operator } from '../Operator';\n" +
    "import { Subscriber } from '../Subscriber';\n" +
    "import { MonoTypeOperatorFunction, OperatorFunction, ObservableInput, SchedulerLike } from '../types';\n" +
    "import { SimpleOuterSubscriber } from '../innerSubscribe';\n" +
    'export declare function expand<T, R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number, scheduler?: SchedulerLike): OperatorFunction<T, R>;\n' +
    'export declare function expand<T>(project: (value: T, index: number) => ObservableInput<T>, concurrent?: number, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n' +
    'export declare class ExpandOperator<T, R> implements Operator<T, R> {\n' +
    '    private project;\n' +
    '    private concurrent;\n' +
    '    private scheduler?;\n' +
    '    constructor(project: (value: T, index: number) => ObservableInput<R>, concurrent: number, scheduler?: SchedulerLike);\n' +
    '    call(subscriber: Subscriber<R>, source: any): any;\n' +
    '}\n' +
    '/**\n' +
    ' * We need this JSDoc comment for affecting ESDoc.\n' +
    ' * @ignore\n' +
    ' * @extends {Ignored}\n' +
    ' */\n' +
    'export declare class ExpandSubscriber<T, R> extends SimpleOuterSubscriber<T, R> {\n' +
    '    private project;\n' +
    '    private concurrent;\n' +
    '    private scheduler?;\n' +
    '    private index;\n' +
    '    private active;\n' +
    '    private hasCompleted;\n' +
    '    private buffer?;\n' +
    '    constructor(destination: Subscriber<R>, project: (value: T, index: number) => ObservableInput<R>, concurrent: number, scheduler?: SchedulerLike);\n' +
    '    private static dispatch;\n' +
    '    protected _next(value: any): void;\n' +
    '    private subscribeToProjection;\n' +
    '    protected _complete(): void;\n' +
    '    notifyNext(innerValue: R): void;\n' +
    '    notifyComplete(): void;\n' +
    '}\n',
  timestamp: 1669130813016
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813020
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813020
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Operator.ts:false',
  timestamp: 1669130813020
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Operator.tsx:false',
  timestamp: 1669130813021
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Operator.d.ts:true',
  timestamp: 1669130813021
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/filter.d.ts, [object Object]',
  timestamp: 1669130813021
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/filter.d.ts: import { OperatorFunction, MonoTypeOperatorFunction } from '../types';\n" +
    'export declare function filter<T, S extends T>(predicate: (value: T, index: number) => value is S, thisArg?: any): OperatorFunction<T, S>;\n' +
    'export declare function filter<T>(predicate: (value: T, index: number) => boolean, thisArg?: any): MonoTypeOperatorFunction<T>;\n',
  timestamp: 1669130813021
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/finalize.d.ts, [object Object]',
  timestamp: 1669130813022
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/finalize.d.ts: import { MonoTypeOperatorFunction } from '../types';\n" +
    '/**\n' +
    ' * Returns an Observable that mirrors the source Observable, but will call a specified function when\n' +
    ' * the source terminates on complete or error.\n' +
    ' * @param {function} callback Function to be called when source terminates.\n' +
    ' * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n' +
    ' * @method finally\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function finalize<T>(callback: () => void): MonoTypeOperatorFunction<T>;\n',
  timestamp: 1669130813023
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/find.d.ts, [object Object]',
  timestamp: 1669130813023
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/find.d.ts: import { Observable } from '../Observable';\n" +
    "import { Operator } from '../Operator';\n" +
    "import { Subscriber } from '../Subscriber';\n" +
    "import { OperatorFunction } from '../types';\n" +
    'export declare function find<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S, thisArg?: any): OperatorFunction<T, S | undefined>;\n' +
    'export declare function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean, thisArg?: any): OperatorFunction<T, T | undefined>;\n' +
    'export declare class FindValueOperator<T> implements Operator<T, T | number | undefined> {\n' +
    '    private predicate;\n' +
    '    private source;\n' +
    '    private yieldIndex;\n' +
    '    private thisArg?;\n' +
    '    constructor(predicate: (value: T, index: number, source: Observable<T>) => boolean, source: Observable<T>, yieldIndex: boolean, thisArg?: any);\n' +
    '    call(observer: Subscriber<T>, source: any): any;\n' +
    '}\n' +
    '/**\n' +
    ' * We need this JSDoc comment for affecting ESDoc.\n' +
    ' * @ignore\n' +
    ' * @extends {Ignored}\n' +
    ' */\n' +
    'export declare class FindValueSubscriber<T> extends Subscriber<T> {\n' +
    '    private predicate;\n' +
    '    private source;\n' +
    '    private yieldIndex;\n' +
    '    private thisArg?;\n' +
    '    private index;\n' +
    '    constructor(destination: Subscriber<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean, source: Observable<T>, yieldIndex: boolean, thisArg?: any);\n' +
    '    private notifyComplete;\n' +
    '    protected _next(value: T): void;\n' +
    '    protected _complete(): void;\n' +
    '}\n',
  timestamp: 1669130813023
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/findIndex.d.ts, [object Object]',
  timestamp: 1669130813025
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/findIndex.d.ts: import { Observable } from '../Observable';\n" +
    "import { OperatorFunction } from '../types';\n" +
    '/**\n' +
    ' * Emits only the index of the first value emitted by the source Observable that\n' +
    ' * meets some condition.\n' +
    ' *\n' +
    ` * <span class="informal">It's like {@link find}, but emits the index of the\n` +
    ' * found value, not the value itself.</span>\n' +
    ' *\n' +
    ' * ![](findIndex.png)\n' +
    ' *\n' +
    ' * `findIndex` searches for the first item in the source Observable that matches\n' +
    ' * the specified condition embodied by the `predicate`, and returns the\n' +
    ' * (zero-based) index of the first occurrence in the source. Unlike\n' +
    ' * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n' +
    ' * an error if a valid value is not found.\n' +
    ' *\n' +
    ' * ## Example\n' +
    ' * Emit the index of first click that happens on a DIV element\n' +
    ' * ```ts\n' +
    " * import { fromEvent } from 'rxjs';\n" +
    " * import { findIndex } from 'rxjs/operators';\n" +
    ' *\n' +
    " * const clicks = fromEvent(document, 'click');\n" +
    " * const result = clicks.pipe(findIndex(ev => ev.target.tagName === 'DIV'));\n" +
    ' * result.subscribe(x => console.log(x));\n' +
    ' * ```\n' +
    ' *\n' +
    ' * @see {@link filter}\n' +
    ' * @see {@link find}\n' +
    ' * @see {@link first}\n' +
    ' * @see {@link take}\n' +
    ' *\n' +
    ' * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n' +
    ' * A function called with each item to test for condition matching.\n' +
    ' * @param {any} [thisArg] An optional argument to determine the value of `this`\n' +
    ' * in the `predicate` function.\n' +
    ' * @return {Observable} An Observable of the index of the first item that\n' +
    ' * matches the condition.\n' +
    ' * @method find\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function findIndex<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean, thisArg?: any): OperatorFunction<T, number>;\n',
  timestamp: 1669130813025
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/first.d.ts, [object Object]',
  timestamp: 1669130813027
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/first.d.ts: import { Observable } from '../Observable';\n" +
    "import { OperatorFunction } from '../../internal/types';\n" +
    'export declare function first<T, D = T>(predicate?: null, defaultValue?: D): OperatorFunction<T, T | D>;\n' +
    'export declare function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S, defaultValue?: S): OperatorFunction<T, S>;\n' +
    'export declare function first<T, D = T>(predicate: (value: T, index: number, source: Observable<T>) => boolean, defaultValue?: D): OperatorFunction<T, T | D>;\n',
  timestamp: 1669130813027
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813028
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813028
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/types.ts:false',
  timestamp: 1669130813028
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/types.tsx:false',
  timestamp: 1669130813028
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/types.d.ts:true',
  timestamp: 1669130813028
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/groupBy.d.ts, [object Object]',
  timestamp: 1669130813028
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/groupBy.d.ts: import { Subscriber } from '../Subscriber';\n" +
    "import { Subscription } from '../Subscription';\n" +
    "import { Observable } from '../Observable';\n" +
    "import { Subject } from '../Subject';\n" +
    "import { OperatorFunction } from '../types';\n" +
    'export declare function groupBy<T, K>(keySelector: (value: T) => K): OperatorFunction<T, GroupedObservable<K, T>>;\n' +
    'export declare function groupBy<T, K>(keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, T>>;\n' +
    'export declare function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, R>>;\n' +
    'export declare function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>>;\n' +
    'export interface RefCountSubscription {\n' +
    '    count: number;\n' +
    '    unsubscribe: () => void;\n' +
    '    closed: boolean;\n' +
    '    attemptedToUnsubscribe: boolean;\n' +
    '}\n' +
    '/**\n' +
    ' * An Observable representing values belonging to the same group represented by\n' +
    ' * a common key. The values emitted by a GroupedObservable come from the source\n' +
    ' * Observable. The common key is available as the field `key` on a\n' +
    ' * GroupedObservable instance.\n' +
    ' *\n' +
    ' * @class GroupedObservable<K, T>\n' +
    ' */\n' +
    'export declare class GroupedObservable<K, T> extends Observable<T> {\n' +
    '    key: K;\n' +
    '    private groupSubject;\n' +
    '    private refCountSubscription?;\n' +
    '    /** @deprecated Do not construct this type. Internal use only */\n' +
    '    constructor(key: K, groupSubject: Subject<T>, refCountSubscription?: RefCountSubscription);\n' +
    '    /** @deprecated This is an internal implementation detail, do not use. */\n' +
    '    _subscribe(subscriber: Subscriber<T>): Subscription;\n' +
    '}\n',
  timestamp: 1669130813028
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813030
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813031
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Subscription.ts:false',
  timestamp: 1669130813031
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Subscription.tsx:false',
  timestamp: 1669130813031
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Subscription.d.ts:true',
  timestamp: 1669130813031
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813031
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813031
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Subject.ts:false',
  timestamp: 1669130813031
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Subject.tsx:false',
  timestamp: 1669130813031
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Subject.d.ts:true',
  timestamp: 1669130813031
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/Subject.d.ts, [object Object]',
  timestamp: 1669130813031
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/Subject.d.ts: import { Operator } from './Operator';\n" +
    "import { Observable } from './Observable';\n" +
    "import { Subscriber } from './Subscriber';\n" +
    "import { Subscription } from './Subscription';\n" +
    "import { Observer, SubscriptionLike, TeardownLogic } from './types';\n" +
    '/**\n' +
    ' * @class SubjectSubscriber<T>\n' +
    ' */\n' +
    'export declare class SubjectSubscriber<T> extends Subscriber<T> {\n' +
    '    protected destination: Subject<T>;\n' +
    '    constructor(destination: Subject<T>);\n' +
    '}\n' +
    '/**\n' +
    ' * A Subject is a special type of Observable that allows values to be\n' +
    ' * multicasted to many Observers. Subjects are like EventEmitters.\n' +
    ' *\n' +
    ' * Every Subject is an Observable and an Observer. You can subscribe to a\n' +
    ' * Subject, and you can call next to feed values as well as error and complete.\n' +
    ' *\n' +
    ' * @class Subject<T>\n' +
    ' */\n' +
    'export declare class Subject<T> extends Observable<T> implements SubscriptionLike {\n' +
    '    observers: Observer<T>[];\n' +
    '    closed: boolean;\n' +
    '    isStopped: boolean;\n' +
    '    hasError: boolean;\n' +
    '    thrownError: any;\n' +
    '    constructor();\n' +
    '    /**@nocollapse\n' +
    '     * @deprecated use new Subject() instead\n' +
    '    */\n' +
    '    static create: Function;\n' +
    '    lift<R>(operator: Operator<T, R>): Observable<R>;\n' +
    '    next(value?: T): void;\n' +
    '    error(err: any): void;\n' +
    '    complete(): void;\n' +
    '    unsubscribe(): void;\n' +
    '    /** @deprecated This is an internal implementation detail, do not use. */\n' +
    '    _trySubscribe(subscriber: Subscriber<T>): TeardownLogic;\n' +
    '    /** @deprecated This is an internal implementation detail, do not use. */\n' +
    '    _subscribe(subscriber: Subscriber<T>): Subscription;\n' +
    '    /**\n' +
    '     * Creates a new Observable with this Subject as the source. You can do this\n' +
    '     * to create customize Observer-side logic of the Subject and conceal it from\n' +
    '     * code that uses the Observable.\n' +
    '     * @return {Observable} Observable that the Subject casts to\n' +
    '     */\n' +
    '    asObservable(): Observable<T>;\n' +
    '}\n' +
    '/**\n' +
    ' * @class AnonymousSubject<T>\n' +
    ' */\n' +
    'export declare class AnonymousSubject<T> extends Subject<T> {\n' +
    '    protected destination?: Observer<T>;\n' +
    '    constructor(destination?: Observer<T>, source?: Observable<T>);\n' +
    '    next(value: T): void;\n' +
    '    error(err: any): void;\n' +
    '    complete(): void;\n' +
    '    /** @deprecated This is an internal implementation detail, do not use. */\n' +
    '    _subscribe(subscriber: Subscriber<T>): Subscription;\n' +
    '}\n',
  timestamp: 1669130813031
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/ignoreElements.d.ts, [object Object]',
  timestamp: 1669130813036
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/ignoreElements.d.ts: import { OperatorFunction } from '../types';\n" +
    '/**\n' +
    ' * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n' +
    ' *\n' +
    ' * ![](ignoreElements.png)\n' +
    ' *\n' +
    ' * ## Examples\n' +
    " * ### Ignores emitted values, reacts to observable's completion.\n" +
    ' * ```ts\n' +
    " * import { of } from 'rxjs';\n" +
    " * import { ignoreElements } from 'rxjs/operators';\n" +
    ' *\n' +
    " * of('you', 'talking', 'to', 'me').pipe(\n" +
    ' *   ignoreElements(),\n' +
    ' * )\n' +
    ' * .subscribe(\n' +
    ' *   word => console.log(word),\n' +
    " *   err => console.log('error:', err),\n" +
    " *   () => console.log('the end'),\n" +
    ' * );\n' +
    ' * // result:\n' +
    " * // 'the end'\n" +
    ' * ```\n' +
    ' * @return {Observable} An empty Observable that only calls `complete`\n' +
    ' * or `error`, based on which one is called by the source Observable.\n' +
    ' * @method ignoreElements\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function ignoreElements(): OperatorFunction<any, never>;\n',
  timestamp: 1669130813036
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/isEmpty.d.ts, [object Object]',
  timestamp: 1669130813036
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/isEmpty.d.ts: import { OperatorFunction } from '../types';\n" +
    '/**\n' +
    ' * Emits false if the input observable emits any values, or emits true if the\n' +
    ' * input observable completes without emitting any values.\n' +
    ' *\n' +
    ' * <span class="informal">Tells whether any values are emitted by an observable</span>\n' +
    ' *\n' +
    ' * ![](isEmpty.png)\n' +
    ' *\n' +
    ' * `isEmpty` transforms an Observable that emits values into an Observable that\n' +
    ' * emits a single boolean value representing whether or not any values were\n' +
    ' * emitted by the source Observable. As soon as the source Observable emits a\n' +
    ' * value, `isEmpty` will emit a `false` and complete.  If the source Observable\n' +
    ' * completes having not emitted anything, `isEmpty` will emit a `true` and\n' +
    ' * complete.\n' +
    ' *\n' +
    ' * A similar effect could be achieved with {@link count}, but `isEmpty` can emit\n' +
    ' * a `false` value sooner.\n' +
    ' *\n' +
    ' * ## Examples\n' +
    ' *\n' +
    ' * Emit `false` for a non-empty Observable\n' +
    ' * ```javascript\n' +
    " * import { Subject } from 'rxjs';\n" +
    " * import { isEmpty } from 'rxjs/operators';\n" +
    ' *\n' +
    ' * const source = new Subject<string>();\n' +
    ' * const result = source.pipe(isEmpty());\n' +
    ' * source.subscribe(x => console.log(x));\n' +
    ' * result.subscribe(x => console.log(x));\n' +
    " * source.next('a');\n" +
    " * source.next('b');\n" +
    " * source.next('c');\n" +
    ' * source.complete();\n' +
    ' *\n' +
    ' * // Results in:\n' +
    ' * // a\n' +
    ' * // false\n' +
    ' * // b\n' +
    ' * // c\n' +
    ' * ```\n' +
    ' *\n' +
    ' * Emit `true` for an empty Observable\n' +
    ' * ```javascript\n' +
    " * import { EMPTY } from 'rxjs';\n" +
    " * import { isEmpty } from 'rxjs/operators';\n" +
    ' *\n' +
    ' * const result = EMPTY.pipe(isEmpty());\n' +
    ' * result.subscribe(x => console.log(x));\n' +
    ' * // Results in:\n' +
    ' * // true\n' +
    ' * ```\n' +
    ' *\n' +
    ' * @see {@link count}\n' +
    ' * @see {@link EMPTY}\n' +
    ' *\n' +
    ' * @return {OperatorFunction<T, boolean>} An Observable of a boolean value indicating whether observable was empty or not\n' +
    ' * @method isEmpty\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function isEmpty<T>(): OperatorFunction<T, boolean>;\n',
  timestamp: 1669130813037
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/last.d.ts, [object Object]',
  timestamp: 1669130813037
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/last.d.ts: import { Observable } from '../Observable';\n" +
    "import { OperatorFunction } from '../../internal/types';\n" +
    'export declare function last<T, D = T>(predicate?: null, defaultValue?: D): OperatorFunction<T, T | D>;\n' +
    'export declare function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S, defaultValue?: S): OperatorFunction<T, S>;\n' +
    'export declare function last<T, D = T>(predicate: (value: T, index: number, source: Observable<T>) => boolean, defaultValue?: D): OperatorFunction<T, T | D>;\n',
  timestamp: 1669130813037
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/map.d.ts, [object Object]',
  timestamp: 1669130813038
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/map.d.ts: import { Operator } from '../Operator';\n" +
    "import { Subscriber } from '../Subscriber';\n" +
    "import { OperatorFunction } from '../types';\n" +
    '/**\n' +
    ' * Applies a given `project` function to each value emitted by the source\n' +
    ' * Observable, and emits the resulting values as an Observable.\n' +
    ' *\n' +
    ' * <span class="informal">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n' +
    ' * it passes each source value through a transformation function to get\n' +
    ' * corresponding output values.</span>\n' +
    ' *\n' +
    ' * ![](map.png)\n' +
    ' *\n' +
    ' * Similar to the well known `Array.prototype.map` function, this operator\n' +
    ' * applies a projection to each value and emits that projection in the output\n' +
    ' * Observable.\n' +
    ' *\n' +
    ' * ## Example\n' +
    ' * Map every click to the clientX position of that click\n' +
    ' * ```ts\n' +
    " * import { fromEvent } from 'rxjs';\n" +
    " * import { map } from 'rxjs/operators';\n" +
    ' *\n' +
    " * const clicks = fromEvent(document, 'click');\n" +
    ' * const positions = clicks.pipe(map(ev => ev.clientX));\n' +
    ' * positions.subscribe(x => console.log(x));\n' +
    ' * ```\n' +
    ' *\n' +
    ' * @see {@link mapTo}\n' +
    ' * @see {@link pluck}\n' +
    ' *\n' +
    ' * @param {function(value: T, index: number): R} project The function to apply\n' +
    ' * to each `value` emitted by the source Observable. The `index` parameter is\n' +
    ' * the number `i` for the i-th emission that has happened since the\n' +
    ' * subscription, starting from the number `0`.\n' +
    ' * @param {any} [thisArg] An optional argument to define what `this` is in the\n' +
    ' * `project` function.\n' +
    ' * @return {Observable<R>} An Observable that emits the values from the source\n' +
    ' * Observable transformed by the given `project` function.\n' +
    ' * @method map\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R>;\n' +
    'export declare class MapOperator<T, R> implements Operator<T, R> {\n' +
    '    private project;\n' +
    '    private thisArg;\n' +
    '    constructor(project: (value: T, index: number) => R, thisArg: any);\n' +
    '    call(subscriber: Subscriber<R>, source: any): any;\n' +
    '}\n',
  timestamp: 1669130813038
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/mapTo.d.ts, [object Object]',
  timestamp: 1669130813040
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/mapTo.d.ts: import { OperatorFunction } from '../types';\n" +
    '/**\n' +
    ' * Emits the given constant value on the output Observable every time the source\n' +
    ' * Observable emits a value.\n' +
    ' *\n' +
    ' * <span class="informal">Like {@link map}, but it maps every source value to\n' +
    ' * the same output value every time.</span>\n' +
    ' *\n' +
    ' * ![](mapTo.png)\n' +
    ' *\n' +
    ' * Takes a constant `value` as argument, and emits that whenever the source\n' +
    ' * Observable emits a value. In other words, ignores the actual source value,\n' +
    ' * and simply uses the emission moment to know when to emit the given `value`.\n' +
    ' *\n' +
    ' * ## Example\n' +
    " * Map every click to the string 'Hi'\n" +
    ' * ```ts\n' +
    " * import { fromEvent } from 'rxjs';\n" +
    " * import { mapTo } from 'rxjs/operators';\n" +
    ' *\n' +
    " * const clicks = fromEvent(document, 'click');\n" +
    " * const greetings = clicks.pipe(mapTo('Hi'));\n" +
    ' * greetings.subscribe(x => console.log(x));\n' +
    ' * ```\n' +
    ' *\n' +
    ' * @see {@link map}\n' +
    ' *\n' +
    ' * @param {any} value The value to map each source value to.\n' +
    ' * @return {Observable} An Observable that emits the given `value` every time\n' +
    ' * the source Observable emits something.\n' +
    ' * @method mapTo\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function mapTo<T, R>(value: R): OperatorFunction<T, R>;\n',
  timestamp: 1669130813040
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/materialize.d.ts, [object Object]',
  timestamp: 1669130813041
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/materialize.d.ts: import { Notification } from '../Notification';\n" +
    "import { OperatorFunction } from '../types';\n" +
    '/**\n' +
    ' * Represents all of the notifications from the source Observable as `next`\n' +
    ' * emissions marked with their original types within {@link Notification}\n' +
    ' * objects.\n' +
    ' *\n' +
    ' * <span class="informal">Wraps `next`, `error` and `complete` emissions in\n' +
    ' * {@link Notification} objects, emitted as `next` on the output Observable.\n' +
    ' * </span>\n' +
    ' *\n' +
    ' * ![](materialize.png)\n' +
    ' *\n' +
    ' * `materialize` returns an Observable that emits a `next` notification for each\n' +
    ' * `next`, `error`, or `complete` emission of the source Observable. When the\n' +
    ' * source Observable emits `complete`, the output Observable will emit `next` as\n' +
    ' * a Notification of type "complete", and then it will emit `complete` as well.\n' +
    ' * When the source Observable emits `error`, the output will emit `next` as a\n' +
    ' * Notification of type "error", and then `complete`.\n' +
    ' *\n' +
    ' * This operator is useful for producing metadata of the source Observable, to\n' +
    ' * be consumed as `next` emissions. Use it in conjunction with\n' +
    ' * {@link dematerialize}.\n' +
    ' *\n' +
    ' * ## Example\n' +
    ' * Convert a faulty Observable to an Observable of Notifications\n' +
    ' * ```ts\n' +
    " * import { of } from 'rxjs';\n" +
    " * import { materialize, map } from 'rxjs/operators';\n" +
    ' *\n' +
    " * const letters = of('a', 'b', 13, 'd');\n" +
    ' * const upperCase = letters.pipe(map(x => x.toUpperCase()));\n' +
    ' * const materialized = upperCase.pipe(materialize());\n' +
    ' * materialized.subscribe(x => console.log(x));\n' +
    ' *\n' +
    ' * // Results in the following:\n' +
    ' * // - Notification {kind: "N", value: "A", error: undefined, hasValue: true}\n' +
    ' * // - Notification {kind: "N", value: "B", error: undefined, hasValue: true}\n' +
    ' * // - Notification {kind: "E", value: undefined, error: TypeError:\n' +
    ' * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n' +
    ' * //   [as project] (http://1…, hasValue: false}\n' +
    ' * ```\n' +
    ' *\n' +
    ' * @see {@link Notification}\n' +
    ' * @see {@link dematerialize}\n' +
    ' *\n' +
    ' * @return {Observable<Notification<T>>} An Observable that emits\n' +
    ' * {@link Notification} objects that wrap the original emissions from the source\n' +
    ' * Observable with metadata.\n' +
    ' * @method materialize\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function materialize<T>(): OperatorFunction<T, Notification<T>>;\n',
  timestamp: 1669130813041
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/max.d.ts, [object Object]',
  timestamp: 1669130813043
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/max.d.ts: import { MonoTypeOperatorFunction } from '../types';\n" +
    '/**\n' +
    ' * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n' +
    ' * and when source Observable completes it emits a single item: the item with the largest value.\n' +
    ' *\n' +
    ' * ![](max.png)\n' +
    ' *\n' +
    ' * ## Examples\n' +
    ' * Get the maximal value of a series of numbers\n' +
    ' * ```ts\n' +
    " * import { of } from 'rxjs';\n" +
    " * import { max } from 'rxjs/operators';\n" +
    ' *\n' +
    ' * of(5, 4, 7, 2, 8).pipe(\n' +
    ' *   max(),\n' +
    ' * )\n' +
    ' * .subscribe(x => console.log(x)); // -> 8\n' +
    ' * ```\n' +
    ' *\n' +
    ' * Use a comparer function to get the maximal item\n' +
    ' * ```typescript\n' +
    " * import { of } from 'rxjs';\n" +
    " * import { max } from 'rxjs/operators';\n" +
    ' *\n' +
    ' * interface Person {\n' +
    ' *   age: number,\n' +
    ' *   name: string\n' +
    ' * }\n' +
    ' * of<Person>(\n' +
    " *   {age: 7, name: 'Foo'},\n" +
    " *   {age: 5, name: 'Bar'},\n" +
    " *   {age: 9, name: 'Beer'},\n" +
    ' * ).pipe(\n' +
    ' *   max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1),\n' +
    ' * )\n' +
    " * .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n" +
    ' * ```\n' +
    ' *\n' +
    ' * @see {@link min}\n' +
    ' *\n' +
    ' * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n' +
    ' * value of two items.\n' +
    ' * @return {Observable} An Observable that emits item with the largest value.\n' +
    ' * @method max\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function max<T>(comparer?: (x: T, y: T) => number): MonoTypeOperatorFunction<T>;\n',
  timestamp: 1669130813043
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/merge.d.ts, [object Object]',
  timestamp: 1669130813045
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/merge.d.ts: import { ObservableInput, OperatorFunction, MonoTypeOperatorFunction, SchedulerLike } from '../types';\n" +
    '/** @deprecated Deprecated in favor of static merge. */\n' +
    'export declare function merge<T>(scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n' +
    '/** @deprecated Deprecated in favor of static merge. */\n' +
    'export declare function merge<T>(concurrent?: number, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n' +
    '/** @deprecated Deprecated in favor of static merge. */\n' +
    'export declare function merge<T, T2>(v2: ObservableInput<T2>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2>;\n' +
    '/** @deprecated Deprecated in favor of static merge. */\n' +
    'export declare function merge<T, T2>(v2: ObservableInput<T2>, concurrent?: number, scheduler?: SchedulerLike): OperatorFunction<T, T | T2>;\n' +
    '/** @deprecated Deprecated in favor of static merge. */\n' +
    'export declare function merge<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3>;\n' +
    '/** @deprecated Deprecated in favor of static merge. */\n' +
    'export declare function merge<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3>;\n' +
    '/** @deprecated Deprecated in favor of static merge. */\n' +
    'export declare function merge<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4>;\n' +
    '/** @deprecated Deprecated in favor of static merge. */\n' +
    'export declare function merge<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4>;\n' +
    '/** @deprecated Deprecated in favor of static merge. */\n' +
    'export declare function merge<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\n' +
    '/** @deprecated Deprecated in favor of static merge. */\n' +
    'export declare function merge<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\n' +
    '/** @deprecated Deprecated in favor of static merge. */\n' +
    'export declare function merge<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\n' +
    '/** @deprecated Deprecated in favor of static merge. */\n' +
    'export declare function merge<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\n' +
    '/** @deprecated Deprecated in favor of static merge. */\n' +
    'export declare function merge<T>(...observables: Array<ObservableInput<T> | SchedulerLike | number>): MonoTypeOperatorFunction<T>;\n' +
    '/** @deprecated Deprecated in favor of static merge. */\n' +
    'export declare function merge<T, R>(...observables: Array<ObservableInput<any> | SchedulerLike | number>): OperatorFunction<T, R>;\n',
  timestamp: 1669130813045
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/mergeAll.d.ts, [object Object]',
  timestamp: 1669130813053
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/mergeAll.d.ts: import { OperatorFunction, ObservableInput } from '../types';\n" +
    '/**\n' +
    ' * Converts a higher-order Observable into a first-order Observable which\n' +
    ' * concurrently delivers all values that are emitted on the inner Observables.\n' +
    ' *\n' +
    ' * <span class="informal">Flattens an Observable-of-Observables.</span>\n' +
    ' *\n' +
    ' * ![](mergeAll.png)\n' +
    ' *\n' +
    ' * `mergeAll` subscribes to an Observable that emits Observables, also known as\n' +
    ' * a higher-order Observable. Each time it observes one of these emitted inner\n' +
    ' * Observables, it subscribes to that and delivers all the values from the\n' +
    ' * inner Observable on the output Observable. The output Observable only\n' +
    ' * completes once all inner Observables have completed. Any error delivered by\n' +
    ' * a inner Observable will be immediately emitted on the output Observable.\n' +
    ' *\n' +
    ' * ## Examples\n' +
    ' * Spawn a new interval Observable for each click event, and blend their outputs as one Observable\n' +
    ' * ```ts\n' +
    " * import { fromEvent, interval } from 'rxjs';\n" +
    " * import { map, mergeAll } from 'rxjs/operators';\n" +
    ' *\n' +
    " * const clicks = fromEvent(document, 'click');\n" +
    ' * const higherOrder = clicks.pipe(map((ev) => interval(1000)));\n' +
    ' * const firstOrder = higherOrder.pipe(mergeAll());\n' +
    ' * firstOrder.subscribe(x => console.log(x));\n' +
    ' * ```\n' +
    ' *\n' +
    ' * Count from 0 to 9 every second for each click, but only allow 2 concurrent timers\n' +
    ' * ```ts\n' +
    " * import { fromEvent, interval } from 'rxjs';\n" +
    " * import { take, map, mergeAll } from 'rxjs/operators';\n" +
    ' *\n' +
    " * const clicks = fromEvent(document, 'click');\n" +
    ' * const higherOrder = clicks.pipe(\n' +
    ' *   map((ev) => interval(1000).pipe(take(10))),\n' +
    ' * );\n' +
    ' * const firstOrder = higherOrder.pipe(mergeAll(2));\n' +
    ' * firstOrder.subscribe(x => console.log(x));\n' +
    ' * ```\n' +
    ' *\n' +
    ' * @see {@link combineAll}\n' +
    ' * @see {@link concatAll}\n' +
    ' * @see {@link exhaust}\n' +
    ' * @see {@link merge}\n' +
    ' * @see {@link mergeMap}\n' +
    ' * @see {@link mergeMapTo}\n' +
    ' * @see {@link mergeScan}\n' +
    ' * @see {@link switchAll}\n' +
    ' * @see {@link switchMap}\n' +
    ' * @see {@link zipAll}\n' +
    ' *\n' +
    ' * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n' +
    ' * Observables being subscribed to concurrently.\n' +
    ' * @return {Observable} An Observable that emits values coming from all the\n' +
    ' * inner Observables emitted by the source Observable.\n' +
    ' * @method mergeAll\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function mergeAll<T>(concurrent?: number): OperatorFunction<ObservableInput<T>, T>;\n',
  timestamp: 1669130813053
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/mergeMap.d.ts, [object Object]',
  timestamp: 1669130813057
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/mergeMap.d.ts: import { Operator } from '../Operator';\n" +
    "import { Subscriber } from '../Subscriber';\n" +
    "import { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\n" +
    "import { SimpleOuterSubscriber } from '../innerSubscribe';\n" +
    'export declare function mergeMap<T, O extends ObservableInput<any>>(project: (value: T, index: number) => O, concurrent?: number): OperatorFunction<T, ObservedValueOf<O>>;\n' +
    '/** @deprecated resultSelector no longer supported, use inner map instead */\n' +
    'export declare function mergeMap<T, O extends ObservableInput<any>>(project: (value: T, index: number) => O, resultSelector: undefined, concurrent?: number): OperatorFunction<T, ObservedValueOf<O>>;\n' +
    '/** @deprecated resultSelector no longer supported, use inner map instead */\n' +
    'export declare function mergeMap<T, R, O extends ObservableInput<any>>(project: (value: T, index: number) => O, resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n' +
    'export declare class MergeMapOperator<T, R> implements Operator<T, R> {\n' +
    '    private project;\n' +
    '    private concurrent;\n' +
    '    constructor(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number);\n' +
    '    call(observer: Subscriber<R>, source: any): any;\n' +
    '}\n' +
    '/**\n' +
    ' * We need this JSDoc comment for affecting ESDoc.\n' +
    ' * @ignore\n' +
    ' * @extends {Ignored}\n' +
    ' */\n' +
    'export declare class MergeMapSubscriber<T, R> extends SimpleOuterSubscriber<T, R> {\n' +
    '    private project;\n' +
    '    private concurrent;\n' +
    '    private hasCompleted;\n' +
    '    private buffer;\n' +
    '    private active;\n' +
    '    protected index: number;\n' +
    '    constructor(destination: Subscriber<R>, project: (value: T, index: number) => ObservableInput<R>, concurrent?: number);\n' +
    '    protected _next(value: T): void;\n' +
    '    protected _tryNext(value: T): void;\n' +
    '    private _innerSub;\n' +
    '    protected _complete(): void;\n' +
    '    notifyNext(innerValue: R): void;\n' +
    '    notifyComplete(): void;\n' +
    '}\n' +
    '/**\n' +
    ' * @deprecated renamed. Use {@link mergeMap}\n' +
    ' */\n' +
    'export declare const flatMap: typeof mergeMap;\n',
  timestamp: 1669130813057
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/mergeMapTo.d.ts, [object Object]',
  timestamp: 1669130813062
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/mergeMapTo.d.ts: import { OperatorFunction, ObservedValueOf } from '../../internal/types';\n" +
    "import { ObservableInput } from '../types';\n" +
    'export declare function mergeMapTo<T, O extends ObservableInput<any>>(innerObservable: O, concurrent?: number): OperatorFunction<any, ObservedValueOf<O>>;\n' +
    '/** @deprecated */\n' +
    'export declare function mergeMapTo<T, R, O extends ObservableInput<any>>(innerObservable: O, resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n',
  timestamp: 1669130813062
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/mergeScan.d.ts, [object Object]',
  timestamp: 1669130813063
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/mergeScan.d.ts: import { Operator } from '../Operator';\n" +
    "import { Subscriber } from '../Subscriber';\n" +
    "import { ObservableInput, OperatorFunction } from '../types';\n" +
    "import { SimpleOuterSubscriber } from '../innerSubscribe';\n" +
    '/**\n' +
    ' * Applies an accumulator function over the source Observable where the\n' +
    ' * accumulator function itself returns an Observable, then each intermediate\n' +
    ' * Observable returned is merged into the output Observable.\n' +
    ' *\n' +
    ` * <span class="informal">It's like {@link scan}, but the Observables returned\n` +
    ' * by the accumulator are merged into the outer Observable.</span>\n' +
    ' *\n' +
    ' * ## Example\n' +
    ' * Count the number of click events\n' +
    ' * ```ts\n' +
    " * import { fromEvent, of } from 'rxjs';\n" +
    " * import { mapTo, mergeScan } from 'rxjs/operators';\n" +
    ' *\n' +
    " * const click$ = fromEvent(document, 'click');\n" +
    ' * const one$ = click$.pipe(mapTo(1));\n' +
    ' * const seed = 0;\n' +
    ' * const count$ = one$.pipe(\n' +
    ' *   mergeScan((acc, one) => of(acc + one), seed),\n' +
    ' * );\n' +
    ' * count$.subscribe(x => console.log(x));\n' +
    ' *\n' +
    ' * // Results:\n' +
    ' * // 1\n' +
    ' * // 2\n' +
    ' * // 3\n' +
    ' * // 4\n' +
    ' * // ...and so on for each click\n' +
    ' * ```\n' +
    ' *\n' +
    ' * @param {function(acc: R, value: T): Observable<R>} accumulator\n' +
    ' * The accumulator function called on each source value.\n' +
    ' * @param seed The initial accumulation value.\n' +
    ' * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n' +
    ' * input Observables being subscribed to concurrently.\n' +
    ' * @return {Observable<R>} An observable of the accumulated values.\n' +
    ' * @method mergeScan\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function mergeScan<T, R>(accumulator: (acc: R, value: T, index: number) => ObservableInput<R>, seed: R, concurrent?: number): OperatorFunction<T, R>;\n' +
    'export declare class MergeScanOperator<T, R> implements Operator<T, R> {\n' +
    '    private accumulator;\n' +
    '    private seed;\n' +
    '    private concurrent;\n' +
    '    constructor(accumulator: (acc: R, value: T, index: number) => ObservableInput<R>, seed: R, concurrent: number);\n' +
    '    call(subscriber: Subscriber<R>, source: any): any;\n' +
    '}\n' +
    '/**\n' +
    ' * We need this JSDoc comment for affecting ESDoc.\n' +
    ' * @ignore\n' +
    ' * @extends {Ignored}\n' +
    ' */\n' +
    'export declare class MergeScanSubscriber<T, R> extends SimpleOuterSubscriber<T, R> {\n' +
    '    private accumulator;\n' +
    '    private acc;\n' +
    '    private concurrent;\n' +
    '    private hasValue;\n' +
    '    private hasCompleted;\n' +
    '    private buffer;\n' +
    '    private active;\n' +
    '    protected index: number;\n' +
    '    constructor(destination: Subscriber<R>, accumulator: (acc: R, value: T, index: number) => ObservableInput<R>, acc: R, concurrent: number);\n' +
    '    protected _next(value: any): void;\n' +
    '    private _innerSub;\n' +
    '    protected _complete(): void;\n' +
    '    notifyNext(innerValue: R): void;\n' +
    '    notifyComplete(): void;\n' +
    '}\n',
  timestamp: 1669130813063
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/min.d.ts, [object Object]',
  timestamp: 1669130813067
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/min.d.ts: import { MonoTypeOperatorFunction } from '../types';\n" +
    '/**\n' +
    ' * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n' +
    ' * and when source Observable completes it emits a single item: the item with the smallest value.\n' +
    ' *\n' +
    ' * ![](min.png)\n' +
    ' *\n' +
    ' * ## Examples\n' +
    ' * Get the minimal value of a series of numbers\n' +
    ' * ```ts\n' +
    " * import { of } from 'rxjs';\n" +
    " * import { min } from 'rxjs/operators';\n" +
    ' *\n' +
    ' * of(5, 4, 7, 2, 8).pipe(\n' +
    ' *   min(),\n' +
    ' * )\n' +
    ' * .subscribe(x => console.log(x)); // -> 2\n' +
    ' * ```\n' +
    ' *\n' +
    ' * Use a comparer function to get the minimal item\n' +
    ' * ```typescript\n' +
    " * import { of } from 'rxjs';\n" +
    " * import { min } from 'rxjs/operators';\n" +
    ' *\n' +
    ' * interface Person {\n' +
    ' *   age: number,\n' +
    ' *   name: string\n' +
    ' * }\n' +
    ' * of<Person>(\n' +
    " *   {age: 7, name: 'Foo'},\n" +
    " *   {age: 5, name: 'Bar'},\n" +
    " *   {age: 9, name: 'Beer'},\n" +
    ' * ).pipe(\n' +
    ' *   min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1),\n' +
    ' * )\n' +
    " * .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n" +
    ' * ```\n' +
    ' * @see {@link max}\n' +
    ' *\n' +
    ' * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n' +
    ' * value of two items.\n' +
    ' * @return {Observable<R>} An Observable that emits item with the smallest value.\n' +
    ' * @method min\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function min<T>(comparer?: (x: T, y: T) => number): MonoTypeOperatorFunction<T>;\n',
  timestamp: 1669130813067
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/multicast.d.ts, [object Object]',
  timestamp: 1669130813070
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/multicast.d.ts: import { Subject } from '../Subject';\n" +
    "import { Operator } from '../Operator';\n" +
    "import { Subscriber } from '../Subscriber';\n" +
    "import { Observable } from '../Observable';\n" +
    "import { ConnectableObservable } from '../observable/ConnectableObservable';\n" +
    "import { OperatorFunction, UnaryFunction, ObservedValueOf, ObservableInput } from '../types';\n" +
    'export declare function multicast<T>(subject: Subject<T>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\n' +
    'export declare function multicast<T, O extends ObservableInput<any>>(subject: Subject<T>, selector: (shared: Observable<T>) => O): UnaryFunction<Observable<T>, ConnectableObservable<ObservedValueOf<O>>>;\n' +
    'export declare function multicast<T>(subjectFactory: (this: Observable<T>) => Subject<T>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\n' +
    'export declare function multicast<T, O extends ObservableInput<any>>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector: (shared: Observable<T>) => O): OperatorFunction<T, ObservedValueOf<O>>;\n' +
    'export declare class MulticastOperator<T, R> implements Operator<T, R> {\n' +
    '    private subjectFactory;\n' +
    '    private selector;\n' +
    '    constructor(subjectFactory: () => Subject<T>, selector: (source: Observable<T>) => Observable<R>);\n' +
    '    call(subscriber: Subscriber<R>, source: any): any;\n' +
    '}\n',
  timestamp: 1669130813070
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813074
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813074
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/ConnectableObservable.ts:false',
  timestamp: 1669130813074
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/ConnectableObservable.tsx:false',
  timestamp: 1669130813074
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/ConnectableObservable.d.ts:true',
  timestamp: 1669130813074
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/observable/ConnectableObservable.d.ts, [object Object]',
  timestamp: 1669130813074
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/observable/ConnectableObservable.d.ts: import { Subject } from '../Subject';\n" +
    "import { Observable } from '../Observable';\n" +
    "import { Subscriber } from '../Subscriber';\n" +
    "import { Subscription } from '../Subscription';\n" +
    '/**\n' +
    ' * @class ConnectableObservable<T>\n' +
    ' */\n' +
    'export declare class ConnectableObservable<T> extends Observable<T> {\n' +
    '    source: Observable<T>;\n' +
    '    protected subjectFactory: () => Subject<T>;\n' +
    '    protected _subject: Subject<T>;\n' +
    '    protected _refCount: number;\n' +
    '    protected _connection: Subscription;\n' +
    '    /** @internal */\n' +
    '    _isComplete: boolean;\n' +
    '    constructor(source: Observable<T>, subjectFactory: () => Subject<T>);\n' +
    '    /** @deprecated This is an internal implementation detail, do not use. */\n' +
    '    _subscribe(subscriber: Subscriber<T>): Subscription;\n' +
    '    protected getSubject(): Subject<T>;\n' +
    '    connect(): Subscription;\n' +
    '    refCount(): Observable<T>;\n' +
    '}\n' +
    'export declare const connectableObservableDescriptor: PropertyDescriptorMap;\n',
  timestamp: 1669130813075
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813076
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813076
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Subject.ts:false',
  timestamp: 1669130813076
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Subject.tsx:false',
  timestamp: 1669130813076
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Subject.d.ts:true',
  timestamp: 1669130813076
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813077
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813077
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Subscriber.ts:false',
  timestamp: 1669130813077
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Subscriber.tsx:false',
  timestamp: 1669130813077
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Subscriber.d.ts:true',
  timestamp: 1669130813077
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813077
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813077
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Subscription.ts:false',
  timestamp: 1669130813077
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Subscription.tsx:false',
  timestamp: 1669130813077
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Subscription.d.ts:true',
  timestamp: 1669130813077
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/observeOn.d.ts, [object Object]',
  timestamp: 1669130813077
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/observeOn.d.ts: import { Operator } from '../Operator';\n" +
    "import { Subscriber } from '../Subscriber';\n" +
    "import { Notification } from '../Notification';\n" +
    "import { MonoTypeOperatorFunction, PartialObserver, SchedulerAction, SchedulerLike, TeardownLogic } from '../types';\n" +
    '/**\n' +
    ' *\n' +
    ' * Re-emits all notifications from source Observable with specified scheduler.\n' +
    ' *\n' +
    ' * <span class="informal">Ensure a specific scheduler is used, from outside of an Observable.</span>\n' +
    ' *\n' +
    ' * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n' +
    ' * notifications emitted by the source Observable. It might be useful, if you do not have control over\n' +
    ' * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n' +
    ' *\n' +
    ' * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n' +
    " * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n" +
    ' * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n' +
    ' * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n' +
    ' * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n' +
    ' * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n' +
    ' * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n' +
    ' * little bit more, to ensure that they are emitted at expected moments.\n' +
    ' *\n' +
    ' * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n' +
    ' * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n' +
    ' * will delay all notifications - including error notifications - while `delay` will pass through error\n' +
    ' * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n' +
    ' * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n' +
    ' * for notification emissions in general.\n' +
    ' *\n' +
    ' * ## Example\n' +
    ' * Ensure values in subscribe are called just before browser repaint.\n' +
    ' * ```ts\n' +
    " * import { interval } from 'rxjs';\n" +
    " * import { observeOn } from 'rxjs/operators';\n" +
    ' *\n' +
    ' * const intervals = interval(10);                // Intervals are scheduled\n' +
    ' *                                                // with async scheduler by default...\n' +
    ' * intervals.pipe(\n' +
    ' *   observeOn(animationFrameScheduler),          // ...but we will observe on animationFrame\n' +
    ' * )                                              // scheduler to ensure smooth animation.\n' +
    ' * .subscribe(val => {\n' +
    " *   someDiv.style.height = val + 'px';\n" +
    ' * });\n' +
    ' * ```\n' +
    ' *\n' +
    ' * @see {@link delay}\n' +
    ' *\n' +
    ' * @param {SchedulerLike} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n' +
    ' * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n' +
    ' * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n' +
    ' * but with provided scheduler.\n' +
    ' *\n' +
    ' * @method observeOn\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function observeOn<T>(scheduler: SchedulerLike, delay?: number): MonoTypeOperatorFunction<T>;\n' +
    'export declare class ObserveOnOperator<T> implements Operator<T, T> {\n' +
    '    private scheduler;\n' +
    '    private delay;\n' +
    '    constructor(scheduler: SchedulerLike, delay?: number);\n' +
    '    call(subscriber: Subscriber<T>, source: any): TeardownLogic;\n' +
    '}\n' +
    '/**\n' +
    ' * We need this JSDoc comment for affecting ESDoc.\n' +
    ' * @ignore\n' +
    ' * @extends {Ignored}\n' +
    ' */\n' +
    'export declare class ObserveOnSubscriber<T> extends Subscriber<T> {\n' +
    '    private scheduler;\n' +
    '    private delay;\n' +
    '    /** @nocollapse */\n' +
    '    static dispatch(this: SchedulerAction<ObserveOnMessage>, arg: ObserveOnMessage): void;\n' +
    '    constructor(destination: Subscriber<T>, scheduler: SchedulerLike, delay?: number);\n' +
    '    private scheduleMessage;\n' +
    '    protected _next(value: T): void;\n' +
    '    protected _error(err: any): void;\n' +
    '    protected _complete(): void;\n' +
    '}\n' +
    'export declare class ObserveOnMessage {\n' +
    '    notification: Notification<any>;\n' +
    '    destination: PartialObserver<any>;\n' +
    '    constructor(notification: Notification<any>, destination: PartialObserver<any>);\n' +
    '}\n',
  timestamp: 1669130813078
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/onErrorResumeNext.d.ts, [object Object]',
  timestamp: 1669130813080
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/onErrorResumeNext.d.ts: import { Observable } from '../Observable';\n" +
    "import { ObservableInput, OperatorFunction } from '../types';\n" +
    'export declare function onErrorResumeNext<T>(): OperatorFunction<T, T>;\n' +
    'export declare function onErrorResumeNext<T, T2>(v: ObservableInput<T2>): OperatorFunction<T, T | T2>;\n' +
    'export declare function onErrorResumeNext<T, T2, T3>(v: ObservableInput<T2>, v2: ObservableInput<T3>): OperatorFunction<T, T | T2 | T3>;\n' +
    'export declare function onErrorResumeNext<T, T2, T3, T4>(v: ObservableInput<T2>, v2: ObservableInput<T3>, v3: ObservableInput<T4>): OperatorFunction<T, T | T2 | T3 | T4>;\n' +
    'export declare function onErrorResumeNext<T, T2, T3, T4, T5>(v: ObservableInput<T2>, v2: ObservableInput<T3>, v3: ObservableInput<T4>, v4: ObservableInput<T5>): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\n' +
    'export declare function onErrorResumeNext<T, T2, T3, T4, T5, T6>(v: ObservableInput<T2>, v2: ObservableInput<T3>, v3: ObservableInput<T4>, v4: ObservableInput<T5>, v5: ObservableInput<T6>): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\n' +
    'export declare function onErrorResumeNext<T, T2, T3, T4, T5, T6, T7>(v: ObservableInput<T2>, v2: ObservableInput<T3>, v3: ObservableInput<T4>, v4: ObservableInput<T5>, v5: ObservableInput<T6>, v6: ObservableInput<T7>): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6 | T7>;\n' +
    'export declare function onErrorResumeNext<T, R>(...observables: Array<ObservableInput<any>>): OperatorFunction<T, T | R>;\n' +
    'export declare function onErrorResumeNext<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, T | R>;\n' +
    'export declare function onErrorResumeNextStatic<R>(v: ObservableInput<R>): Observable<R>;\n' +
    'export declare function onErrorResumeNextStatic<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\n' +
    'export declare function onErrorResumeNextStatic<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\n' +
    'export declare function onErrorResumeNextStatic<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\n' +
    'export declare function onErrorResumeNextStatic<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\n' +
    'export declare function onErrorResumeNextStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n' +
    'export declare function onErrorResumeNextStatic<R>(array: ObservableInput<any>[]): Observable<R>;\n',
  timestamp: 1669130813080
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/pairwise.d.ts, [object Object]',
  timestamp: 1669130813084
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/pairwise.d.ts: import { OperatorFunction } from '../types';\n" +
    '/**\n' +
    ' * Groups pairs of consecutive emissions together and emits them as an array of\n' +
    ' * two values.\n' +
    ' *\n' +
    ' * <span class="informal">Puts the current value and previous value together as\n' +
    ' * an array, and emits that.</span>\n' +
    ' *\n' +
    ' * ![](pairwise.png)\n' +
    ' *\n' +
    ' * The Nth emission from the source Observable will cause the output Observable\n' +
    ' * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n' +
    ' * pair. For this reason, `pairwise` emits on the second and subsequent\n' +
    ' * emissions from the source Observable, but not on the first emission, because\n' +
    ' * there is no previous value in that case.\n' +
    ' *\n' +
    ' * ## Example\n' +
    ' * On every click (starting from the second), emit the relative distance to the previous click\n' +
    ' * ```ts\n' +
    " * import { fromEvent } from 'rxjs';\n" +
    " * import { pairwise, map } from 'rxjs/operators';\n" +
    ' *\n' +
    " * const clicks = fromEvent(document, 'click');\n" +
    ' * const pairs = clicks.pipe(pairwise());\n' +
    ' * const distance = pairs.pipe(\n' +
    ' *   map(pair => {\n' +
    ' *     const x0 = pair[0].clientX;\n' +
    ' *     const y0 = pair[0].clientY;\n' +
    ' *     const x1 = pair[1].clientX;\n' +
    ' *     const y1 = pair[1].clientY;\n' +
    ' *     return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n' +
    ' *   }),\n' +
    ' * );\n' +
    ' * distance.subscribe(x => console.log(x));\n' +
    ' * ```\n' +
    ' *\n' +
    ' * @see {@link buffer}\n' +
    ' * @see {@link bufferCount}\n' +
    ' *\n' +
    ' * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n' +
    ' * consecutive values from the source Observable.\n' +
    ' * @method pairwise\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function pairwise<T>(): OperatorFunction<T, [T, T]>;\n',
  timestamp: 1669130813084
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/partition.d.ts, [object Object]',
  timestamp: 1669130813086
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/partition.d.ts: import { Observable } from '../Observable';\n" +
    "import { UnaryFunction } from '../types';\n" +
    '/**\n' +
    ' * Splits the source Observable into two, one with values that satisfy a\n' +
    " * predicate, and another with values that don't satisfy the predicate.\n" +
    ' *\n' +
    ` * <span class="informal">It's like {@link filter}, but returns two Observables:\n` +
    ' * one like the output of {@link filter}, and the other with values that did not\n' +
    ' * pass the condition.</span>\n' +
    ' *\n' +
    ' * ![](partition.png)\n' +
    ' *\n' +
    ' * `partition` outputs an array with two Observables that partition the values\n' +
    ' * from the source Observable through the given `predicate` function. The first\n' +
    ' * Observable in that array emits source values for which the predicate argument\n' +
    ' * returns true. The second Observable emits source values for which the\n' +
    ' * predicate returns false. The first behaves like {@link filter} and the second\n' +
    ' * behaves like {@link filter} with the predicate negated.\n' +
    ' *\n' +
    ' * ## Example\n' +
    ' * Partition click events into those on DIV elements and those elsewhere\n' +
    ' * ```ts\n' +
    " * import { fromEvent } from 'rxjs';\n" +
    " * import { partition } from 'rxjs/operators';\n" +
    ' *\n' +
    " * const clicks = fromEvent(document, 'click');\n" +
    " * const parts = clicks.pipe(partition(ev => ev.target.tagName === 'DIV'));\n" +
    ' * const clicksOnDivs = parts[0];\n' +
    ' * const clicksElsewhere = parts[1];\n' +
    " * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n" +
    " * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n" +
    ' * ```\n' +
    ' *\n' +
    ' * @see {@link filter}\n' +
    ' *\n' +
    ' * @param {function(value: T, index: number): boolean} predicate A function that\n' +
    ' * evaluates each value emitted by the source Observable. If it returns `true`,\n' +
    ' * the value is emitted on the first Observable in the returned array, if\n' +
    ' * `false` the value is emitted on the second Observable in the array. The\n' +
    ' * `index` parameter is the number `i` for the i-th source emission that has\n' +
    ' * happened since the subscription, starting from the number `0`.\n' +
    ' * @param {any} [thisArg] An optional argument to determine the value of `this`\n' +
    ' * in the `predicate` function.\n' +
    ' * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n' +
    ' * with values that passed the predicate, and another with values that did not\n' +
    ' * pass the predicate.\n' +
    ' * @method partition\n' +
    ' * @owner Observable\n' +
    ' * @deprecated use `partition` static creation function instead\n' +
    ' */\n' +
    'export declare function partition<T>(predicate: (value: T, index: number) => boolean, thisArg?: any): UnaryFunction<Observable<T>, [Observable<T>, Observable<T>]>;\n',
  timestamp: 1669130813086
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/pluck.d.ts, [object Object]',
  timestamp: 1669130813088
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/pluck.d.ts: import { OperatorFunction } from '../types';\n" +
    'export declare function pluck<T, K1 extends keyof T>(k1: K1): OperatorFunction<T, T[K1]>;\n' +
    'export declare function pluck<T, K1 extends keyof T, K2 extends keyof T[K1]>(k1: K1, k2: K2): OperatorFunction<T, T[K1][K2]>;\n' +
    'export declare function pluck<T, K1 extends keyof T, K2 extends keyof T[K1], K3 extends keyof T[K1][K2]>(k1: K1, k2: K2, k3: K3): OperatorFunction<T, T[K1][K2][K3]>;\n' +
    'export declare function pluck<T, K1 extends keyof T, K2 extends keyof T[K1], K3 extends keyof T[K1][K2], K4 extends keyof T[K1][K2][K3]>(k1: K1, k2: K2, k3: K3, k4: K4): OperatorFunction<T, T[K1][K2][K3][K4]>;\n' +
    'export declare function pluck<T, K1 extends keyof T, K2 extends keyof T[K1], K3 extends keyof T[K1][K2], K4 extends keyof T[K1][K2][K3], K5 extends keyof T[K1][K2][K3][K4]>(k1: K1, k2: K2, k3: K3, k4: K4, k5: K5): OperatorFunction<T, T[K1][K2][K3][K4][K5]>;\n' +
    'export declare function pluck<T, K1 extends keyof T, K2 extends keyof T[K1], K3 extends keyof T[K1][K2], K4 extends keyof T[K1][K2][K3], K5 extends keyof T[K1][K2][K3][K4], K6 extends keyof T[K1][K2][K3][K4][K5]>(k1: K1, k2: K2, k3: K3, k4: K4, k5: K5, k6: K6): OperatorFunction<T, T[K1][K2][K3][K4][K5][K6]>;\n' +
    'export declare function pluck<T, R>(...properties: string[]): OperatorFunction<T, R>;\n',
  timestamp: 1669130813088
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/publish.d.ts, [object Object]',
  timestamp: 1669130813092
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/publish.d.ts: import { Observable } from '../Observable';\n" +
    "import { ConnectableObservable } from '../observable/ConnectableObservable';\n" +
    "import { MonoTypeOperatorFunction, OperatorFunction, UnaryFunction, ObservableInput, ObservedValueOf } from '../types';\n" +
    'export declare function publish<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\n' +
    'export declare function publish<T, O extends ObservableInput<any>>(selector: (shared: Observable<T>) => O): OperatorFunction<T, ObservedValueOf<O>>;\n' +
    'export declare function publish<T>(selector: MonoTypeOperatorFunction<T>): MonoTypeOperatorFunction<T>;\n',
  timestamp: 1669130813092
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/publishBehavior.d.ts, [object Object]',
  timestamp: 1669130813093
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/publishBehavior.d.ts: import { Observable } from '../Observable';\n" +
    "import { ConnectableObservable } from '../observable/ConnectableObservable';\n" +
    "import { UnaryFunction } from '../types';\n" +
    '/**\n' +
    ' * @param value\n' +
    ' * @return {ConnectableObservable<T>}\n' +
    ' * @method publishBehavior\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function publishBehavior<T>(value: T): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\n',
  timestamp: 1669130813093
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/publishLast.d.ts, [object Object]',
  timestamp: 1669130813093
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/publishLast.d.ts: import { Observable } from '../Observable';\n" +
    "import { ConnectableObservable } from '../observable/ConnectableObservable';\n" +
    "import { UnaryFunction } from '../types';\n" +
    '/**\n' +
    ' * Returns a connectable observable sequence that shares a single subscription to the\n' +
    ' * underlying sequence containing only the last notification.\n' +
    ' *\n' +
    ' * ![](publishLast.png)\n' +
    ' *\n' +
    ' * Similar to {@link publish}, but it waits until the source observable completes and stores\n' +
    ' * the last emitted value.\n' +
    ' * Similarly to {@link publishReplay} and {@link publishBehavior}, this keeps storing the last\n' +
    ' * value even if it has no more subscribers. If subsequent subscriptions happen, they will\n' +
    ' * immediately get that last stored value and complete.\n' +
    ' *\n' +
    ' * ## Example\n' +
    ' *\n' +
    ' * ```ts\n' +
    " * import { interval } from 'rxjs';\n" +
    " * import { publishLast, tap, take } from 'rxjs/operators';\n" +
    ' *\n' +
    ' * const connectable =\n' +
    ' *   interval(1000)\n' +
    ' *     .pipe(\n' +
    ' *       tap(x => console.log("side effect", x)),\n' +
    ' *       take(3),\n' +
    ' *       publishLast());\n' +
    ' *\n' +
    ' * connectable.subscribe(\n' +
    ' *   x => console.log(  "Sub. A", x),\n' +
    ' *   err => console.log("Sub. A Error", err),\n' +
    ' *   () => console.log( "Sub. A Complete"));\n' +
    ' *\n' +
    ' * connectable.subscribe(\n' +
    ' *   x => console.log(  "Sub. B", x),\n' +
    ' *   err => console.log("Sub. B Error", err),\n' +
    ' *   () => console.log( "Sub. B Complete"));\n' +
    ' *\n' +
    ' * connectable.connect();\n' +
    ' *\n' +
    ' * // Results:\n' +
    ' * //    "side effect 0"\n' +
    ' * //    "side effect 1"\n' +
    ' * //    "side effect 2"\n' +
    ' * //    "Sub. A 2"\n' +
    ' * //    "Sub. B 2"\n' +
    ' * //    "Sub. A Complete"\n' +
    ' * //    "Sub. B Complete"\n' +
    ' * ```\n' +
    ' *\n' +
    ' * @see {@link ConnectableObservable}\n' +
    ' * @see {@link publish}\n' +
    ' * @see {@link publishReplay}\n' +
    ' * @see {@link publishBehavior}\n' +
    ' *\n' +
    ' * @return {ConnectableObservable} An observable sequence that contains the elements of a\n' +
    ' * sequence produced by multicasting the source sequence.\n' +
    ' * @method publishLast\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function publishLast<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\n',
  timestamp: 1669130813093
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/publishReplay.d.ts, [object Object]',
  timestamp: 1669130813094
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/publishReplay.d.ts: import { Observable } from '../Observable';\n" +
    "import { MonoTypeOperatorFunction, OperatorFunction, SchedulerLike, ObservableInput, ObservedValueOf } from '../types';\n" +
    'export declare function publishReplay<T>(bufferSize?: number, windowTime?: number, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n' +
    'export declare function publishReplay<T, O extends ObservableInput<any>>(bufferSize?: number, windowTime?: number, selector?: (shared: Observable<T>) => O, scheduler?: SchedulerLike): OperatorFunction<T, ObservedValueOf<O>>;\n',
  timestamp: 1669130813094
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/race.d.ts, [object Object]',
  timestamp: 1669130813095
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/race.d.ts: import { Observable } from '../Observable';\n" +
    "import { MonoTypeOperatorFunction, OperatorFunction } from '../types';\n" +
    '/** @deprecated Deprecated in favor of static race. */\n' +
    'export declare function race<T>(observables: Array<Observable<T>>): MonoTypeOperatorFunction<T>;\n' +
    '/** @deprecated Deprecated in favor of static race. */\n' +
    'export declare function race<T, R>(observables: Array<Observable<T>>): OperatorFunction<T, R>;\n' +
    '/** @deprecated Deprecated in favor of static race. */\n' +
    'export declare function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): MonoTypeOperatorFunction<T>;\n' +
    '/** @deprecated Deprecated in favor of static race. */\n' +
    'export declare function race<T, R>(...observables: Array<Observable<any> | Array<Observable<any>>>): OperatorFunction<T, R>;\n',
  timestamp: 1669130813095
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/reduce.d.ts, [object Object]',
  timestamp: 1669130813096
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/reduce.d.ts: import { OperatorFunction, MonoTypeOperatorFunction } from '../types';\n" +
    'export declare function reduce<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed: R): OperatorFunction<T, R>;\n' +
    'export declare function reduce<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\n' +
    'export declare function reduce<T, R>(accumulator: (acc: R, value: T, index: number) => R): OperatorFunction<T, R>;\n',
  timestamp: 1669130813096
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/repeat.d.ts, [object Object]',
  timestamp: 1669130813097
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/repeat.d.ts: import { MonoTypeOperatorFunction } from '../types';\n" +
    '/**\n' +
    ' * Returns an Observable that will resubscribe to the source stream when the source stream completes, at most count times.\n' +
    ' *\n' +
    ` * <span class="informal">Repeats all values emitted on the source. It's like {@link retry}, but for non error cases.</span>\n` +
    ' *\n' +
    ' * ![](repeat.png)\n' +
    ' *\n' +
    ' * Similar to {@link retry}, this operator repeats the stream of items emitted by the source for non error cases.\n' +
    ' * Repeat can be useful for creating observables that are meant to have some repeated pattern or rhythm.\n' +
    ' *\n' +
    ' * Note: `repeat(0)` returns an empty observable and `repeat()` will repeat forever\n' +
    ' *\n' +
    ' * ## Example\n' +
    ' * Repeat a message stream\n' +
    ' * ```ts\n' +
    " * import { of } from 'rxjs';\n" +
    " * import { repeat, delay } from 'rxjs/operators';\n" +
    ' *\n' +
    " * const source = of('Repeat message');\n" +
    ' * const example = source.pipe(repeat(3));\n' +
    ' * example.subscribe(x => console.log(x));\n' +
    ' *\n' +
    ' * // Results\n' +
    ' * // Repeat message\n' +
    ' * // Repeat message\n' +
    ' * // Repeat message\n' +
    ' * ```\n' +
    ' *\n' +
    ' * Repeat 3 values, 2 times\n' +
    ' * ```ts\n' +
    " * import { interval } from 'rxjs';\n" +
    " * import { repeat, take } from 'rxjs/operators';\n" +
    ' *\n' +
    ' * const source = interval(1000);\n' +
    ' * const example = source.pipe(take(3), repeat(2));\n' +
    ' * example.subscribe(x => console.log(x));\n' +
    ' *\n' +
    ' * // Results every second\n' +
    ' * // 0\n' +
    ' * // 1\n' +
    ' * // 2\n' +
    ' * // 0\n' +
    ' * // 1\n' +
    ' * // 2\n' +
    ' * ```\n' +
    ' *\n' +
    ' * @see {@link repeatWhen}\n' +
    ' * @see {@link retry}\n' +
    ' *\n' +
    ' * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n' +
    ' * an empty Observable.\n' +
    ' * @return {Observable} An Observable that will resubscribe to the source stream when the source stream completes\n' +
    ' * , at most count times.\n' +
    ' * @method repeat\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function repeat<T>(count?: number): MonoTypeOperatorFunction<T>;\n',
  timestamp: 1669130813097
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/repeatWhen.d.ts, [object Object]',
  timestamp: 1669130813097
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/repeatWhen.d.ts: import { Observable } from '../Observable';\n" +
    "import { MonoTypeOperatorFunction } from '../types';\n" +
    '/**\n' +
    ' * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n' +
    ' * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n' +
    ' * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n' +
    ' * this method will resubscribe to the source Observable.\n' +
    ' *\n' +
    ' * ![](repeatWhen.png)\n' +
    ' *\n' +
    ' * ## Example\n' +
    ' * Repeat a message stream on click\n' +
    ' * ```ts\n' +
    " * import { of, fromEvent } from 'rxjs';\n" +
    " * import { repeatWhen } from 'rxjs/operators';\n" +
    ' *\n' +
    " * const source = of('Repeat message');\n" +
    " * const documentClick$ = fromEvent(document, 'click');\n" +
    ' *\n' +
    ' * source.pipe(repeatWhen(() => documentClick$)\n' +
    ' * ).subscribe(data => console.log(data))\n' +
    ' * ```\n' +
    ' * @see {@link repeat}\n' +
    ' * @see {@link retry}\n' +
    ' * @see {@link retryWhen}\n' +
    ' *\n' +
    ' * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n' +
    ' * which a user can `complete` or `error`, aborting the repetition.\n' +
    ' * @return {Observable} The source Observable modified with repeat logic.\n' +
    ' * @method repeatWhen\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function repeatWhen<T>(notifier: (notifications: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T>;\n',
  timestamp: 1669130813097
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/retry.d.ts, [object Object]',
  timestamp: 1669130813098
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/retry.d.ts: import { MonoTypeOperatorFunction } from '../types';\n" +
    '/**\n' +
    ' * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n' +
    ' * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n' +
    ' * as a number parameter) rather than propagating the `error` call.\n' +
    ' *\n' +
    ' * ![](retry.png)\n' +
    ' *\n' +
    ' * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n' +
    ' * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n' +
    ' * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n' +
    ' * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n' +
    ' *\n' +
    ' * ## Example\n' +
    ' * ```ts\n' +
    " * import { interval, of, throwError } from 'rxjs';\n" +
    " * import { mergeMap, retry } from 'rxjs/operators';\n" +
    ' *\n' +
    ' * const source = interval(1000);\n' +
    ' * const example = source.pipe(\n' +
    ' *   mergeMap(val => {\n' +
    ' *     if(val > 5){\n' +
    " *       return throwError('Error!');\n" +
    ' *     }\n' +
    ' *     return of(val);\n' +
    ' *   }),\n' +
    ' *   //retry 2 times on error\n' +
    ' *   retry(2)\n' +
    ' * );\n' +
    ' *\n' +
    ' * const subscribe = example.subscribe({\n' +
    ' *   next: val => console.log(val),\n' +
    ' *   error: val => console.log(`${val}: Retried 2 times then quit!`)\n' +
    ' * });\n' +
    ' *\n' +
    ' * // Output:\n' +
    ' * // 0..1..2..3..4..5..\n' +
    ' * // 0..1..2..3..4..5..\n' +
    ' * // 0..1..2..3..4..5..\n' +
    ' * // "Error!: Retried 2 times then quit!"\n' +
    ' * ```\n' +
    ' *\n' +
    ' * @param {number} count - Number of retry attempts before failing.\n' +
    ' * @return {Observable} The source Observable modified with the retry logic.\n' +
    ' * @method retry\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function retry<T>(count?: number): MonoTypeOperatorFunction<T>;\n',
  timestamp: 1669130813098
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/retryWhen.d.ts, [object Object]',
  timestamp: 1669130813099
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/retryWhen.d.ts: import { Observable } from '../Observable';\n" +
    "import { MonoTypeOperatorFunction } from '../types';\n" +
    '/**\n' +
    ' * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n' +
    ' * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n' +
    ' * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n' +
    ' * subscription. Otherwise this method will resubscribe to the source Observable.\n' +
    ' *\n' +
    ' * ![](retryWhen.png)\n' +
    ' *\n' +
    ' * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n' +
    ' * user can `complete` or `error`, aborting the retry.\n' +
    ' * @return {Observable} The source Observable modified with retry logic.\n' +
    ' * @method retryWhen\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function retryWhen<T>(notifier: (errors: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T>;\n',
  timestamp: 1669130813099
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/refCount.d.ts, [object Object]',
  timestamp: 1669130813100
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/refCount.d.ts: import { MonoTypeOperatorFunction } from '../types';\n" +
    '/**\n' +
    ' * Make a {@link ConnectableObservable} behave like a ordinary observable and automates the way\n' +
    ' * you can connect to it.\n' +
    ' *\n' +
    ' * Internally it counts the subscriptions to the observable and subscribes (only once) to the source if\n' +
    ' * the number of subscriptions is larger than 0. If the number of subscriptions is smaller than 1, it\n' +
    ' * unsubscribes from the source. This way you can make sure that everything before the *published*\n' +
    ' * refCount has only a single subscription independently of the number of subscribers to the target\n' +
    ' * observable.\n' +
    ' *\n' +
    ' * Note that using the {@link share} operator is exactly the same as using the *publish* operator\n' +
    ' * (making the observable hot) and the *refCount* operator in a sequence.\n' +
    ' *\n' +
    ' * ![](refCount.png)\n' +
    ' *\n' +
    ' * ## Example\n' +
    ' *\n' +
    ' * In the following example there are two intervals turned into connectable observables\n' +
    ' * by using the *publish* operator. The first one uses the *refCount* operator, the\n' +
    ' * second one does not use it. You will notice that a connectable observable does nothing\n' +
    ' * until you call its connect function.\n' +
    ' *\n' +
    ' * ```ts\n' +
    " * import { interval } from 'rxjs';\n" +
    " * import { tap, publish, refCount } from 'rxjs/operators';\n" +
    ' *\n' +
    ' * // Turn the interval observable into a ConnectableObservable (hot)\n' +
    ' * const refCountInterval = interval(400).pipe(\n' +
    ' *   tap((num) => console.log(`refCount ${num}`)),\n' +
    ' *   publish(),\n' +
    ' *   refCount()\n' +
    ' * );\n' +
    ' *\n' +
    ' * const publishedInterval = interval(400).pipe(\n' +
    ' *   tap((num) => console.log(`publish ${num}`)),\n' +
    ' *   publish()\n' +
    ' * );\n' +
    ' *\n' +
    ' * refCountInterval.subscribe();\n' +
    ' * refCountInterval.subscribe();\n' +
    " * // 'refCount 0' -----> 'refCount 1' -----> etc\n" +
    ' * // All subscriptions will receive the same value and the tap (and\n' +
    ' * // every other operator) before the publish operator will be executed\n' +
    ' * // only once per event independently of the number of subscriptions.\n' +
    ' *\n' +
    ' * publishedInterval.subscribe();\n' +
    ' * // Nothing happens until you call .connect() on the observable.\n' +
    ' * ```\n' +
    ' *\n' +
    ' * @see {@link ConnectableObservable}\n' +
    ' * @see {@link share}\n' +
    ' * @see {@link publish}\n' +
    ' */\n' +
    'export declare function refCount<T>(): MonoTypeOperatorFunction<T>;\n',
  timestamp: 1669130813100
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/sample.d.ts, [object Object]',
  timestamp: 1669130813101
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/sample.d.ts: import { Observable } from '../Observable';\n" +
    "import { MonoTypeOperatorFunction } from '../types';\n" +
    '/**\n' +
    ' * Emits the most recently emitted value from the source Observable whenever\n' +
    ' * another Observable, the `notifier`, emits.\n' +
    ' *\n' +
    ` * <span class="informal">It's like {@link sampleTime}, but samples whenever\n` +
    ' * the `notifier` Observable emits something.</span>\n' +
    ' *\n' +
    ' * ![](sample.png)\n' +
    ' *\n' +
    ' * Whenever the `notifier` Observable emits a value or completes, `sample`\n' +
    ' * looks at the source Observable and emits whichever value it has most recently\n' +
    ' * emitted since the previous sampling, unless the source has not emitted\n' +
    ' * anything since the previous sampling. The `notifier` is subscribed to as soon\n' +
    ' * as the output Observable is subscribed.\n' +
    ' *\n' +
    ' * ## Example\n' +
    ' * On every click, sample the most recent "seconds" timer\n' +
    ' * ```ts\n' +
    " * import { fromEvent, interval } from 'rxjs';\n" +
    " * import { sample } from 'rxjs/operators';\n" +
    ' *\n' +
    ' * const seconds = interval(1000);\n' +
    " * const clicks = fromEvent(document, 'click');\n" +
    ' * const result = seconds.pipe(sample(clicks));\n' +
    ' * result.subscribe(x => console.log(x));\n' +
    ' * ```\n' +
    ' *\n' +
    ' * @see {@link audit}\n' +
    ' * @see {@link debounce}\n' +
    ' * @see {@link sampleTime}\n' +
    ' * @see {@link throttle}\n' +
    ' *\n' +
    ' * @param {Observable<any>} notifier The Observable to use for sampling the\n' +
    ' * source Observable.\n' +
    ' * @return {Observable<T>} An Observable that emits the results of sampling the\n' +
    ' * values emitted by the source Observable whenever the notifier Observable\n' +
    ' * emits value or completes.\n' +
    ' * @method sample\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function sample<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T>;\n',
  timestamp: 1669130813101
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/sampleTime.d.ts, [object Object]',
  timestamp: 1669130813102
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/sampleTime.d.ts: import { MonoTypeOperatorFunction, SchedulerLike } from '../types';\n" +
    '/**\n' +
    ' * Emits the most recently emitted value from the source Observable within\n' +
    ' * periodic time intervals.\n' +
    ' *\n' +
    ' * <span class="informal">Samples the source Observable at periodic time\n' +
    ' * intervals, emitting what it samples.</span>\n' +
    ' *\n' +
    ' * ![](sampleTime.png)\n' +
    ' *\n' +
    ' * `sampleTime` periodically looks at the source Observable and emits whichever\n' +
    ' * value it has most recently emitted since the previous sampling, unless the\n' +
    ' * source has not emitted anything since the previous sampling. The sampling\n' +
    ' * happens periodically in time every `period` milliseconds (or the time unit\n' +
    ' * defined by the optional `scheduler` argument). The sampling starts as soon as\n' +
    ' * the output Observable is subscribed.\n' +
    ' *\n' +
    ' * ## Example\n' +
    ' * Every second, emit the most recent click at most once\n' +
    ' * ```ts\n' +
    " * import { fromEvent } from 'rxjs';\n" +
    " * import { sampleTime } from 'rxjs/operators';\n" +
    ' *\n' +
    " * const clicks = fromEvent(document, 'click');\n" +
    ' * const result = clicks.pipe(sampleTime(1000));\n' +
    ' * result.subscribe(x => console.log(x));\n' +
    ' * ```\n' +
    ' *\n' +
    ' * @see {@link auditTime}\n' +
    ' * @see {@link debounceTime}\n' +
    ' * @see {@link delay}\n' +
    ' * @see {@link sample}\n' +
    ' * @see {@link throttleTime}\n' +
    ' *\n' +
    ' * @param {number} period The sampling period expressed in milliseconds or the\n' +
    ' * time unit determined internally by the optional `scheduler`.\n' +
    ' * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\n' +
    ' * managing the timers that handle the sampling.\n' +
    ' * @return {Observable<T>} An Observable that emits the results of sampling the\n' +
    ' * values emitted by the source Observable at the specified time interval.\n' +
    ' * @method sampleTime\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function sampleTime<T>(period: number, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n',
  timestamp: 1669130813102
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/scan.d.ts, [object Object]',
  timestamp: 1669130813103
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/scan.d.ts: import { OperatorFunction, MonoTypeOperatorFunction } from '../types';\n" +
    'export declare function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed: R): OperatorFunction<T, R>;\n' +
    'export declare function scan<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\n' +
    'export declare function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R): OperatorFunction<T, R>;\n',
  timestamp: 1669130813103
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/sequenceEqual.d.ts, [object Object]',
  timestamp: 1669130813104
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/sequenceEqual.d.ts: import { Operator } from '../Operator';\n" +
    "import { Observable } from '../Observable';\n" +
    "import { Subscriber } from '../Subscriber';\n" +
    "import { Observer, OperatorFunction } from '../types';\n" +
    '/**\n' +
    ' * Compares all values of two observables in sequence using an optional comparator function\n' +
    ' * and returns an observable of a single boolean value representing whether or not the two sequences\n' +
    ' * are equal.\n' +
    ' *\n' +
    ' * <span class="informal">Checks to see of all values emitted by both observables are equal, in order.</span>\n' +
    ' *\n' +
    ' * ![](sequenceEqual.png)\n' +
    ' *\n' +
    ' * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n' +
    ' * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n' +
    " * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n" +
    ' * observables completes, the operator will wait for the other observable to complete; If the other\n' +
    ' * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n' +
    ' * completes or emits after the other complets, the returned observable will never complete.\n' +
    ' *\n' +
    ' * ## Example\n' +
    ' * figure out if the Konami code matches\n' +
    ' * ```ts\n' +
    " * import { from, fromEvent } from 'rxjs';\n" +
    " * import { sequenceEqual, bufferCount, mergeMap, map } from 'rxjs/operators';\n" +
    ' *\n' +
    ' * const codes = from([\n' +
    " *   'ArrowUp',\n" +
    " *   'ArrowUp',\n" +
    " *   'ArrowDown',\n" +
    " *   'ArrowDown',\n" +
    " *   'ArrowLeft',\n" +
    " *   'ArrowRight',\n" +
    " *   'ArrowLeft',\n" +
    " *   'ArrowRight',\n" +
    " *   'KeyB',\n" +
    " *   'KeyA',\n" +
    " *   'Enter', // no start key, clearly.\n" +
    ' * ]);\n' +
    ' *\n' +
    " * const keys = fromEvent(document, 'keyup').pipe(map(e => e.code));\n" +
    ' * const matches = keys.pipe(\n' +
    ' *   bufferCount(11, 1),\n' +
    ' *   mergeMap(\n' +
    ' *     last11 => from(last11).pipe(sequenceEqual(codes)),\n' +
    ' *   ),\n' +
    ' * );\n' +
    " * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n" +
    ' * ```\n' +
    ' *\n' +
    ' * @see {@link combineLatest}\n' +
    ' * @see {@link zip}\n' +
    ' * @see {@link withLatestFrom}\n' +
    ' *\n' +
    ' * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n' +
    ' * @param {function} [comparator] An optional function to compare each value pair\n' +
    ' * @return {Observable} An Observable of a single boolean value representing whether or not\n' +
    ' * the values emitted by both observables were equal in sequence.\n' +
    ' * @method sequenceEqual\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function sequenceEqual<T>(compareTo: Observable<T>, comparator?: (a: T, b: T) => boolean): OperatorFunction<T, boolean>;\n' +
    'export declare class SequenceEqualOperator<T> implements Operator<T, boolean> {\n' +
    '    private compareTo;\n' +
    '    private comparator;\n' +
    '    constructor(compareTo: Observable<T>, comparator: (a: T, b: T) => boolean);\n' +
    '    call(subscriber: Subscriber<boolean>, source: any): any;\n' +
    '}\n' +
    '/**\n' +
    ' * We need this JSDoc comment for affecting ESDoc.\n' +
    ' * @ignore\n' +
    ' * @extends {Ignored}\n' +
    ' */\n' +
    'export declare class SequenceEqualSubscriber<T, R> extends Subscriber<T> {\n' +
    '    private compareTo;\n' +
    '    private comparator;\n' +
    '    private _a;\n' +
    '    private _b;\n' +
    '    private _oneComplete;\n' +
    '    constructor(destination: Observer<R>, compareTo: Observable<T>, comparator: (a: T, b: T) => boolean);\n' +
    '    protected _next(value: T): void;\n' +
    '    _complete(): void;\n' +
    '    checkValues(): void;\n' +
    '    emit(value: boolean): void;\n' +
    '    nextB(value: T): void;\n' +
    '    completeB(): void;\n' +
    '}\n',
  timestamp: 1669130813104
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/share.d.ts, [object Object]',
  timestamp: 1669130813106
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/share.d.ts: import { MonoTypeOperatorFunction } from '../types';\n" +
    '/**\n' +
    ' * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n' +
    ' * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n' +
    ' * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n' +
    ' * This is an alias for `multicast(() => new Subject()), refCount()`.\n' +
    ' *\n' +
    ' * ![](share.png)\n' +
    ' *\n' +
    ' * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n' +
    ' * @method share\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function share<T>(): MonoTypeOperatorFunction<T>;\n',
  timestamp: 1669130813106
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/shareReplay.d.ts, [object Object]',
  timestamp: 1669130813106
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/shareReplay.d.ts: import { MonoTypeOperatorFunction, SchedulerLike } from '../types';\n" +
    'export interface ShareReplayConfig {\n' +
    '    bufferSize?: number;\n' +
    '    windowTime?: number;\n' +
    '    refCount: boolean;\n' +
    '    scheduler?: SchedulerLike;\n' +
    '}\n' +
    '/**\n' +
    ' * Share source and replay specified number of emissions on subscription.\n' +
    ' *\n' +
    ' * This operator is a specialization of `replay` that connects to a source observable\n' +
    ' * and multicasts through a `ReplaySubject` constructed with the specified arguments.\n' +
    ' * A successfully completed source will stay cached in the `shareReplayed observable` forever,\n' +
    ' * but an errored source can be retried.\n' +
    ' *\n' +
    ' * ## Why use shareReplay?\n' +
    ' * You generally want to use `shareReplay` when you have side-effects or taxing computations\n' +
    ' * that you do not wish to be executed amongst multiple subscribers.\n' +
    ' * It may also be valuable in situations where you know you will have late subscribers to\n' +
    ' * a stream that need access to previously emitted values.\n' +
    ' * This ability to replay values on subscription is what differentiates {@link share} and `shareReplay`.\n' +
    ' *\n' +
    ' * ![](shareReplay.png)\n' +
    ' *\n' +
    ' * ## Example\n' +
    ' * ```ts\n' +
    " * import { interval } from 'rxjs';\n" +
    " * import { shareReplay, take } from 'rxjs/operators';\n" +
    ' *\n' +
    ' * const obs$ = interval(1000);\n' +
    ' * const shared$ = obs$.pipe(\n' +
    ' *   take(4),\n' +
    ' *   shareReplay(3)\n' +
    ' * );\n' +
    " * shared$.subscribe(x => console.log('source A: ', x));\n" +
    " * shared$.subscribe(y => console.log('source B: ', y));\n" +
    ' *\n' +
    ' * ```\n' +
    ' *\n' +
    ' * @see {@link publish}\n' +
    ' * @see {@link share}\n' +
    ' * @see {@link publishReplay}\n' +
    ' *\n' +
    ' * @param {Number} [bufferSize=Number.POSITIVE_INFINITY] Maximum element count of the replay buffer.\n' +
    ' * @param {Number} [windowTime=Number.POSITIVE_INFINITY] Maximum time length of the replay buffer in milliseconds.\n' +
    ' * @param {Scheduler} [scheduler] Scheduler where connected observers within the selector function\n' +
    ' * will be invoked on.\n' +
    ' * @return {Observable} An observable sequence that contains the elements of a sequence produced\n' +
    ' * by multicasting the source sequence within a selector function.\n' +
    ' * @method shareReplay\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function shareReplay<T>(config: ShareReplayConfig): MonoTypeOperatorFunction<T>;\n' +
    'export declare function shareReplay<T>(bufferSize?: number, windowTime?: number, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n',
  timestamp: 1669130813106
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/single.d.ts, [object Object]',
  timestamp: 1669130813108
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/single.d.ts: import { Observable } from '../Observable';\n" +
    "import { MonoTypeOperatorFunction } from '../types';\n" +
    '/**\n' +
    ' * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n' +
    ' * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n' +
    ' * items, notify of an IllegalArgumentException or NoSuchElementException respectively. If the source Observable\n' +
    ' * emits items but none match the specified predicate then `undefined` is emitted.\n' +
    ' *\n' +
    ' * <span class="informal">Like {@link first}, but emit with error notification if there is more than one value.</span>\n' +
    ' * ![](single.png)\n' +
    ' *\n' +
    ' * ## Example\n' +
    " * emits 'error'\n" +
    ' * ```ts\n' +
    " * import { range } from 'rxjs';\n" +
    " * import { single } from 'rxjs/operators';\n" +
    ' *\n' +
    ' * const numbers = range(1,5).pipe(single());\n' +
    " * numbers.subscribe(x => console.log('never get called'), e => console.log('error'));\n" +
    ' * // result\n' +
    " * // 'error'\n" +
    ' * ```\n' +
    ' *\n' +
    " * emits 'undefined'\n" +
    ' * ```ts\n' +
    " * import { range } from 'rxjs';\n" +
    " * import { single } from 'rxjs/operators';\n" +
    ' *\n' +
    ' * const numbers = range(1,5).pipe(single(x => x === 10));\n' +
    ' * numbers.subscribe(x => console.log(x));\n' +
    ' * // result\n' +
    " * // 'undefined'\n" +
    ' * ```\n' +
    ' *\n' +
    ' * @see {@link first}\n' +
    ' * @see {@link find}\n' +
    ' * @see {@link findIndex}\n' +
    ' * @see {@link elementAt}\n' +
    ' *\n' +
    " * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n" +
    ' * callback if the Observable completes before any `next` notification was sent.\n' +
    ' * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n' +
    ' * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n' +
    ' * the predicate or `undefined` when no items match.\n' +
    ' *\n' +
    ' * @method single\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function single<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\n',
  timestamp: 1669130813108
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/skip.d.ts, [object Object]',
  timestamp: 1669130813109
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/skip.d.ts: import { MonoTypeOperatorFunction } from '../types';\n" +
    '/**\n' +
    ' * Returns an Observable that skips the first `count` items emitted by the source Observable.\n' +
    ' *\n' +
    ' * ![](skip.png)\n' +
    ' *\n' +
    ' * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n' +
    ' * @return {Observable} An Observable that skips values emitted by the source Observable.\n' +
    ' *\n' +
    ' * @method skip\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function skip<T>(count: number): MonoTypeOperatorFunction<T>;\n',
  timestamp: 1669130813109
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/skipLast.d.ts, [object Object]',
  timestamp: 1669130813109
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/skipLast.d.ts: import { MonoTypeOperatorFunction } from '../types';\n" +
    '/**\n' +
    ' * Skip the last `count` values emitted by the source Observable.\n' +
    ' *\n' +
    ' * ![](skipLast.png)\n' +
    ' *\n' +
    ' * `skipLast` returns an Observable that accumulates a queue with a length\n' +
    ' * enough to store the first `count` values. As more values are received,\n' +
    ' * values are taken from the front of the queue and produced on the result\n' +
    ' * sequence. This causes values to be delayed.\n' +
    ' *\n' +
    ' * ## Example\n' +
    ' * Skip the last 2 values of an Observable with many values\n' +
    ' * ```ts\n' +
    " * import { range } from 'rxjs';\n" +
    " * import { skipLast } from 'rxjs/operators';\n" +
    ' *\n' +
    ' * const many = range(1, 5);\n' +
    ' * const skipLastTwo = many.pipe(skipLast(2));\n' +
    ' * skipLastTwo.subscribe(x => console.log(x));\n' +
    ' *\n' +
    ' * // Results in:\n' +
    ' * // 1 2 3\n' +
    ' * ```\n' +
    ' *\n' +
    ' * @see {@link skip}\n' +
    ' * @see {@link skipUntil}\n' +
    ' * @see {@link skipWhile}\n' +
    ' * @see {@link take}\n' +
    ' *\n' +
    ' * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n' +
    ' * ArgumentOutOrRangeError if `i < 0`.\n' +
    ' *\n' +
    ' * @param {number} count Number of elements to skip from the end of the source Observable.\n' +
    ' * @returns {Observable<T>} An Observable that skips the last count values\n' +
    ' * emitted by the source Observable.\n' +
    ' * @method skipLast\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function skipLast<T>(count: number): MonoTypeOperatorFunction<T>;\n',
  timestamp: 1669130813110
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/skipUntil.d.ts, [object Object]',
  timestamp: 1669130813112
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/skipUntil.d.ts: import { Observable } from '../Observable';\n" +
    "import { MonoTypeOperatorFunction } from '../types';\n" +
    '/**\n' +
    ' * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n' +
    ' *\n' +
    ' * The `skipUntil` operator causes the observable stream to skip the emission of values ​​until the passed in observable emits the first value.\n' +
    ' * This can be particularly useful in combination with user interactions, responses of http requests or waiting for specific times to pass by.\n' +
    ' *\n' +
    ' * ![](skipUntil.png)\n' +
    ' *\n' +
    ' * Internally the `skipUntil` operator subscribes to the passed in observable (in the following called *notifier*) in order to recognize the emission\n' +
    ' * of its first value. When this happens, the operator unsubscribes from the *notifier* and starts emitting the values of the *source*\n' +
    ' * observable. It will never let the *source* observable emit any values if the *notifier* completes or throws an error without emitting\n' +
    ' * a value before.\n' +
    ' *\n' +
    ' * ## Example\n' +
    ' *\n' +
    ' * In the following example, all emitted values ​​of the interval observable are skipped until the user clicks anywhere within the page.\n' +
    ' *\n' +
    ' * ```ts\n' +
    " * import { interval, fromEvent } from 'rxjs';\n" +
    " * import { skipUntil } from 'rxjs/operators';\n" +
    ' *\n' +
    ' * const intervalObservable = interval(1000);\n' +
    " * const click = fromEvent(document, 'click');\n" +
    ' *\n' +
    ' * const emitAfterClick = intervalObservable.pipe(\n' +
    ' *   skipUntil(click)\n' +
    ' * );\n' +
    ' * // clicked at 4.6s. output: 5...6...7...8........ or\n' +
    ' * // clicked at 7.3s. output: 8...9...10..11.......\n' +
    ' * const subscribe = emitAfterClick.subscribe(value => console.log(value));\n' +
    ' * ```\n' +
    ' *\n' +
    " * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n" +
    ' * be mirrored by the resulting Observable.\n' +
    ' * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n' +
    ' * an item, then emits the remaining items.\n' +
    ' * @method skipUntil\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function skipUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T>;\n',
  timestamp: 1669130813113
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/skipWhile.d.ts, [object Object]',
  timestamp: 1669130813114
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/skipWhile.d.ts: import { MonoTypeOperatorFunction } from '../types';\n" +
    '/**\n' +
    ' * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n' +
    ' * true, but emits all further source items as soon as the condition becomes false.\n' +
    ' *\n' +
    ' * ![](skipWhile.png)\n' +
    ' *\n' +
    ' * @param {Function} predicate - A function to test each item emitted from the source Observable.\n' +
    ' * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n' +
    ' * specified predicate becomes false.\n' +
    ' * @method skipWhile\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function skipWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T>;\n',
  timestamp: 1669130813114
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/startWith.d.ts, [object Object]',
  timestamp: 1669130813115
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/startWith.d.ts: import { MonoTypeOperatorFunction, OperatorFunction, SchedulerLike } from '../types';\n" +
    '/** @deprecated use {@link scheduled} and {@link concatAll} (e.g. `scheduled([[a, b, c], source], scheduler).pipe(concatAll())`) */\n' +
    'export declare function startWith<T>(scheduler: SchedulerLike): MonoTypeOperatorFunction<T>;\n' +
    '/** @deprecated use {@link scheduled} and {@link concatAll} (e.g. `scheduled([[a, b, c], source], scheduler).pipe(concatAll())`) */\n' +
    'export declare function startWith<T, D>(v1: D, scheduler: SchedulerLike): OperatorFunction<T, T | D>;\n' +
    '/** @deprecated use {@link scheduled} and {@link concatAll} (e.g. `scheduled([[a, b, c], source], scheduler).pipe(concatAll())`) */\n' +
    'export declare function startWith<T, D, E>(v1: D, v2: E, scheduler: SchedulerLike): OperatorFunction<T, T | D | E>;\n' +
    '/** @deprecated use {@link scheduled} and {@link concatAll} (e.g. `scheduled([[a, b, c], source], scheduler).pipe(concatAll())`) */\n' +
    'export declare function startWith<T, D, E, F>(v1: D, v2: E, v3: F, scheduler: SchedulerLike): OperatorFunction<T, T | D | E | F>;\n' +
    '/** @deprecated use {@link scheduled} and {@link concatAll} (e.g. `scheduled([[a, b, c], source], scheduler).pipe(concatAll())`) */\n' +
    'export declare function startWith<T, D, E, F, G>(v1: D, v2: E, v3: F, v4: G, scheduler: SchedulerLike): OperatorFunction<T, T | D | E | F | G>;\n' +
    '/** @deprecated use {@link scheduled} and {@link concatAll} (e.g. `scheduled([[a, b, c], source], scheduler).pipe(concatAll())`) */\n' +
    'export declare function startWith<T, D, E, F, G, H>(v1: D, v2: E, v3: F, v4: G, v5: H, scheduler: SchedulerLike): OperatorFunction<T, T | D | E | F | G | H>;\n' +
    '/** @deprecated use {@link scheduled} and {@link concatAll} (e.g. `scheduled([[a, b, c], source], scheduler).pipe(concatAll())`) */\n' +
    'export declare function startWith<T, D, E, F, G, H, I>(v1: D, v2: E, v3: F, v4: G, v5: H, v6: I, scheduler: SchedulerLike): OperatorFunction<T, T | D | E | F | G | H | I>;\n' +
    'export declare function startWith<T, D>(v1: D): OperatorFunction<T, T | D>;\n' +
    'export declare function startWith<T, D, E>(v1: D, v2: E): OperatorFunction<T, T | D | E>;\n' +
    'export declare function startWith<T, D, E, F>(v1: D, v2: E, v3: F): OperatorFunction<T, T | D | E | F>;\n' +
    'export declare function startWith<T, D, E, F, G>(v1: D, v2: E, v3: F, v4: G): OperatorFunction<T, T | D | E | F | G>;\n' +
    'export declare function startWith<T, D, E, F, G, H>(v1: D, v2: E, v3: F, v4: G, v5: H): OperatorFunction<T, T | D | E | F | G | H>;\n' +
    'export declare function startWith<T, D, E, F, G, H, I>(v1: D, v2: E, v3: F, v4: G, v5: H, v6: I): OperatorFunction<T, T | D | E | F | G | H | I>;\n' +
    'export declare function startWith<T, D = T>(...array: D[]): OperatorFunction<T, T | D>;\n' +
    '/** @deprecated use {@link scheduled} and {@link concatAll} (e.g. `scheduled([[a, b, c], source], scheduler).pipe(concatAll())`) */\n' +
    'export declare function startWith<T, D = T>(...array: Array<D | SchedulerLike>): OperatorFunction<T, T | D>;\n',
  timestamp: 1669130813115
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/subscribeOn.d.ts, [object Object]',
  timestamp: 1669130813122
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/subscribeOn.d.ts: import { MonoTypeOperatorFunction, SchedulerLike } from '../types';\n" +
    '/**\n' +
    ' * Asynchronously subscribes Observers to this Observable on the specified {@link SchedulerLike}.\n' +
    ' *\n' +
    ' * With `subscribeOn` you can decide what type of scheduler a specific Observable will be using when it is subscribed to.\n' +
    ' *\n' +
    ' * Schedulers control the speed and order of emissions to observers from an Observable stream.\n' +
    ' *\n' +
    ' * ![](subscribeOn.png)\n' +
    ' *\n' +
    ' * ## Example\n' +
    ' * Given the following code:\n' +
    ' * ```javascript\n' +
    " * import { of, merge } from 'rxjs';\n" +
    ' *\n' +
    ' * const a = of(1, 2, 3, 4);\n' +
    ' * const b = of(5, 6, 7, 8, 9);\n' +
    ' * merge(a, b).subscribe(console.log);\n' +
    ' * ```\n' +
    ' *\n' +
    ' * Both Observable `a` and `b` will emit their values directly and synchronously once they are subscribed to.\n' +
    ' * This will result in the output of `1 2 3 4 5 6 7 8 9`.\n' +
    ' *\n' +
    ' * But if we instead us the `subscribeOn` operator declaring that we want to use the {@link asyncScheduler} for values emited by Observable `a`:\n' +
    ' * ```javascript\n' +
    " * import { of, merge, asyncScheduler } from 'rxjs';\n" +
    " * import { subscribeOn } from 'rxjs/operators';\n" +
    ' *\n' +
    ' * const a = of(1, 2, 3, 4).pipe(subscribeOn(asyncScheduler));\n' +
    ' * const b = of(5, 6, 7, 8, 9);\n' +
    ' * merge(a, b).subscribe(console.log);\n' +
    ' * ```\n' +
    ' *\n' +
    ' * The output will instead be `5 6 7 8 9 1 2 3 4`.\n' +
    ' * The reason for this is that Observable `b` emits its values directly and synchronously like before\n' +
    ' * but the emissions from `a` are scheduled on the event loop because we are now using the {@link asyncScheduler} for that specific Observable.\n' +
    ' *\n' +
    ' * @param {SchedulerLike} scheduler - The {@link SchedulerLike} to perform subscription actions on.\n' +
    ' * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified {@link SchedulerLike}.\n' +
    ' .\n' +
    ' * @method subscribeOn\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function subscribeOn<T>(scheduler: SchedulerLike, delay?: number): MonoTypeOperatorFunction<T>;\n',
  timestamp: 1669130813123
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/switchAll.d.ts, [object Object]',
  timestamp: 1669130813125
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/switchAll.d.ts: import { OperatorFunction, ObservableInput } from '../types';\n" +
    'export declare function switchAll<T>(): OperatorFunction<ObservableInput<T>, T>;\n' +
    'export declare function switchAll<R>(): OperatorFunction<any, R>;\n',
  timestamp: 1669130813125
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/switchMap.d.ts, [object Object]',
  timestamp: 1669130813126
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/switchMap.d.ts: import { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\n" +
    'export declare function switchMap<T, O extends ObservableInput<any>>(project: (value: T, index: number) => O): OperatorFunction<T, ObservedValueOf<O>>;\n' +
    '/** @deprecated resultSelector is no longer supported, use inner map instead */\n' +
    'export declare function switchMap<T, O extends ObservableInput<any>>(project: (value: T, index: number) => O, resultSelector: undefined): OperatorFunction<T, ObservedValueOf<O>>;\n' +
    '/** @deprecated resultSelector is no longer supported, use inner map instead */\n' +
    'export declare function switchMap<T, R, O extends ObservableInput<any>>(project: (value: T, index: number) => O, resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n',
  timestamp: 1669130813126
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/switchMapTo.d.ts, [object Object]',
  timestamp: 1669130813127
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/switchMapTo.d.ts: import { ObservableInput, OperatorFunction } from '../types';\n" +
    'export declare function switchMapTo<R>(observable: ObservableInput<R>): OperatorFunction<any, R>;\n' +
    '/** @deprecated resultSelector is no longer supported. Switch to using switchMap with an inner map */\n' +
    'export declare function switchMapTo<T, R>(observable: ObservableInput<R>, resultSelector: undefined): OperatorFunction<T, R>;\n' +
    '/** @deprecated resultSelector is no longer supported. Switch to using switchMap with an inner map */\n' +
    'export declare function switchMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n',
  timestamp: 1669130813128
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/take.d.ts, [object Object]',
  timestamp: 1669130813129
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/take.d.ts: import { MonoTypeOperatorFunction } from '../types';\n" +
    '/**\n' +
    ' * Emits only the first `count` values emitted by the source Observable.\n' +
    ' *\n' +
    ' * <span class="informal">Takes the first `count` values from the source, then\n' +
    ' * completes.</span>\n' +
    ' *\n' +
    ' * ![](take.png)\n' +
    ' *\n' +
    ' * `take` returns an Observable that emits only the first `count` values emitted\n' +
    ' * by the source Observable. If the source emits fewer than `count` values then\n' +
    ' * all of its values are emitted. After that, it completes, regardless if the\n' +
    ' * source completes.\n' +
    ' *\n' +
    ' * ## Example\n' +
    ' * Take the first 5 seconds of an infinite 1-second interval Observable\n' +
    ' * ```ts\n' +
    " * import { interval } from 'rxjs';\n" +
    " * import { take } from 'rxjs/operators';\n" +
    ' *\n' +
    ' * const intervalCount = interval(1000);\n' +
    ' * const takeFive = intervalCount.pipe(take(5));\n' +
    ' * takeFive.subscribe(x => console.log(x));\n' +
    ' *\n' +
    ' * // Logs:\n' +
    ' * // 0\n' +
    ' * // 1\n' +
    ' * // 2\n' +
    ' * // 3\n' +
    ' * // 4\n' +
    ' * ```\n' +
    ' *\n' +
    ' * @see {@link takeLast}\n' +
    ' * @see {@link takeUntil}\n' +
    ' * @see {@link takeWhile}\n' +
    ' * @see {@link skip}\n' +
    ' *\n' +
    ' * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n' +
    " * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n" +
    ' *\n' +
    ' * @param {number} count The maximum number of `next` values to emit.\n' +
    ' * @return {Observable<T>} An Observable that emits only the first `count`\n' +
    ' * values emitted by the source Observable, or all of the values from the source\n' +
    ' * if the source emits fewer than `count` values.\n' +
    ' * @method take\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function take<T>(count: number): MonoTypeOperatorFunction<T>;\n',
  timestamp: 1669130813129
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/takeLast.d.ts, [object Object]',
  timestamp: 1669130813130
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/takeLast.d.ts: import { MonoTypeOperatorFunction } from '../types';\n" +
    '/**\n' +
    ' * Emits only the last `count` values emitted by the source Observable.\n' +
    ' *\n' +
    ' * <span class="informal">Remembers the latest `count` values, then emits those\n' +
    ' * only when the source completes.</span>\n' +
    ' *\n' +
    ' * ![](takeLast.png)\n' +
    ' *\n' +
    ' * `takeLast` returns an Observable that emits at most the last `count` values\n' +
    ' * emitted by the source Observable. If the source emits fewer than `count`\n' +
    ' * values then all of its values are emitted. This operator must wait until the\n' +
    ' * `complete` notification emission from the source in order to emit the `next`\n' +
    ' * values on the output Observable, because otherwise it is impossible to know\n' +
    ' * whether or not more values will be emitted on the source. For this reason,\n' +
    ' * all values are emitted synchronously, followed by the complete notification.\n' +
    ' *\n' +
    ' * ## Example\n' +
    ' * Take the last 3 values of an Observable with many values\n' +
    ' * ```ts\n' +
    " * import { range } from 'rxjs';\n" +
    " * import { takeLast } from 'rxjs/operators';\n" +
    ' *\n' +
    ' * const many = range(1, 100);\n' +
    ' * const lastThree = many.pipe(takeLast(3));\n' +
    ' * lastThree.subscribe(x => console.log(x));\n' +
    ' * ```\n' +
    ' *\n' +
    ' * @see {@link take}\n' +
    ' * @see {@link takeUntil}\n' +
    ' * @see {@link takeWhile}\n' +
    ' * @see {@link skip}\n' +
    ' *\n' +
    ' * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n' +
    " * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n" +
    ' *\n' +
    ' * @param {number} count The maximum number of values to emit from the end of\n' +
    ' * the sequence of values emitted by the source Observable.\n' +
    ' * @return {Observable<T>} An Observable that emits at most the last count\n' +
    ' * values emitted by the source Observable.\n' +
    ' * @method takeLast\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function takeLast<T>(count: number): MonoTypeOperatorFunction<T>;\n',
  timestamp: 1669130813130
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/takeUntil.d.ts, [object Object]',
  timestamp: 1669130813131
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/takeUntil.d.ts: import { Observable } from '../Observable';\n" +
    "import { MonoTypeOperatorFunction } from '../types';\n" +
    '/**\n' +
    ' * Emits the values emitted by the source Observable until a `notifier`\n' +
    ' * Observable emits a value.\n' +
    ' *\n' +
    ' * <span class="informal">Lets values pass until a second Observable,\n' +
    ' * `notifier`, emits a value. Then, it completes.</span>\n' +
    ' *\n' +
    ' * ![](takeUntil.png)\n' +
    ' *\n' +
    ' * `takeUntil` subscribes and begins mirroring the source Observable. It also\n' +
    ' * monitors a second Observable, `notifier` that you provide. If the `notifier`\n' +
    ' * emits a value, the output Observable stops mirroring the source Observable\n' +
    " * and completes. If the `notifier` doesn't emit any value and completes\n" +
    ' * then `takeUntil` will pass all values.\n' +
    ' *\n' +
    ' * ## Example\n' +
    ' * Tick every second until the first click happens\n' +
    ' * ```ts\n' +
    " * import { fromEvent, interval } from 'rxjs';\n" +
    " * import { takeUntil } from 'rxjs/operators';\n" +
    ' *\n' +
    ' * const source = interval(1000);\n' +
    " * const clicks = fromEvent(document, 'click');\n" +
    ' * const result = source.pipe(takeUntil(clicks));\n' +
    ' * result.subscribe(x => console.log(x));\n' +
    ' * ```\n' +
    ' *\n' +
    ' * @see {@link take}\n' +
    ' * @see {@link takeLast}\n' +
    ' * @see {@link takeWhile}\n' +
    ' * @see {@link skip}\n' +
    ' *\n' +
    ' * @param {Observable} notifier The Observable whose first emitted value will\n' +
    ' * cause the output Observable of `takeUntil` to stop emitting values from the\n' +
    ' * source Observable.\n' +
    ' * @return {Observable<T>} An Observable that emits the values from the source\n' +
    ' * Observable until such time as `notifier` emits its first value.\n' +
    ' * @method takeUntil\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function takeUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T>;\n',
  timestamp: 1669130813131
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/takeWhile.d.ts, [object Object]',
  timestamp: 1669130813132
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/takeWhile.d.ts: import { OperatorFunction, MonoTypeOperatorFunction } from '../types';\n" +
    'export declare function takeWhile<T, S extends T>(predicate: (value: T, index: number) => value is S): OperatorFunction<T, S>;\n' +
    'export declare function takeWhile<T, S extends T>(predicate: (value: T, index: number) => value is S, inclusive: false): OperatorFunction<T, S>;\n' +
    'export declare function takeWhile<T>(predicate: (value: T, index: number) => boolean, inclusive?: boolean): MonoTypeOperatorFunction<T>;\n',
  timestamp: 1669130813133
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/tap.d.ts, [object Object]',
  timestamp: 1669130813133
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/tap.d.ts: import { MonoTypeOperatorFunction, PartialObserver } from '../types';\n" +
    '/** @deprecated Use an observer instead of a complete callback */\n' +
    'export declare function tap<T>(next: null | undefined, error: null | undefined, complete: () => void): MonoTypeOperatorFunction<T>;\n' +
    '/** @deprecated Use an observer instead of an error callback */\n' +
    'export declare function tap<T>(next: null | undefined, error: (error: any) => void, complete?: () => void): MonoTypeOperatorFunction<T>;\n' +
    '/** @deprecated Use an observer instead of a complete callback */\n' +
    'export declare function tap<T>(next: (value: T) => void, error: null | undefined, complete: () => void): MonoTypeOperatorFunction<T>;\n' +
    'export declare function tap<T>(next?: (x: T) => void, error?: (e: any) => void, complete?: () => void): MonoTypeOperatorFunction<T>;\n' +
    'export declare function tap<T>(observer: PartialObserver<T>): MonoTypeOperatorFunction<T>;\n',
  timestamp: 1669130813134
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/throttle.d.ts, [object Object]',
  timestamp: 1669130813135
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/throttle.d.ts: import { MonoTypeOperatorFunction, SubscribableOrPromise } from '../types';\n" +
    'export interface ThrottleConfig {\n' +
    '    leading?: boolean;\n' +
    '    trailing?: boolean;\n' +
    '}\n' +
    'export declare const defaultThrottleConfig: ThrottleConfig;\n' +
    '/**\n' +
    ' * Emits a value from the source Observable, then ignores subsequent source\n' +
    ' * values for a duration determined by another Observable, then repeats this\n' +
    ' * process.\n' +
    ' *\n' +
    ` * <span class="informal">It's like {@link throttleTime}, but the silencing\n` +
    ' * duration is determined by a second Observable.</span>\n' +
    ' *\n' +
    ' * ![](throttle.png)\n' +
    ' *\n' +
    ' * `throttle` emits the source Observable values on the output Observable\n' +
    ' * when its internal timer is disabled, and ignores source values when the timer\n' +
    ' * is enabled. Initially, the timer is disabled. As soon as the first source\n' +
    ' * value arrives, it is forwarded to the output Observable, and then the timer\n' +
    ' * is enabled by calling the `durationSelector` function with the source value,\n' +
    ' * which returns the "duration" Observable. When the duration Observable emits a\n' +
    ' * value or completes, the timer is disabled, and this process repeats for the\n' +
    ' * next source value.\n' +
    ' *\n' +
    ' * ## Example\n' +
    ' * Emit clicks at a rate of at most one click per second\n' +
    ' * ```ts\n' +
    " * import { fromEvent } from 'rxjs';\n" +
    " * import { throttle } from 'rxjs/operators';\n" +
    ' *\n' +
    " * const clicks = fromEvent(document, 'click');\n" +
    ' * const result = clicks.pipe(throttle(ev => interval(1000)));\n' +
    ' * result.subscribe(x => console.log(x));\n' +
    ' * ```\n' +
    ' *\n' +
    ' * @see {@link audit}\n' +
    ' * @see {@link debounce}\n' +
    ' * @see {@link delayWhen}\n' +
    ' * @see {@link sample}\n' +
    ' * @see {@link throttleTime}\n' +
    ' *\n' +
    ' * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n' +
    ' * that receives a value from the source Observable, for computing the silencing\n' +
    ' * duration for each source value, returned as an Observable or a Promise.\n' +
    ' * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n' +
    ' * to `{ leading: true, trailing: false }`.\n' +
    ' * @return {Observable<T>} An Observable that performs the throttle operation to\n' +
    ' * limit the rate of emissions from the source.\n' +
    ' * @method throttle\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function throttle<T>(durationSelector: (value: T) => SubscribableOrPromise<any>, config?: ThrottleConfig): MonoTypeOperatorFunction<T>;\n',
  timestamp: 1669130813135
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/throttleTime.d.ts, [object Object]',
  timestamp: 1669130813136
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/throttleTime.d.ts: import { ThrottleConfig } from './throttle';\n" +
    "import { MonoTypeOperatorFunction, SchedulerLike } from '../types';\n" +
    '/**\n' +
    ' * Emits a value from the source Observable, then ignores subsequent source\n' +
    ' * values for `duration` milliseconds, then repeats this process.\n' +
    ' *\n' +
    ' * <span class="informal">Lets a value pass, then ignores source values for the\n' +
    ' * next `duration` milliseconds.</span>\n' +
    ' *\n' +
    ' * ![](throttleTime.png)\n' +
    ' *\n' +
    ' * `throttleTime` emits the source Observable values on the output Observable\n' +
    ' * when its internal timer is disabled, and ignores source values when the timer\n' +
    ' * is enabled. Initially, the timer is disabled. As soon as the first source\n' +
    ' * value arrives, it is forwarded to the output Observable, and then the timer\n' +
    ' * is enabled. After `duration` milliseconds (or the time unit determined\n' +
    ' * internally by the optional `scheduler`) has passed, the timer is disabled,\n' +
    ' * and this process repeats for the next source value. Optionally takes a\n' +
    ' * {@link SchedulerLike} for managing timers.\n' +
    ' *\n' +
    ' * ## Examples\n' +
    ' *\n' +
    ' * #### Limit click rate\n' +
    ' *\n' +
    ' * Emit clicks at a rate of at most one click per second\n' +
    ' * ```ts\n' +
    " * import { fromEvent } from 'rxjs';\n" +
    " * import { throttleTime } from 'rxjs/operators';\n" +
    ' *\n' +
    " * const clicks = fromEvent(document, 'click');\n" +
    ' * const result = clicks.pipe(throttleTime(1000));\n' +
    ' * result.subscribe(x => console.log(x));\n' +
    ' * ```\n' +
    ' *\n' +
    ' * #### Double Click\n' +
    ' *\n' +
    ' * The following example only emits clicks which happen within a subsequent\n' +
    ' * delay of 400ms of the previous click. This for example can emulate a double\n' +
    ' * click. It makes use of the `trailing` parameter of the throttle configuration.\n' +
    ' *\n' +
    ' * ```ts\n' +
    " * import { fromEvent, asyncScheduler } from 'rxjs';\n" +
    " * import { throttleTime, withLatestFrom } from 'rxjs/operators';\n" +
    ' *\n' +
    ' * // defaultThottleConfig = { leading: true, trailing: false }\n' +
    ' * const throttleConfig = {\n' +
    ' *   leading: false,\n' +
    ' *   trailing: true\n' +
    ' * }\n' +
    ' *\n' +
    " * const click = fromEvent(document, 'click');\n" +
    ' * const doubleClick = click.pipe(\n' +
    ' *   throttleTime(400, asyncScheduler, throttleConfig)\n' +
    ' * );\n' +
    ' *\n' +
    ' * doubleClick.subscribe((throttleValue: Event) => {\n' +
    ' *   console.log(`Double-clicked! Timestamp: ${throttleValue.timeStamp}`);\n' +
    ' * });\n' +
    ' * ```\n' +
    ' *\n' +
    ' * If you enable the `leading` parameter in this example, the output would be the primary click and\n' +
    ' * the double click, but restricts additional clicks within 400ms.\n' +
    ' *\n' +
    ' * @see {@link auditTime}\n' +
    ' * @see {@link debounceTime}\n' +
    ' * @see {@link delay}\n' +
    ' * @see {@link sampleTime}\n' +
    ' * @see {@link throttle}\n' +
    ' *\n' +
    ' * @param {number} duration Time to wait before emitting another value after\n' +
    ' * emitting the last value, measured in milliseconds or the time unit determined\n' +
    ' * internally by the optional `scheduler`.\n' +
    ' * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\n' +
    ' * managing the timers that handle the throttling.\n' +
    ' * @param {Object} config a configuration object to define `leading` and\n' +
    ' * `trailing` behavior. Defaults to `{ leading: true, trailing: false }`.\n' +
    ' * @return {Observable<T>} An Observable that performs the throttle operation to\n' +
    ' * limit the rate of emissions from the source.\n' +
    ' * @method throttleTime\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function throttleTime<T>(duration: number, scheduler?: SchedulerLike, config?: ThrottleConfig): MonoTypeOperatorFunction<T>;\n',
  timestamp: 1669130813137
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130813137
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130813138
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/throttle.ts:false',
  timestamp: 1669130813138
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/throttle.tsx:false',
  timestamp: 1669130813138
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/throttle.d.ts:true',
  timestamp: 1669130813138
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/throwIfEmpty.d.ts, [object Object]',
  timestamp: 1669130813138
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/throwIfEmpty.d.ts: import { MonoTypeOperatorFunction } from '../types';\n" +
    '/**\n' +
    ' * If the source observable completes without emitting a value, it will emit\n' +
    ' * an error. The error will be created at that time by the optional\n' +
    ' * `errorFactory` argument, otherwise, the error will be {@link EmptyError}.\n' +
    ' *\n' +
    ' * ![](throwIfEmpty.png)\n' +
    ' *\n' +
    ' * ## Example\n' +
    ' * ```ts\n' +
    " * import { fromEvent, timer } from 'rxjs';\n" +
    " * import { throwIfEmpty, takeUntil } from 'rxjs/operators';\n" +
    ' *\n' +
    " * const click$ = fromEvent(document, 'click');\n" +
    ' *\n' +
    ' * click$.pipe(\n' +
    ' *   takeUntil(timer(1000)),\n' +
    ' *   throwIfEmpty(\n' +
    " *     () => new Error('the document was not clicked within 1 second')\n" +
    ' *   ),\n' +
    ' * )\n' +
    ' * .subscribe({\n' +
    " *   next() { console.log('The button was clicked'); },\n" +
    ' *   error(err) { console.error(err); }\n' +
    ' * });\n' +
    ' * ```\n' +
    ' *\n' +
    ' * @param errorFactory A factory function called to produce the\n' +
    ' * error to be thrown when the source observable completes without emitting a\n' +
    ' * value.\n' +
    ' */\n' +
    'export declare function throwIfEmpty<T>(errorFactory?: (() => any)): MonoTypeOperatorFunction<T>;\n',
  timestamp: 1669130813138
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/timeInterval.d.ts, [object Object]',
  timestamp: 1669130813138
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/timeInterval.d.ts: import { SchedulerLike, OperatorFunction } from '../types';\n" +
    '/**\n' +
    ' *\n' +
    ' * Emits an object containing the current value, and the time that has\n' +
    ' * passed between emitting the current value and the previous value, which is\n' +
    " * calculated by using the provided `scheduler`'s `now()` method to retrieve\n" +
    ' * the current time at each emission, then calculating the difference. The `scheduler`\n' +
    ' * defaults to {@link asyncScheduler}, so by default, the `interval` will be in\n' +
    ' * milliseconds.\n' +
    ' *\n' +
    ' * <span class="informal">Convert an Observable that emits items into one that\n' +
    ' * emits indications of the amount of time elapsed between those emissions.</span>\n' +
    ' *\n' +
    ' * ![](timeinterval.png)\n' +
    ' *\n' +
    ' * ## Examples\n' +
    ' * Emit inteval between current value with the last value\n' +
    ' *\n' +
    ' * ```ts\n' +
    ' * const seconds = interval(1000);\n' +
    ' *\n' +
    ' * seconds.pipe(timeInterval())\n' +
    ' * .subscribe(\n' +
    ' *     value => console.log(value),\n' +
    ' *     err => console.log(err),\n' +
    ' * );\n' +
    ' *\n' +
    ' * seconds.pipe(timeout(900))\n' +
    ' * .subscribe(\n' +
    ' *     value => console.log(value),\n' +
    ' *     err => console.log(err),\n' +
    ' * );\n' +
    ' *\n' +
    ' * // NOTE: The values will never be this precise,\n' +
    ' * // intervals created with `interval` or `setInterval`\n' +
    ' * // are non-deterministic.\n' +
    ' *\n' +
    ' * // {value: 0, interval: 1000}\n' +
    ' * // {value: 1, interval: 1000}\n' +
    ' * // {value: 2, interval: 1000}\n' +
    ' * ```\n' +
    ' *\n' +
    ' * @param {SchedulerLike} [scheduler] Scheduler used to get the current time.\n' +
    ' * @return {Observable<{ interval: number, value: T }>} Observable that emit infomation about value and interval\n' +
    ' * @method timeInterval\n' +
    ' */\n' +
    'export declare function timeInterval<T>(scheduler?: SchedulerLike): OperatorFunction<T, TimeInterval<T>>;\n' +
    '/**\n' +
    ' * @deprecated exposed API, use as interface only.\n' +
    ' */\n' +
    'export declare class TimeInterval<T> {\n' +
    '    value: T;\n' +
    '    interval: number;\n' +
    '    constructor(value: T, interval: number);\n' +
    '}\n',
  timestamp: 1669130813139
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/timeout.d.ts, [object Object]',
  timestamp: 1669130813139
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/timeout.d.ts: import { MonoTypeOperatorFunction, SchedulerLike } from '../types';\n" +
    '/**\n' +
    ' *\n' +
    ' * Errors if Observable does not emit a value in given time span.\n' +
    ' *\n' +
    ` * <span class="informal">Timeouts on Observable that doesn't emit values fast enough.</span>\n` +
    ' *\n' +
    ' * ![](timeout.png)\n' +
    ' *\n' +
    ' * `timeout` operator accepts as an argument either a number or a Date.\n' +
    ' *\n' +
    ' * If number was provided, it returns an Observable that behaves like a source\n' +
    ' * Observable, unless there is a period of time where there is no value emitted.\n' +
    ' * So if you provide `100` as argument and first value comes after 50ms from\n' +
    ' * the moment of subscription, this value will be simply re-emitted by the resulting\n' +
    ' * Observable. If however after that 100ms passes without a second value being emitted,\n' +
    ' * stream will end with an error and source Observable will be unsubscribed.\n' +
    ' * These checks are performed throughout whole lifecycle of Observable - from the moment\n' +
    ' * it was subscribed to, until it completes or errors itself. Thus every value must be\n' +
    ' * emitted within specified period since previous value.\n' +
    ' *\n' +
    ' * If provided argument was Date, returned Observable behaves differently. It throws\n' +
    ' * if Observable did not complete before provided Date. This means that periods between\n' +
    ' * emission of particular values do not matter in this case. If Observable did not complete\n' +
    ' * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n' +
    ' * stream behaves just as source Observable.\n' +
    ' *\n' +
    ' * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n' +
    ' * when returned Observable will check if source stream emitted value or completed.\n' +
    ' *\n' +
    ' * ## Examples\n' +
    ' * Check if ticks are emitted within certain timespan\n' +
    ' * ```ts\n' +
    " * import { interval } from 'rxjs';\n" +
    " * import { timeout } from 'rxjs/operators';\n" +
    ' *\n' +
    ' * const seconds = interval(1000);\n' +
    ' *\n' +
    " * seconds.pipe(timeout(1100))      // Let's use bigger timespan to be safe,\n" +
    ' *                                  // since `interval` might fire a bit later then scheduled.\n' +
    ' * .subscribe(\n' +
    ' *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n' +
    ' *     err => console.log(err),     // Will never be called.\n' +
    ' * );\n' +
    ' *\n' +
    ' * seconds.pipe(timeout(900))\n' +
    ' * .subscribe(\n' +
    ' *     value => console.log(value), // Will never be called.\n' +
    ' *     err => console.log(err),     // Will emit error before even first value is emitted,\n' +
    ' *                                  // since it did not arrive within 900ms period.\n' +
    ' * );\n' +
    ' * ```\n' +
    ' *\n' +
    ' * Use Date to check if Observable completed\n' +
    ' * ```ts\n' +
    " * import { interval } from 'rxjs';\n" +
    " * import { timeout } from 'rxjs/operators';\n" +
    ' *\n' +
    ' * const seconds = interval(1000);\n' +
    ' *\n' +
    ' * seconds.pipe(\n' +
    ' *   timeout(new Date("December 17, 2020 03:24:00")),\n' +
    ' * )\n' +
    ' * .subscribe(\n' +
    ' *     value => console.log(value), // Will emit values as regular `interval` would\n' +
    ' *                                  // until December 17, 2020 at 03:24:00.\n' +
    ' *     err => console.log(err)      // On December 17, 2020 at 03:24:00 it will emit an error,\n' +
    ' *                                  // since Observable did not complete by then.\n' +
    ' * );\n' +
    ' * ```\n' +
    ' * @see {@link timeoutWith}\n' +
    ' *\n' +
    ' * @param {number|Date} due Number specifying period within which Observable must emit values\n' +
    ' *                          or Date specifying before when Observable should complete\n' +
    ' * @param {SchedulerLike} [scheduler] Scheduler controlling when timeout checks occur.\n' +
    ' * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n' +
    ' * @method timeout\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function timeout<T>(due: number | Date, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n',
  timestamp: 1669130813139
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/timeoutWith.d.ts, [object Object]',
  timestamp: 1669130813144
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/timeoutWith.d.ts: import { ObservableInput, OperatorFunction, SchedulerLike } from '../types';\n" +
    'export declare function timeoutWith<T, R>(due: number | Date, withObservable: ObservableInput<R>, scheduler?: SchedulerLike): OperatorFunction<T, T | R>;\n',
  timestamp: 1669130813144
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/timestamp.d.ts, [object Object]',
  timestamp: 1669130813144
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/timestamp.d.ts: import { OperatorFunction, SchedulerLike, Timestamp as TimestampInterface } from '../types';\n" +
    '/**\n' +
    ' * Attaches a timestamp to each item emitted by an observable indicating when it was emitted\n' +
    ' *\n' +
    ' * The `timestamp` operator maps the *source* observable stream to an object of type\n' +
    ' * `{value: T, timestamp: R}`. The properties are generically typed. The `value` property contains the value\n' +
    ' * and type of the *source* observable. The `timestamp` is generated by the schedulers `now` function. By\n' +
    ' * default it uses the *async* scheduler which simply returns `Date.now()` (milliseconds since 1970/01/01\n' +
    ' * 00:00:00:000) and therefore is of type `number`.\n' +
    ' *\n' +
    ' * ![](timestamp.png)\n' +
    ' *\n' +
    ' * ## Example\n' +
    ' *\n' +
    ' * In this example there is a timestamp attached to the documents click event.\n' +
    ' *\n' +
    ' * ```ts\n' +
    " * import { fromEvent } from 'rxjs';\n" +
    " * import { timestamp } from 'rxjs/operators';\n" +
    ' *\n' +
    " * const clickWithTimestamp = fromEvent(document, 'click').pipe(\n" +
    ' *   timestamp()\n' +
    ' * );\n' +
    ' *\n' +
    ' * // Emits data of type {value: MouseEvent, timestamp: number}\n' +
    ' * clickWithTimestamp.subscribe(data => {\n' +
    ' *   console.log(data);\n' +
    ' * });\n' +
    ' * ```\n' +
    ' *\n' +
    ' * @param scheduler\n' +
    ' * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n' +
    ' * @method timestamp\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function timestamp<T>(scheduler?: SchedulerLike): OperatorFunction<T, Timestamp<T>>;\n' +
    'export declare class Timestamp<T> implements TimestampInterface<T> {\n' +
    '    value: T;\n' +
    '    timestamp: number;\n' +
    '    constructor(value: T, timestamp: number);\n' +
    '}\n',
  timestamp: 1669130813144
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/toArray.d.ts, [object Object]',
  timestamp: 1669130813145
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/toArray.d.ts: import { OperatorFunction } from '../types';\n" +
    '/**\n' +
    ' * Collects all source emissions and emits them as an array when the source completes.\n' +
    ' *\n' +
    ' * <span class="informal">Get all values inside an array when the source completes</span>\n' +
    ' *\n' +
    ' * ![](toArray.png)\n' +
    ' *\n' +
    ' * `toArray` will wait until the source Observable completes before emitting\n' +
    ' * the array containing all emissions. When the source Observable errors no\n' +
    ' * array will be emitted.\n' +
    ' *\n' +
    ' *  ## Example\n' +
    ' * ```ts\n' +
    " * import { interval } from 'rxjs';\n" +
    " * import { toArray, take } from 'rxjs/operators';\n" +
    ' *\n' +
    ' * const source = interval(1000);\n' +
    ' * const example = source.pipe(\n' +
    ' *   take(10),\n' +
    ' *   toArray()\n' +
    ' * );\n' +
    ' *\n' +
    ' * const subscribe = example.subscribe(val => console.log(val));\n' +
    ' *\n' +
    ' * // output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n' +
    ' *\n' +
    ' * ```\n' +
    '* @return An array from an observable sequence.\n' +
    '* @method toArray\n' +
    '* @owner Observable\n' +
    '*/\n' +
    'export declare function toArray<T>(): OperatorFunction<T, T[]>;\n',
  timestamp: 1669130813145
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/window.d.ts, [object Object]',
  timestamp: 1669130813146
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/window.d.ts: import { Observable } from '../Observable';\n" +
    "import { OperatorFunction } from '../types';\n" +
    '/**\n' +
    ' * Branch out the source Observable values as a nested Observable whenever\n' +
    ' * `windowBoundaries` emits.\n' +
    ' *\n' +
    ` * <span class="informal">It's like {@link buffer}, but emits a nested Observable\n` +
    ' * instead of an array.</span>\n' +
    ' *\n' +
    ' * ![](window.png)\n' +
    ' *\n' +
    ' * Returns an Observable that emits windows of items it collects from the source\n' +
    ' * Observable. The output Observable emits connected, non-overlapping\n' +
    ' * windows. It emits the current window and opens a new one whenever the\n' +
    ' * Observable `windowBoundaries` emits an item. Because each window is an\n' +
    ' * Observable, the output is a higher-order Observable.\n' +
    ' *\n' +
    ' * ## Example\n' +
    ' * In every window of 1 second each, emit at most 2 click events\n' +
    ' * ```ts\n' +
    " * import { fromEvent, interval } from 'rxjs';\n" +
    " * import { window, mergeAll, map, take } from 'rxjs/operators';\n" +
    ' *\n' +
    " *  const clicks = fromEvent(document, 'click');\n" +
    ' *  const sec = interval(1000);\n' +
    ' *  const result = clicks.pipe(\n' +
    ' *      window(sec),\n' +
    ' *      map(win => win.pipe(take(2))), // each window has at most 2 emissions\n' +
    ' *      mergeAll(),              // flatten the Observable-of-Observables\n' +
    ' *  );\n' +
    ' *  result.subscribe(x => console.log(x));\n' +
    ' * ```\n' +
    ' * @see {@link windowCount}\n' +
    ' * @see {@link windowTime}\n' +
    ' * @see {@link windowToggle}\n' +
    ' * @see {@link windowWhen}\n' +
    ' * @see {@link buffer}\n' +
    ' *\n' +
    ' * @param {Observable<any>} windowBoundaries An Observable that completes the\n' +
    ' * previous window and starts a new window.\n' +
    ' * @return {Observable<Observable<T>>} An Observable of windows, which are\n' +
    ' * Observables emitting values of the source Observable.\n' +
    ' * @method window\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function window<T>(windowBoundaries: Observable<any>): OperatorFunction<T, Observable<T>>;\n',
  timestamp: 1669130813146
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/windowCount.d.ts, [object Object]',
  timestamp: 1669130813147
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/windowCount.d.ts: import { Observable } from '../Observable';\n" +
    "import { OperatorFunction } from '../types';\n" +
    '/**\n' +
    ' * Branch out the source Observable values as a nested Observable with each\n' +
    ' * nested Observable emitting at most `windowSize` values.\n' +
    ' *\n' +
    ` * <span class="informal">It's like {@link bufferCount}, but emits a nested\n` +
    ' * Observable instead of an array.</span>\n' +
    ' *\n' +
    ' * ![](windowCount.png)\n' +
    ' *\n' +
    ' * Returns an Observable that emits windows of items it collects from the source\n' +
    ' * Observable. The output Observable emits windows every `startWindowEvery`\n' +
    ' * items, each containing no more than `windowSize` items. When the source\n' +
    ' * Observable completes or encounters an error, the output Observable emits\n' +
    ' * the current window and propagates the notification from the source\n' +
    ' * Observable. If `startWindowEvery` is not provided, then new windows are\n' +
    ' * started immediately at the start of the source and when each window completes\n' +
    ' * with size `windowSize`.\n' +
    ' *\n' +
    ' * ## Examples\n' +
    ' * Ignore every 3rd click event, starting from the first one\n' +
    ' * ```ts\n' +
    " * import { fromEvent } from 'rxjs';\n" +
    " * import { windowCount, map, mergeAll, skip } from 'rxjs/operators';\n" +
    ' *\n' +
    " * const clicks = fromEvent(document, 'click');\n" +
    ' * const result = clicks.pipe(\n' +
    ' *   windowCount(3),\n' +
    ' *   map(win => win.pipe(skip(1))), // skip first of every 3 clicks\n' +
    ' *   mergeAll()                     // flatten the Observable-of-Observables\n' +
    ' * );\n' +
    ' * result.subscribe(x => console.log(x));\n' +
    ' * ```\n' +
    ' *\n' +
    ' * Ignore every 3rd click event, starting from the third one\n' +
    ' * ```ts\n' +
    " * import { fromEvent } from 'rxjs';\n" +
    " * import { windowCount, mergeAll } from 'rxjs/operators';\n" +
    ' *\n' +
    " * const clicks = fromEvent(document, 'click');\n" +
    ' * const result = clicks.pipe(\n' +
    ' *   windowCount(2, 3),\n' +
    ' *   mergeAll(),              // flatten the Observable-of-Observables\n' +
    ' * );\n' +
    ' * result.subscribe(x => console.log(x));\n' +
    ' * ```\n' +
    ' *\n' +
    ' * @see {@link window}\n' +
    ' * @see {@link windowTime}\n' +
    ' * @see {@link windowToggle}\n' +
    ' * @see {@link windowWhen}\n' +
    ' * @see {@link bufferCount}\n' +
    ' *\n' +
    ' * @param {number} windowSize The maximum number of values emitted by each\n' +
    ' * window.\n' +
    ' * @param {number} [startWindowEvery] Interval at which to start a new window.\n' +
    ' * For example if `startWindowEvery` is `2`, then a new window will be started\n' +
    ' * on every other value from the source. A new window is started at the\n' +
    ' * beginning of the source by default.\n' +
    ' * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n' +
    ' * are Observable of values.\n' +
    ' * @method windowCount\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function windowCount<T>(windowSize: number, startWindowEvery?: number): OperatorFunction<T, Observable<T>>;\n',
  timestamp: 1669130813147
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/windowTime.d.ts, [object Object]',
  timestamp: 1669130813147
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/windowTime.d.ts: import { Observable } from '../Observable';\n" +
    "import { OperatorFunction, SchedulerLike } from '../types';\n" +
    '/**\n' +
    ' * Branch out the source Observable values as a nested Observable periodically\n' +
    ' * in time.\n' +
    ' *\n' +
    ` * <span class="informal">It's like {@link bufferTime}, but emits a nested\n` +
    ' * Observable instead of an array.</span>\n' +
    ' *\n' +
    ' * ![](windowTime.png)\n' +
    ' *\n' +
    ' * Returns an Observable that emits windows of items it collects from the source\n' +
    ' * Observable. The output Observable starts a new window periodically, as\n' +
    ' * determined by the `windowCreationInterval` argument. It emits each window\n' +
    ' * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n' +
    ' * source Observable completes or encounters an error, the output Observable\n' +
    ' * emits the current window and propagates the notification from the source\n' +
    ' * Observable. If `windowCreationInterval` is not provided, the output\n' +
    ' * Observable starts a new window when the previous window of duration\n' +
    ' * `windowTimeSpan` completes. If `maxWindowCount` is provided, each window\n' +
    ' * will emit at most fixed number of values. Window will complete immediately\n' +
    ' * after emitting last value and next one still will open as specified by\n' +
    ' * `windowTimeSpan` and `windowCreationInterval` arguments.\n' +
    ' *\n' +
    ' * ## Examples\n' +
    ' * In every window of 1 second each, emit at most 2 click events\n' +
    ' * ```ts\n' +
    " * import { fromEvent } from 'rxjs';\n" +
    " * import { windowTime, map, mergeAll, take } from 'rxjs/operators';\n" +
    ' *\n' +
    " * const clicks = fromEvent(document, 'click');\n" +
    ' * const result = clicks.pipe(\n' +
    ' *   windowTime(1000),\n' +
    ' *   map(win => win.pipe(take(2))), // each window has at most 2 emissions\n' +
    ' *   mergeAll(),                    // flatten the Observable-of-Observables\n' +
    ' * );\n' +
    ' * result.subscribe(x => console.log(x));\n' +
    ' * ```\n' +
    ' *\n' +
    ' * Every 5 seconds start a window 1 second long, and emit at most 2 click events per window\n' +
    ' * ```ts\n' +
    " * import { fromEvent } from 'rxjs';\n" +
    " * import { windowTime, map, mergeAll, take } from 'rxjs/operators';\n" +
    ' *\n' +
    " * const clicks = fromEvent(document, 'click');\n" +
    ' * const result = clicks.pipe(\n' +
    ' *   windowTime(1000, 5000),\n' +
    ' *   map(win => win.pipe(take(2))), // each window has at most 2 emissions\n' +
    ' *   mergeAll(),                    // flatten the Observable-of-Observables\n' +
    ' * );\n' +
    ' * result.subscribe(x => console.log(x));\n' +
    ' * ```\n' +
    ' *\n' +
    ' * Same as example above but with maxWindowCount instead of take\n' +
    ' * ```ts\n' +
    " * import { fromEvent } from 'rxjs';\n" +
    " * import { windowTime, mergeAll } from 'rxjs/operators';\n" +
    ' *\n' +
    " * const clicks = fromEvent(document, 'click');\n" +
    ' * const result = clicks.pipe(\n' +
    ' *   windowTime(1000, 5000, 2), // each window has still at most 2 emissions\n' +
    ' *   mergeAll(),                // flatten the Observable-of-Observables\n' +
    ' * );\n' +
    ' * result.subscribe(x => console.log(x));\n' +
    ' * ```\n' +
    ' *\n' +
    ' * @see {@link window}\n' +
    ' * @see {@link windowCount}\n' +
    ' * @see {@link windowToggle}\n' +
    ' * @see {@link windowWhen}\n' +
    ' * @see {@link bufferTime}\n' +
    ' *\n' +
    ' * @param {number} windowTimeSpan The amount of time to fill each window.\n' +
    ' * @param {number} [windowCreationInterval] The interval at which to start new\n' +
    ' * windows.\n' +
    ' * @param {number} [maxWindowSize=Number.POSITIVE_INFINITY] Max number of\n' +
    ' * values each window can emit before completion.\n' +
    ' * @param {SchedulerLike} [scheduler=async] The scheduler on which to schedule the\n' +
    ' * intervals that determine window boundaries.\n' +
    ' * @return {Observable<Observable<T>>} An observable of windows, which in turn\n' +
    ' * are Observables.\n' +
    ' * @method windowTime\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function windowTime<T>(windowTimeSpan: number, scheduler?: SchedulerLike): OperatorFunction<T, Observable<T>>;\n' +
    'export declare function windowTime<T>(windowTimeSpan: number, windowCreationInterval: number, scheduler?: SchedulerLike): OperatorFunction<T, Observable<T>>;\n' +
    'export declare function windowTime<T>(windowTimeSpan: number, windowCreationInterval: number, maxWindowSize: number, scheduler?: SchedulerLike): OperatorFunction<T, Observable<T>>;\n',
  timestamp: 1669130813148
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/windowToggle.d.ts, [object Object]',
  timestamp: 1669130813149
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/windowToggle.d.ts: import { Observable } from '../Observable';\n" +
    "import { OperatorFunction } from '../types';\n" +
    '/**\n' +
    ' * Branch out the source Observable values as a nested Observable starting from\n' +
    ' * an emission from `openings` and ending when the output of `closingSelector`\n' +
    ' * emits.\n' +
    ' *\n' +
    ` * <span class="informal">It's like {@link bufferToggle}, but emits a nested\n` +
    ' * Observable instead of an array.</span>\n' +
    ' *\n' +
    ' * ![](windowToggle.png)\n' +
    ' *\n' +
    ' * Returns an Observable that emits windows of items it collects from the source\n' +
    ' * Observable. The output Observable emits windows that contain those items\n' +
    ' * emitted by the source Observable between the time when the `openings`\n' +
    ' * Observable emits an item and when the Observable returned by\n' +
    ' * `closingSelector` emits an item.\n' +
    ' *\n' +
    ' * ## Example\n' +
    ' * Every other second, emit the click events from the next 500ms\n' +
    ' * ```ts\n' +
    " * import { fromEvent, interval, EMPTY } from 'rxjs';\n" +
    " * import { windowToggle, mergeAll } from 'rxjs/operators';\n" +
    ' *\n' +
    " * const clicks = fromEvent(document, 'click');\n" +
    ' * const openings = interval(1000);\n' +
    ' * const result = clicks.pipe(\n' +
    ' *   windowToggle(openings, i => i % 2 ? interval(500) : EMPTY),\n' +
    ' *   mergeAll()\n' +
    ' * );\n' +
    ' * result.subscribe(x => console.log(x));\n' +
    ' * ```\n' +
    ' *\n' +
    ' * @see {@link window}\n' +
    ' * @see {@link windowCount}\n' +
    ' * @see {@link windowTime}\n' +
    ' * @see {@link windowWhen}\n' +
    ' * @see {@link bufferToggle}\n' +
    ' *\n' +
    ' * @param {Observable<O>} openings An observable of notifications to start new\n' +
    ' * windows.\n' +
    ' * @param {function(value: O): Observable} closingSelector A function that takes\n' +
    ' * the value emitted by the `openings` observable and returns an Observable,\n' +
    ' * which, when it emits (either `next` or `complete`), signals that the\n' +
    ' * associated window should complete.\n' +
    ' * @return {Observable<Observable<T>>} An observable of windows, which in turn\n' +
    ' * are Observables.\n' +
    ' * @method windowToggle\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function windowToggle<T, O>(openings: Observable<O>, closingSelector: (openValue: O) => Observable<any>): OperatorFunction<T, Observable<T>>;\n',
  timestamp: 1669130813149
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/windowWhen.d.ts, [object Object]',
  timestamp: 1669130813150
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/windowWhen.d.ts: import { Observable } from '../Observable';\n" +
    "import { OperatorFunction } from '../types';\n" +
    '/**\n' +
    ' * Branch out the source Observable values as a nested Observable using a\n' +
    ' * factory function of closing Observables to determine when to start a new\n' +
    ' * window.\n' +
    ' *\n' +
    ` * <span class="informal">It's like {@link bufferWhen}, but emits a nested\n` +
    ' * Observable instead of an array.</span>\n' +
    ' *\n' +
    ' * ![](windowWhen.png)\n' +
    ' *\n' +
    ' * Returns an Observable that emits windows of items it collects from the source\n' +
    ' * Observable. The output Observable emits connected, non-overlapping windows.\n' +
    ' * It emits the current window and opens a new one whenever the Observable\n' +
    ' * produced by the specified `closingSelector` function emits an item. The first\n' +
    ' * window is opened immediately when subscribing to the output Observable.\n' +
    ' *\n' +
    ' * ## Example\n' +
    ' * Emit only the first two clicks events in every window of [1-5] random seconds\n' +
    ' * ```ts\n' +
    " * import { fromEvent, interval } from 'rxjs';\n" +
    " * import { windowWhen, map, mergeAll, take } from 'rxjs/operators';\n" +
    ' *\n' +
    " * const clicks = fromEvent(document, 'click');\n" +
    ' * const result = clicks.pipe(\n' +
    ' *   windowWhen(() => interval(1000 + Math.random() * 4000)),\n' +
    ' *   map(win => win.pipe(take(2))),     // each window has at most 2 emissions\n' +
    ' *   mergeAll()                         // flatten the Observable-of-Observables\n' +
    ' * );\n' +
    ' * result.subscribe(x => console.log(x));\n' +
    ' * ```\n' +
    ' *\n' +
    ' * @see {@link window}\n' +
    ' * @see {@link windowCount}\n' +
    ' * @see {@link windowTime}\n' +
    ' * @see {@link windowToggle}\n' +
    ' * @see {@link bufferWhen}\n' +
    ' *\n' +
    ' * @param {function(): Observable} closingSelector A function that takes no\n' +
    ' * arguments and returns an Observable that signals (on either `next` or\n' +
    ' * `complete`) when to close the previous window and start a new one.\n' +
    ' * @return {Observable<Observable<T>>} An observable of windows, which in turn\n' +
    ' * are Observables.\n' +
    ' * @method windowWhen\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function windowWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, Observable<T>>;\n',
  timestamp: 1669130813151
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/withLatestFrom.d.ts, [object Object]',
  timestamp: 1669130813152
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/withLatestFrom.d.ts: import { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\n" +
    'export declare function withLatestFrom<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\n' +
    'export declare function withLatestFrom<T, O2 extends ObservableInput<any>, R>(source2: O2, project: (v1: T, v2: ObservedValueOf<O2>) => R): OperatorFunction<T, R>;\n' +
    'export declare function withLatestFrom<T, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, R>(v2: O2, v3: O3, project: (v1: T, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>) => R): OperatorFunction<T, R>;\n' +
    'export declare function withLatestFrom<T, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, R>(v2: O2, v3: O3, v4: O4, project: (v1: T, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>) => R): OperatorFunction<T, R>;\n' +
    'export declare function withLatestFrom<T, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, R>(v2: O2, v3: O3, v4: O4, v5: O5, project: (v1: T, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>, v5: ObservedValueOf<O5>) => R): OperatorFunction<T, R>;\n' +
    'export declare function withLatestFrom<T, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, O6 extends ObservableInput<any>, R>(v2: O2, v3: O3, v4: O4, v5: O5, v6: O6, project: (v1: T, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>, v5: ObservedValueOf<O5>, v6: ObservedValueOf<O6>) => R): OperatorFunction<T, R>;\n' +
    'export declare function withLatestFrom<T, O2 extends ObservableInput<any>>(source2: O2): OperatorFunction<T, [T, ObservedValueOf<O2>]>;\n' +
    'export declare function withLatestFrom<T, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>>(v2: O2, v3: O3): OperatorFunction<T, [T, ObservedValueOf<O2>, ObservedValueOf<O3>]>;\n' +
    'export declare function withLatestFrom<T, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>>(v2: O2, v3: O3, v4: O4): OperatorFunction<T, [T, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>]>;\n' +
    'export declare function withLatestFrom<T, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>>(v2: O2, v3: O3, v4: O4, v5: O5): OperatorFunction<T, [T, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>, ObservedValueOf<O5>]>;\n' +
    'export declare function withLatestFrom<T, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, O6 extends ObservableInput<any>>(v2: O2, v3: O3, v4: O4, v5: O5, v6: O6): OperatorFunction<T, [T, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>, ObservedValueOf<O5>, ObservedValueOf<O6>]>;\n' +
    'export declare function withLatestFrom<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\n' +
    'export declare function withLatestFrom<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\n' +
    'export declare function withLatestFrom<T, R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): OperatorFunction<T, R>;\n',
  timestamp: 1669130813152
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/zip.d.ts, [object Object]',
  timestamp: 1669130813154
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/zip.d.ts: import { ObservableInput, OperatorFunction } from '../types';\n" +
    '/** @deprecated Deprecated in favor of static zip. */\n' +
    'export declare function zip<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\n' +
    '/** @deprecated Deprecated in favor of static zip. */\n' +
    'export declare function zip<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\n' +
    '/** @deprecated Deprecated in favor of static zip. */\n' +
    'export declare function zip<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\n' +
    '/** @deprecated Deprecated in favor of static zip. */\n' +
    'export declare function zip<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\n' +
    '/** @deprecated Deprecated in favor of static zip. */\n' +
    'export declare function zip<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\n' +
    '/** @deprecated Deprecated in favor of static zip. */\n' +
    'export declare function zip<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R>;\n' +
    '/** @deprecated Deprecated in favor of static zip. */\n' +
    'export declare function zip<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\n' +
    '/** @deprecated Deprecated in favor of static zip. */\n' +
    'export declare function zip<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\n' +
    '/** @deprecated Deprecated in favor of static zip. */\n' +
    'export declare function zip<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\n' +
    '/** @deprecated Deprecated in favor of static zip. */\n' +
    'export declare function zip<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\n' +
    '/** @deprecated Deprecated in favor of static zip. */\n' +
    'export declare function zip<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]>;\n' +
    '/** @deprecated Deprecated in favor of static zip. */\n' +
    'export declare function zip<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\n' +
    '/** @deprecated Deprecated in favor of static zip. */\n' +
    'export declare function zip<T, R>(array: Array<ObservableInput<T>>): OperatorFunction<T, R>;\n' +
    '/** @deprecated Deprecated in favor of static zip. */\n' +
    'export declare function zip<T, TOther, R>(array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n',
  timestamp: 1669130813155
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/operators/zipAll.d.ts, [object Object]',
  timestamp: 1669130813157
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/operators/zipAll.d.ts: import { OperatorFunction, ObservableInput } from '../types';\n" +
    'export declare function zipAll<T>(): OperatorFunction<ObservableInput<T>, T[]>;\n' +
    'export declare function zipAll<T>(): OperatorFunction<any, T[]>;\n' +
    'export declare function zipAll<T, R>(project: (...values: T[]) => R): OperatorFunction<ObservableInput<T>, R>;\n' +
    'export declare function zipAll<R>(project: (...values: Array<any>) => R): OperatorFunction<any, R>;\n',
  timestamp: 1669130813157
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /deps-calls-with-return-types.dependency.ts, [object Object]',
  timestamp: 1669130813158
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: readFile /deps-calls-with-return-types.dependency.ts: /** starts on next line*/\r\n' +
    "import { BehaviorSubject, Observable, of, Subject } from 'rxjs';\r\n" +
    'interface ClassDescription {\r\n' +
    '    name: string;\r\n' +
    '    constructorParams: string[];\r\n' +
    '    publicMethods: string[];\r\n' +
    '    type: string;\r\n' +
    '}\r\n' +
    '\r\n' +
    'export class ServiceWithMethods {\r\n' +
    '\r\n' +
    '    observable$: Observable<Array<ClassDescription>>;\r\n' +
    '    subject$: Subject<string>;\r\n' +
    '    property$: BehaviorSubject<string>;\r\n' +
    '    promiseProp: Promise<string>;\r\n' +
    '\r\n' +
    '    constructor() {}\r\n' +
    '\r\n' +
    '    observableReturning() {\r\n' +
    "        return of('emit-and-complete');\r\n" +
    '    }\r\n' +
    '    promiseReturning() {\r\n' +
    "        return Promise.resolve('resolved')\r\n" +
    '    }\r\n' +
    '    justAMethod() {\r\n' +
    "        return <ClassDescription>{constructorParams: [], name: 'a name', publicMethods: ['asdad'], type: 'class'}\r\n" +
    '    }\r\n' +
    '\r\n' +
    '    aVoidMethod() {\r\n' +
    "        this['test'] = 1;\r\n" +
    '    }\r\n' +
    '\r\n' +
    '    aNeverMethod() {\r\n' +
    "        throw new Error('test')\r\n" +
    '    }\r\n' +
    '\r\n' +
    '}\r\n',
  timestamp: 1669130813158
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /: true',
  timestamp: 1669130813160
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /: true',
  timestamp: 1669130813160
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /: true',
  timestamp: 1669130813161
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /rxjs.ts:false',
  timestamp: 1669130813161
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /rxjs.tsx:false',
  timestamp: 1669130813161
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /rxjs.d.ts:false',
  timestamp: 1669130813161
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /rxjs: true',
  timestamp: 1669130813161
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /rxjs: true',
  timestamp: 1669130813161
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /rxjs/package.json:false',
  timestamp: 1669130813161
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /rxjs: true',
  timestamp: 1669130813161
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /rxjs: true',
  timestamp: 1669130813161
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /rxjs/index.ts:false',
  timestamp: 1669130813161
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /rxjs/index.tsx:false',
  timestamp: 1669130813161
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /rxjs/index.d.ts:false',
  timestamp: 1669130813161
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules: true',
  timestamp: 1669130813161
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules: true',
  timestamp: 1669130813162
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs.ts:false',
  timestamp: 1669130813162
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs.tsx:false',
  timestamp: 1669130813162
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs.d.ts:false',
  timestamp: 1669130813162
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs: true',
  timestamp: 1669130813162
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs: true',
  timestamp: 1669130813162
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/index.d.ts:true',
  timestamp: 1669130813162
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/index.d.ts:true',
  timestamp: 1669130813162
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/index.d.ts, [object Object]',
  timestamp: 1669130813162
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/index.d.ts: export { Observable } from './internal/Observable';\n" +
    "export { ConnectableObservable } from './internal/observable/ConnectableObservable';\n" +
    "export { GroupedObservable } from './internal/operators/groupBy';\n" +
    "export { Operator } from './internal/Operator';\n" +
    "export { observable } from './internal/symbol/observable';\n" +
    "export { Subject } from './internal/Subject';\n" +
    "export { BehaviorSubject } from './internal/BehaviorSubject';\n" +
    "export { ReplaySubject } from './internal/ReplaySubject';\n" +
    "export { AsyncSubject } from './internal/AsyncSubject';\n" +
    "export { asap, asapScheduler } from './internal/scheduler/asap';\n" +
    "export { async, asyncScheduler } from './internal/scheduler/async';\n" +
    "export { queue, queueScheduler } from './internal/scheduler/queue';\n" +
    "export { animationFrame, animationFrameScheduler } from './internal/scheduler/animationFrame';\n" +
    "export { VirtualTimeScheduler, VirtualAction } from './internal/scheduler/VirtualTimeScheduler';\n" +
    "export { Scheduler } from './internal/Scheduler';\n" +
    "export { Subscription } from './internal/Subscription';\n" +
    "export { Subscriber } from './internal/Subscriber';\n" +
    "export { Notification, NotificationKind } from './internal/Notification';\n" +
    "export { pipe } from './internal/util/pipe';\n" +
    "export { noop } from './internal/util/noop';\n" +
    "export { identity } from './internal/util/identity';\n" +
    "export { isObservable } from './internal/util/isObservable';\n" +
    "export { ArgumentOutOfRangeError } from './internal/util/ArgumentOutOfRangeError';\n" +
    "export { EmptyError } from './internal/util/EmptyError';\n" +
    "export { ObjectUnsubscribedError } from './internal/util/ObjectUnsubscribedError';\n" +
    "export { UnsubscriptionError } from './internal/util/UnsubscriptionError';\n" +
    "export { TimeoutError } from './internal/util/TimeoutError';\n" +
    "export { bindCallback } from './internal/observable/bindCallback';\n" +
    "export { bindNodeCallback } from './internal/observable/bindNodeCallback';\n" +
    "export { combineLatest } from './internal/observable/combineLatest';\n" +
    "export { concat } from './internal/observable/concat';\n" +
    "export { defer } from './internal/observable/defer';\n" +
    "export { empty } from './internal/observable/empty';\n" +
    "export { forkJoin } from './internal/observable/forkJoin';\n" +
    "export { from } from './internal/observable/from';\n" +
    "export { fromEvent } from './internal/observable/fromEvent';\n" +
    "export { fromEventPattern } from './internal/observable/fromEventPattern';\n" +
    "export { generate } from './internal/observable/generate';\n" +
    "export { iif } from './internal/observable/iif';\n" +
    "export { interval } from './internal/observable/interval';\n" +
    "export { merge } from './internal/observable/merge';\n" +
    "export { never } from './internal/observable/never';\n" +
    "export { of } from './internal/observable/of';\n" +
    "export { onErrorResumeNext } from './internal/observable/onErrorResumeNext';\n" +
    "export { pairs } from './internal/observable/pairs';\n" +
    "export { partition } from './internal/observable/partition';\n" +
    "export { race } from './internal/observable/race';\n" +
    "export { range } from './internal/observable/range';\n" +
    "export { throwError } from './internal/observable/throwError';\n" +
    "export { timer } from './internal/observable/timer';\n" +
    "export { using } from './internal/observable/using';\n" +
    "export { zip } from './internal/observable/zip';\n" +
    "export { scheduled } from './internal/scheduled/scheduled';\n" +
    "export { EMPTY } from './internal/observable/empty';\n" +
    "export { NEVER } from './internal/observable/never';\n" +
    "export * from './internal/types';\n" +
    "export { config } from './internal/config';\n",
  timestamp: 1669130813163
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813165
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813165
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Observable.ts:false',
  timestamp: 1669130813165
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Observable.tsx:false',
  timestamp: 1669130813166
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Observable.d.ts:true',
  timestamp: 1669130813166
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813166
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813166
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/ConnectableObservable.ts:false',
  timestamp: 1669130813167
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/ConnectableObservable.tsx:false',
  timestamp: 1669130813167
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/ConnectableObservable.d.ts:true',
  timestamp: 1669130813167
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130813167
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/operators: true',
  timestamp: 1669130813167
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/groupBy.ts:false',
  timestamp: 1669130813167
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/groupBy.tsx:false',
  timestamp: 1669130813167
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/operators/groupBy.d.ts:true',
  timestamp: 1669130813167
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813167
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813167
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Operator.ts:false',
  timestamp: 1669130813167
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Operator.tsx:false',
  timestamp: 1669130813167
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Operator.d.ts:true',
  timestamp: 1669130813167
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/symbol: true',
  timestamp: 1669130813168
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/symbol: true',
  timestamp: 1669130813168
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/symbol/observable.ts:false',
  timestamp: 1669130813168
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/symbol/observable.tsx:false',
  timestamp: 1669130813168
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/symbol/observable.d.ts:true',
  timestamp: 1669130813168
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813168
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813168
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Subject.ts:false',
  timestamp: 1669130813168
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Subject.tsx:false',
  timestamp: 1669130813168
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Subject.d.ts:true',
  timestamp: 1669130813168
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813168
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813168
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/BehaviorSubject.ts:false',
  timestamp: 1669130813168
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/BehaviorSubject.tsx:false',
  timestamp: 1669130813169
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/BehaviorSubject.d.ts:true',
  timestamp: 1669130813169
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813169
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813169
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/ReplaySubject.ts:false',
  timestamp: 1669130813169
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/ReplaySubject.tsx:false',
  timestamp: 1669130813169
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/ReplaySubject.d.ts:true',
  timestamp: 1669130813169
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813169
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813169
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/AsyncSubject.ts:false',
  timestamp: 1669130813169
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/AsyncSubject.tsx:false',
  timestamp: 1669130813169
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/AsyncSubject.d.ts:true',
  timestamp: 1669130813169
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/scheduler: true',
  timestamp: 1669130813169
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/scheduler: true',
  timestamp: 1669130813170
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/scheduler/asap.ts:false',
  timestamp: 1669130813170
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/scheduler/asap.tsx:false',
  timestamp: 1669130813170
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/scheduler/asap.d.ts:true',
  timestamp: 1669130813170
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/scheduler: true',
  timestamp: 1669130813170
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/scheduler: true',
  timestamp: 1669130813170
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/scheduler/async.ts:false',
  timestamp: 1669130813170
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/scheduler/async.tsx:false',
  timestamp: 1669130813170
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/scheduler/async.d.ts:true',
  timestamp: 1669130813170
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/scheduler: true',
  timestamp: 1669130813170
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/scheduler: true',
  timestamp: 1669130813171
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/scheduler/queue.ts:false',
  timestamp: 1669130813171
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/scheduler/queue.tsx:false',
  timestamp: 1669130813171
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/scheduler/queue.d.ts:true',
  timestamp: 1669130813171
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/scheduler: true',
  timestamp: 1669130813171
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/scheduler: true',
  timestamp: 1669130813171
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/scheduler/animationFrame.ts:false',
  timestamp: 1669130813171
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/scheduler/animationFrame.tsx:false',
  timestamp: 1669130813171
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/scheduler/animationFrame.d.ts:true',
  timestamp: 1669130813171
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/scheduler: true',
  timestamp: 1669130813172
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/scheduler: true',
  timestamp: 1669130813172
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/scheduler/VirtualTimeScheduler.ts:false',
  timestamp: 1669130813172
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/scheduler/VirtualTimeScheduler.tsx:false',
  timestamp: 1669130813172
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/scheduler/VirtualTimeScheduler.d.ts:true',
  timestamp: 1669130813172
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813172
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813172
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Scheduler.ts:false',
  timestamp: 1669130813172
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Scheduler.tsx:false',
  timestamp: 1669130813172
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Scheduler.d.ts:true',
  timestamp: 1669130813172
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813172
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813172
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Subscription.ts:false',
  timestamp: 1669130813172
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Subscription.tsx:false',
  timestamp: 1669130813173
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Subscription.d.ts:true',
  timestamp: 1669130813173
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813173
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813173
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Subscriber.ts:false',
  timestamp: 1669130813173
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Subscriber.tsx:false',
  timestamp: 1669130813173
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Subscriber.d.ts:true',
  timestamp: 1669130813173
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813173
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813173
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Notification.ts:false',
  timestamp: 1669130813173
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Notification.tsx:false',
  timestamp: 1669130813173
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Notification.d.ts:true',
  timestamp: 1669130813173
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/util: true',
  timestamp: 1669130813173
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/util: true',
  timestamp: 1669130813173
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/util/pipe.ts:false',
  timestamp: 1669130813173
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/util/pipe.tsx:false',
  timestamp: 1669130813174
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/util/pipe.d.ts:true',
  timestamp: 1669130813174
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/util: true',
  timestamp: 1669130813174
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/util: true',
  timestamp: 1669130813174
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/util/noop.ts:false',
  timestamp: 1669130813174
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/util/noop.tsx:false',
  timestamp: 1669130813174
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/util/noop.d.ts:true',
  timestamp: 1669130813174
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/util: true',
  timestamp: 1669130813174
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/util: true',
  timestamp: 1669130813174
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/util/identity.ts:false',
  timestamp: 1669130813174
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/util/identity.tsx:false',
  timestamp: 1669130813174
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/util/identity.d.ts:true',
  timestamp: 1669130813174
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/util: true',
  timestamp: 1669130813175
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/util: true',
  timestamp: 1669130813175
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/util/isObservable.ts:false',
  timestamp: 1669130813175
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/util/isObservable.tsx:false',
  timestamp: 1669130813175
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/util/isObservable.d.ts:true',
  timestamp: 1669130813175
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/util: true',
  timestamp: 1669130813175
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/util: true',
  timestamp: 1669130813175
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/util/ArgumentOutOfRangeError.ts:false',
  timestamp: 1669130813175
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/util/ArgumentOutOfRangeError.tsx:false',
  timestamp: 1669130813175
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/util/ArgumentOutOfRangeError.d.ts:true',
  timestamp: 1669130813175
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/util: true',
  timestamp: 1669130813175
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/util: true',
  timestamp: 1669130813175
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/util/EmptyError.ts:false',
  timestamp: 1669130813175
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/util/EmptyError.tsx:false',
  timestamp: 1669130813175
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/util/EmptyError.d.ts:true',
  timestamp: 1669130813176
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/util: true',
  timestamp: 1669130813176
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/util: true',
  timestamp: 1669130813176
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/util/ObjectUnsubscribedError.ts:false',
  timestamp: 1669130813176
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/util/ObjectUnsubscribedError.tsx:false',
  timestamp: 1669130813176
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/util/ObjectUnsubscribedError.d.ts:true',
  timestamp: 1669130813178
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/util: true',
  timestamp: 1669130813178
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/util: true',
  timestamp: 1669130813178
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/util/UnsubscriptionError.ts:false',
  timestamp: 1669130813179
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/util/UnsubscriptionError.tsx:false',
  timestamp: 1669130813179
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/util/UnsubscriptionError.d.ts:true',
  timestamp: 1669130813179
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/util: true',
  timestamp: 1669130813179
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/util: true',
  timestamp: 1669130813179
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/util/TimeoutError.ts:false',
  timestamp: 1669130813180
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/util/TimeoutError.tsx:false',
  timestamp: 1669130813180
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/util/TimeoutError.d.ts:true',
  timestamp: 1669130813180
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813180
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813180
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/bindCallback.ts:false',
  timestamp: 1669130813180
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/bindCallback.tsx:false',
  timestamp: 1669130813180
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/bindCallback.d.ts:true',
  timestamp: 1669130813180
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813180
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813181
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/bindNodeCallback.ts:false',
  timestamp: 1669130813181
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/bindNodeCallback.tsx:false',
  timestamp: 1669130813181
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/bindNodeCallback.d.ts:true',
  timestamp: 1669130813181
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813181
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813181
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/combineLatest.ts:false',
  timestamp: 1669130813182
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/combineLatest.tsx:false',
  timestamp: 1669130813182
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/combineLatest.d.ts:true',
  timestamp: 1669130813182
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813182
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813182
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/concat.ts:false',
  timestamp: 1669130813182
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/concat.tsx:false',
  timestamp: 1669130813182
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/concat.d.ts:true',
  timestamp: 1669130813182
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813182
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813182
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/defer.ts:false',
  timestamp: 1669130813182
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/defer.tsx:false',
  timestamp: 1669130813182
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/defer.d.ts:true',
  timestamp: 1669130813182
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813183
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813183
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/empty.ts:false',
  timestamp: 1669130813183
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/empty.tsx:false',
  timestamp: 1669130813183
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/empty.d.ts:true',
  timestamp: 1669130813183
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813183
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813183
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/forkJoin.ts:false',
  timestamp: 1669130813183
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/forkJoin.tsx:false',
  timestamp: 1669130813183
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/forkJoin.d.ts:true',
  timestamp: 1669130813183
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813183
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813183
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/from.ts:false',
  timestamp: 1669130813183
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/from.tsx:false',
  timestamp: 1669130813183
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/from.d.ts:true',
  timestamp: 1669130813184
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813184
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813184
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/fromEvent.ts:false',
  timestamp: 1669130813184
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/fromEvent.tsx:false',
  timestamp: 1669130813184
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/fromEvent.d.ts:true',
  timestamp: 1669130813184
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813184
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813184
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/fromEventPattern.ts:false',
  timestamp: 1669130813184
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/fromEventPattern.tsx:false',
  timestamp: 1669130813185
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/fromEventPattern.d.ts:true',
  timestamp: 1669130813185
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813185
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813185
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/generate.ts:false',
  timestamp: 1669130813185
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/generate.tsx:false',
  timestamp: 1669130813185
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/generate.d.ts:true',
  timestamp: 1669130813186
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813186
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813186
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/iif.ts:false',
  timestamp: 1669130813186
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/iif.tsx:false',
  timestamp: 1669130813186
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/iif.d.ts:true',
  timestamp: 1669130813186
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813186
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813186
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/interval.ts:false',
  timestamp: 1669130813186
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/interval.tsx:false',
  timestamp: 1669130813186
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/interval.d.ts:true',
  timestamp: 1669130813186
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813187
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813187
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/merge.ts:false',
  timestamp: 1669130813187
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/merge.tsx:false',
  timestamp: 1669130813187
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/merge.d.ts:true',
  timestamp: 1669130813187
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813187
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813187
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/never.ts:false',
  timestamp: 1669130813187
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/never.tsx:false',
  timestamp: 1669130813187
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/never.d.ts:true',
  timestamp: 1669130813187
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813188
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813188
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/of.ts:false',
  timestamp: 1669130813188
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/of.tsx:false',
  timestamp: 1669130813188
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/of.d.ts:true',
  timestamp: 1669130813188
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813188
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813188
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/onErrorResumeNext.ts:false',
  timestamp: 1669130813188
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/onErrorResumeNext.tsx:false',
  timestamp: 1669130813188
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/onErrorResumeNext.d.ts:true',
  timestamp: 1669130813188
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813188
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813188
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/pairs.ts:false',
  timestamp: 1669130813188
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/pairs.tsx:false',
  timestamp: 1669130813188
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/pairs.d.ts:true',
  timestamp: 1669130813189
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813189
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813189
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/partition.ts:false',
  timestamp: 1669130813189
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/partition.tsx:false',
  timestamp: 1669130813189
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/partition.d.ts:true',
  timestamp: 1669130813189
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813189
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813189
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/race.ts:false',
  timestamp: 1669130813189
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/race.tsx:false',
  timestamp: 1669130813189
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/race.d.ts:true',
  timestamp: 1669130813189
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813189
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813189
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/range.ts:false',
  timestamp: 1669130813189
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/range.tsx:false',
  timestamp: 1669130813189
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/range.d.ts:true',
  timestamp: 1669130813190
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813190
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813190
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/throwError.ts:false',
  timestamp: 1669130813190
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/throwError.tsx:false',
  timestamp: 1669130813190
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/throwError.d.ts:true',
  timestamp: 1669130813190
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813190
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813190
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/timer.ts:false',
  timestamp: 1669130813190
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/timer.tsx:false',
  timestamp: 1669130813190
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/timer.d.ts:true',
  timestamp: 1669130813190
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813190
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813190
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/using.ts:false',
  timestamp: 1669130813190
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/using.tsx:false',
  timestamp: 1669130813190
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/using.d.ts:true',
  timestamp: 1669130813191
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813191
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813191
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/zip.ts:false',
  timestamp: 1669130813191
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/zip.tsx:false',
  timestamp: 1669130813191
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/zip.d.ts:true',
  timestamp: 1669130813191
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/scheduled: true',
  timestamp: 1669130813191
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/scheduled: true',
  timestamp: 1669130813191
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/scheduled/scheduled.ts:false',
  timestamp: 1669130813191
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/scheduled/scheduled.tsx:false',
  timestamp: 1669130813191
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/scheduled/scheduled.d.ts:true',
  timestamp: 1669130813191
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813191
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813191
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/types.ts:false',
  timestamp: 1669130813191
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/types.tsx:false',
  timestamp: 1669130813192
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/types.d.ts:true',
  timestamp: 1669130813192
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813192
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813192
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/config.ts:false',
  timestamp: 1669130813192
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/config.tsx:false',
  timestamp: 1669130813192
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/config.d.ts:true',
  timestamp: 1669130813192
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/symbol/observable.d.ts, [object Object]',
  timestamp: 1669130813192
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: readFile /node_modules/rxjs/internal/symbol/observable.d.ts: /** Symbol.observable or a string "@@observable". Used for interop */\n' +
    'export declare const observable: string | symbol;\n',
  timestamp: 1669130813192
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/BehaviorSubject.d.ts, [object Object]',
  timestamp: 1669130813193
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/BehaviorSubject.d.ts: import { Subject } from './Subject';\n" +
    "import { Subscriber } from './Subscriber';\n" +
    "import { Subscription } from './Subscription';\n" +
    '/**\n' +
    ' * A variant of Subject that requires an initial value and emits its current\n' +
    ' * value whenever it is subscribed to.\n' +
    ' *\n' +
    ' * @class BehaviorSubject<T>\n' +
    ' */\n' +
    'export declare class BehaviorSubject<T> extends Subject<T> {\n' +
    '    private _value;\n' +
    '    constructor(_value: T);\n' +
    '    readonly value: T;\n' +
    '    /** @deprecated This is an internal implementation detail, do not use. */\n' +
    '    _subscribe(subscriber: Subscriber<T>): Subscription;\n' +
    '    getValue(): T;\n' +
    '    next(value: T): void;\n' +
    '}\n',
  timestamp: 1669130813193
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813194
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813194
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Subject.ts:false',
  timestamp: 1669130813194
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Subject.tsx:false',
  timestamp: 1669130813194
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Subject.d.ts:true',
  timestamp: 1669130813194
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/ReplaySubject.d.ts, [object Object]',
  timestamp: 1669130813194
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/ReplaySubject.d.ts: import { Subject } from './Subject';\n" +
    "import { SchedulerLike } from './types';\n" +
    "import { Subscriber } from './Subscriber';\n" +
    "import { Subscription } from './Subscription';\n" +
    '/**\n' +
    ' * A variant of Subject that "replays" or emits old values to new subscribers.\n' +
    ' * It buffers a set number of values and will emit those values immediately to\n' +
    ' * any new subscribers in addition to emitting new values to existing subscribers.\n' +
    ' *\n' +
    ' * @class ReplaySubject<T>\n' +
    ' */\n' +
    'export declare class ReplaySubject<T> extends Subject<T> {\n' +
    '    private scheduler?;\n' +
    '    private _events;\n' +
    '    private _bufferSize;\n' +
    '    private _windowTime;\n' +
    '    private _infiniteTimeWindow;\n' +
    '    constructor(bufferSize?: number, windowTime?: number, scheduler?: SchedulerLike);\n' +
    '    private nextInfiniteTimeWindow;\n' +
    '    private nextTimeWindow;\n' +
    '    /** @deprecated This is an internal implementation detail, do not use. */\n' +
    '    _subscribe(subscriber: Subscriber<T>): Subscription;\n' +
    '    _getNow(): number;\n' +
    '    private _trimBufferThenGetEvents;\n' +
    '}\n',
  timestamp: 1669130813194
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/AsyncSubject.d.ts, [object Object]',
  timestamp: 1669130813195
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/AsyncSubject.d.ts: import { Subject } from './Subject';\n" +
    "import { Subscriber } from './Subscriber';\n" +
    "import { Subscription } from './Subscription';\n" +
    '/**\n' +
    ' * A variant of Subject that only emits a value when it completes. It will emit\n' +
    ' * its latest value to all its observers on completion.\n' +
    ' *\n' +
    ' * @class AsyncSubject<T>\n' +
    ' */\n' +
    'export declare class AsyncSubject<T> extends Subject<T> {\n' +
    '    private value;\n' +
    '    private hasNext;\n' +
    '    private hasCompleted;\n' +
    '    /** @deprecated This is an internal implementation detail, do not use. */\n' +
    '    _subscribe(subscriber: Subscriber<any>): Subscription;\n' +
    '    next(value: T): void;\n' +
    '    error(error: any): void;\n' +
    '    complete(): void;\n' +
    '}\n',
  timestamp: 1669130813195
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/scheduler/asap.d.ts, [object Object]',
  timestamp: 1669130813196
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/scheduler/asap.d.ts: import { AsapScheduler } from './AsapScheduler';\n" +
    '/**\n' +
    ' *\n' +
    ' * Asap Scheduler\n' +
    ' *\n' +
    ' * <span class="informal">Perform task as fast as it can be performed asynchronously</span>\n' +
    ' *\n' +
    ' * `asap` scheduler behaves the same as {@link asyncScheduler} scheduler when you use it to delay task\n' +
    ' * in time. If however you set delay to `0`, `asap` will wait for current synchronously executing\n' +
    ' * code to end and then it will try to execute given task as fast as possible.\n' +
    ' *\n' +
    ' * `asap` scheduler will do its best to minimize time between end of currently executing code\n' +
    ' * and start of scheduled task. This makes it best candidate for performing so called "deferring".\n' +
    ' * Traditionally this was achieved by calling `setTimeout(deferredTask, 0)`, but that technique involves\n' +
    ' * some (although minimal) unwanted delay.\n' +
    ' *\n' +
    ' * Note that using `asap` scheduler does not necessarily mean that your task will be first to process\n' +
    ' * after currently executing code. In particular, if some task was also scheduled with `asap` before,\n' +
    ' * that task will execute first. That being said, if you need to schedule task asynchronously, but\n' +
    ' * as soon as possible, `asap` scheduler is your best bet.\n' +
    ' *\n' +
    ' * ## Example\n' +
    ' * Compare async and asap scheduler<\n' +
    ' * ```ts\n' +
    " * import { asapScheduler, asyncScheduler } from 'rxjs';\n" +
    ' *\n' +
    " * asyncScheduler.schedule(() => console.log('async')); // scheduling 'async' first...\n" +
    " * asapScheduler.schedule(() => console.log('asap'));\n" +
    ' *\n' +
    ' * // Logs:\n' +
    ' * // "asap"\n' +
    ' * // "async"\n' +
    " * // ... but 'asap' goes first!\n" +
    ' * ```\n' +
    ' */\n' +
    'export declare const asapScheduler: AsapScheduler;\n' +
    '/**\n' +
    ' * @deprecated renamed. Use {@link asapScheduler}\n' +
    ' */\n' +
    'export declare const asap: AsapScheduler;\n',
  timestamp: 1669130813196
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/scheduler: true',
  timestamp: 1669130813197
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/scheduler: true',
  timestamp: 1669130813197
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/scheduler/AsapScheduler.ts:false',
  timestamp: 1669130813197
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/scheduler/AsapScheduler.tsx:false',
  timestamp: 1669130813197
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/scheduler/AsapScheduler.d.ts:true',
  timestamp: 1669130813197
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/scheduler/AsapScheduler.d.ts, [object Object]',
  timestamp: 1669130813197
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/scheduler/AsapScheduler.d.ts: import { AsyncAction } from './AsyncAction';\n" +
    "import { AsyncScheduler } from './AsyncScheduler';\n" +
    'export declare class AsapScheduler extends AsyncScheduler {\n' +
    '    flush(action?: AsyncAction<any>): void;\n' +
    '}\n',
  timestamp: 1669130813197
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/scheduler: true',
  timestamp: 1669130813197
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/scheduler: true',
  timestamp: 1669130813197
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/scheduler/AsyncAction.ts:false',
  timestamp: 1669130813198
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/scheduler/AsyncAction.tsx:false',
  timestamp: 1669130813198
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/scheduler/AsyncAction.d.ts:true',
  timestamp: 1669130813198
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/scheduler: true',
  timestamp: 1669130813198
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/scheduler: true',
  timestamp: 1669130813198
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/scheduler/AsyncScheduler.ts:false',
  timestamp: 1669130813198
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/scheduler/AsyncScheduler.tsx:false',
  timestamp: 1669130813198
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/scheduler/AsyncScheduler.d.ts:true',
  timestamp: 1669130813198
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/scheduler/AsyncAction.d.ts, [object Object]',
  timestamp: 1669130813198
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/scheduler/AsyncAction.d.ts: import { Action } from './Action';\n" +
    "import { SchedulerAction } from '../types';\n" +
    "import { Subscription } from '../Subscription';\n" +
    "import { AsyncScheduler } from './AsyncScheduler';\n" +
    '/**\n' +
    ' * We need this JSDoc comment for affecting ESDoc.\n' +
    ' * @ignore\n' +
    ' * @extends {Ignored}\n' +
    ' */\n' +
    'export declare class AsyncAction<T> extends Action<T> {\n' +
    '    protected scheduler: AsyncScheduler;\n' +
    '    protected work: (this: SchedulerAction<T>, state?: T) => void;\n' +
    '    id: any;\n' +
    '    state: T;\n' +
    '    delay: number;\n' +
    '    protected pending: boolean;\n' +
    '    constructor(scheduler: AsyncScheduler, work: (this: SchedulerAction<T>, state?: T) => void);\n' +
    '    schedule(state?: T, delay?: number): Subscription;\n' +
    '    protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay?: number): any;\n' +
    '    protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay?: number): any;\n' +
    '    /**\n' +
    '     * Immediately executes this action and the `work` it contains.\n' +
    '     * @return {any}\n' +
    '     */\n' +
    '    execute(state: T, delay: number): any;\n' +
    '    protected _execute(state: T, delay: number): any;\n' +
    '    /** @deprecated This is an internal implementation detail, do not use. */\n' +
    '    _unsubscribe(): void;\n' +
    '}\n',
  timestamp: 1669130813198
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/scheduler: true',
  timestamp: 1669130813199
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/scheduler: true',
  timestamp: 1669130813199
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/scheduler/Action.ts:false',
  timestamp: 1669130813200
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/scheduler/Action.tsx:false',
  timestamp: 1669130813200
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/scheduler/Action.d.ts:true',
  timestamp: 1669130813200
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813200
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813200
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/types.ts:false',
  timestamp: 1669130813200
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/types.tsx:false',
  timestamp: 1669130813200
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/types.d.ts:true',
  timestamp: 1669130813200
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813200
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813200
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Subscription.ts:false',
  timestamp: 1669130813200
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Subscription.tsx:false',
  timestamp: 1669130813201
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Subscription.d.ts:true',
  timestamp: 1669130813201
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/scheduler/Action.d.ts, [object Object]',
  timestamp: 1669130813202
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/scheduler/Action.d.ts: import { Scheduler } from '../Scheduler';\n" +
    "import { Subscription } from '../Subscription';\n" +
    "import { SchedulerAction } from '../types';\n" +
    '/**\n' +
    ' * A unit of work to be executed in a `scheduler`. An action is typically\n' +
    ' * created from within a {@link SchedulerLike} and an RxJS user does not need to concern\n' +
    ' * themselves about creating and manipulating an Action.\n' +
    ' *\n' +
    ' * ```ts\n' +
    ' * class Action<T> extends Subscription {\n' +
    ' *   new (scheduler: Scheduler, work: (state?: T) => void);\n' +
    ' *   schedule(state?: T, delay: number = 0): Subscription;\n' +
    ' * }\n' +
    ' * ```\n' +
    ' *\n' +
    ' * @class Action<T>\n' +
    ' */\n' +
    'export declare class Action<T> extends Subscription {\n' +
    '    constructor(scheduler: Scheduler, work: (this: SchedulerAction<T>, state?: T) => void);\n' +
    '    /**\n' +
    '     * Schedules this action on its parent {@link SchedulerLike} for execution. May be passed\n' +
    '     * some context object, `state`. May happen at some point in the future,\n' +
    '     * according to the `delay` parameter, if specified.\n' +
    '     * @param {T} [state] Some contextual data that the `work` function uses when\n' +
    '     * called by the Scheduler.\n' +
    '     * @param {number} [delay] Time to wait before executing the work, where the\n' +
    '     * time unit is implicit and defined by the Scheduler.\n' +
    '     * @return {void}\n' +
    '     */\n' +
    '    schedule(state?: T, delay?: number): Subscription;\n' +
    '}\n',
  timestamp: 1669130813202
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813203
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813203
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Scheduler.ts:false',
  timestamp: 1669130813203
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Scheduler.tsx:false',
  timestamp: 1669130813203
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Scheduler.d.ts:true',
  timestamp: 1669130813204
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/Scheduler.d.ts, [object Object]',
  timestamp: 1669130813204
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/Scheduler.d.ts: import { Action } from './scheduler/Action';\n" +
    "import { Subscription } from './Subscription';\n" +
    "import { SchedulerLike, SchedulerAction } from './types';\n" +
    '/**\n' +
    ' * An execution context and a data structure to order tasks and schedule their\n' +
    ' * execution. Provides a notion of (potentially virtual) time, through the\n' +
    ' * `now()` getter method.\n' +
    ' *\n' +
    ' * Each unit of work in a Scheduler is called an `Action`.\n' +
    ' *\n' +
    ' * ```ts\n' +
    ' * class Scheduler {\n' +
    ' *   now(): number;\n' +
    ' *   schedule(work, delay?, state?): Subscription;\n' +
    ' * }\n' +
    ' * ```\n' +
    ' *\n' +
    ' * @class Scheduler\n' +
    ' * @deprecated Scheduler is an internal implementation detail of RxJS, and\n' +
    ' * should not be used directly. Rather, create your own class and implement\n' +
    ' * {@link SchedulerLike}\n' +
    ' */\n' +
    'export declare class Scheduler implements SchedulerLike {\n' +
    '    private SchedulerAction;\n' +
    '    /**\n' +
    '     * Note: the extra arrow function wrapper is to make testing by overriding\n' +
    '     * Date.now easier.\n' +
    '     * @nocollapse\n' +
    '     */\n' +
    '    static now: () => number;\n' +
    '    constructor(SchedulerAction: typeof Action, now?: () => number);\n' +
    '    /**\n' +
    '     * A getter method that returns a number representing the current time\n' +
    "     * (at the time this function was called) according to the scheduler's own\n" +
    '     * internal clock.\n' +
    '     * @return {number} A number that represents the current time. May or may not\n' +
    '     * have a relation to wall-clock time. May or may not refer to a time unit\n' +
    '     * (e.g. milliseconds).\n' +
    '     */\n' +
    '    now: () => number;\n' +
    '    /**\n' +
    '     * Schedules a function, `work`, for execution. May happen at some point in\n' +
    '     * the future, according to the `delay` parameter, if specified. May be passed\n' +
    '     * some context object, `state`, which will be passed to the `work` function.\n' +
    '     *\n' +
    '     * The given arguments will be processed an stored as an Action object in a\n' +
    '     * queue of actions.\n' +
    '     *\n' +
    '     * @param {function(state: ?T): ?Subscription} work A function representing a\n' +
    '     * task, or some unit of work to be executed by the Scheduler.\n' +
    '     * @param {number} [delay] Time to wait before executing the work, where the\n' +
    '     * time unit is implicit and defined by the Scheduler itself.\n' +
    '     * @param {T} [state] Some contextual data that the `work` function uses when\n' +
    '     * called by the Scheduler.\n' +
    '     * @return {Subscription} A subscription in order to be able to unsubscribe\n' +
    '     * the scheduled work.\n' +
    '     */\n' +
    '    schedule<T>(work: (this: SchedulerAction<T>, state?: T) => void, delay?: number, state?: T): Subscription;\n' +
    '}\n',
  timestamp: 1669130813204
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/scheduler: true',
  timestamp: 1669130813209
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/scheduler: true',
  timestamp: 1669130813209
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/scheduler/Action.ts:false',
  timestamp: 1669130813210
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/scheduler/Action.tsx:false',
  timestamp: 1669130813210
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/scheduler/Action.d.ts:true',
  timestamp: 1669130813210
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/scheduler/AsyncScheduler.d.ts, [object Object]',
  timestamp: 1669130813210
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/scheduler/AsyncScheduler.d.ts: import { Scheduler } from '../Scheduler';\n" +
    "import { Action } from './Action';\n" +
    "import { AsyncAction } from './AsyncAction';\n" +
    "import { SchedulerAction } from '../types';\n" +
    "import { Subscription } from '../Subscription';\n" +
    'export declare class AsyncScheduler extends Scheduler {\n' +
    '    static delegate?: Scheduler;\n' +
    '    actions: Array<AsyncAction<any>>;\n' +
    '    /**\n' +
    '     * A flag to indicate whether the Scheduler is currently executing a batch of\n' +
    '     * queued actions.\n' +
    '     * @type {boolean}\n' +
    '     * @deprecated internal use only\n' +
    '     */\n' +
    '    active: boolean;\n' +
    '    /**\n' +
    '     * An internal ID used to track the latest asynchronous task such as those\n' +
    '     * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n' +
    '     * others.\n' +
    '     * @type {any}\n' +
    '     * @deprecated internal use only\n' +
    '     */\n' +
    '    scheduled: any;\n' +
    '    constructor(SchedulerAction: typeof Action, now?: () => number);\n' +
    '    schedule<T>(work: (this: SchedulerAction<T>, state?: T) => void, delay?: number, state?: T): Subscription;\n' +
    '    flush(action: AsyncAction<any>): void;\n' +
    '}\n',
  timestamp: 1669130813210
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/scheduler/async.d.ts, [object Object]',
  timestamp: 1669130813213
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/scheduler/async.d.ts: import { AsyncScheduler } from './AsyncScheduler';\n" +
    '/**\n' +
    ' *\n' +
    ' * Async Scheduler\n' +
    ' *\n' +
    ' * <span class="informal">Schedule task as if you used setTimeout(task, duration)</span>\n' +
    ' *\n' +
    ' * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n' +
    ' * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n' +
    ' * in intervals.\n' +
    ' *\n' +
    ' * If you just want to "defer" task, that is to perform it right after currently\n' +
    ' * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n' +
    ' * better choice will be the {@link asapScheduler} scheduler.\n' +
    ' *\n' +
    ' * ## Examples\n' +
    ' * Use async scheduler to delay task\n' +
    ' * ```ts\n' +
    " * import { asyncScheduler } from 'rxjs';\n" +
    ' *\n' +
    " * const task = () => console.log('it works!');\n" +
    ' *\n' +
    ' * asyncScheduler.schedule(task, 2000);\n' +
    ' *\n' +
    ' * // After 2 seconds logs:\n' +
    ' * // "it works!"\n' +
    ' * ```\n' +
    ' *\n' +
    ' * Use async scheduler to repeat task in intervals\n' +
    ' * ```ts\n' +
    " * import { asyncScheduler } from 'rxjs';\n" +
    ' *\n' +
    ' * function task(state) {\n' +
    ' *   console.log(state);\n' +
    ' *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n' +
    ' *                                   // which we reschedule with new state and delay\n' +
    ' * }\n' +
    ' *\n' +
    ' * asyncScheduler.schedule(task, 3000, 0);\n' +
    ' *\n' +
    ' * // Logs:\n' +
    ' * // 0 after 3s\n' +
    ' * // 1 after 4s\n' +
    ' * // 2 after 5s\n' +
    ' * // 3 after 6s\n' +
    ' * ```\n' +
    ' */\n' +
    'export declare const asyncScheduler: AsyncScheduler;\n' +
    '/**\n' +
    ' * @deprecated renamed. Use {@link asyncScheduler}\n' +
    ' */\n' +
    'export declare const async: AsyncScheduler;\n',
  timestamp: 1669130813213
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/scheduler/queue.d.ts, [object Object]',
  timestamp: 1669130813215
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/scheduler/queue.d.ts: import { QueueScheduler } from './QueueScheduler';\n" +
    '/**\n' +
    ' *\n' +
    ' * Queue Scheduler\n' +
    ' *\n' +
    ' * <span class="informal">Put every next task on a queue, instead of executing it immediately</span>\n' +
    ' *\n' +
    ' * `queue` scheduler, when used with delay, behaves the same as {@link asyncScheduler} scheduler.\n' +
    ' *\n' +
    ' * When used without delay, it schedules given task synchronously - executes it right when\n' +
    ' * it is scheduled. However when called recursively, that is when inside the scheduled task,\n' +
    ' * another task is scheduled with queue scheduler, instead of executing immediately as well,\n' +
    ' * that task will be put on a queue and wait for current one to finish.\n' +
    ' *\n' +
    ' * This means that when you execute task with `queue` scheduler, you are sure it will end\n' +
    ' * before any other task scheduled with that scheduler will start.\n' +
    ' *\n' +
    ' * ## Examples\n' +
    ' * Schedule recursively first, then do something\n' +
    ' * ```ts\n' +
    " * import { queueScheduler } from 'rxjs';\n" +
    ' *\n' +
    ' * queueScheduler.schedule(() => {\n' +
    " *   queueScheduler.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n" +
    ' *\n' +
    " *   console.log('first');\n" +
    ' * });\n' +
    ' *\n' +
    ' * // Logs:\n' +
    ' * // "first"\n' +
    ' * // "second"\n' +
    ' * ```\n' +
    ' *\n' +
    ' * Reschedule itself recursively\n' +
    ' * ```ts\n' +
    " * import { queueScheduler } from 'rxjs';\n" +
    ' *\n' +
    ' * queueScheduler.schedule(function(state) {\n' +
    ' *   if (state !== 0) {\n' +
    " *     console.log('before', state);\n" +
    ' *     this.schedule(state - 1); // `this` references currently executing Action,\n' +
    ' *                               // which we reschedule with new state\n' +
    " *     console.log('after', state);\n" +
    ' *   }\n' +
    ' * }, 0, 3);\n' +
    ' *\n' +
    ' * // In scheduler that runs recursively, you would expect:\n' +
    ' * // "before", 3\n' +
    ' * // "before", 2\n' +
    ' * // "before", 1\n' +
    ' * // "after", 1\n' +
    ' * // "after", 2\n' +
    ' * // "after", 3\n' +
    ' *\n' +
    ' * // But with queue it logs:\n' +
    ' * // "before", 3\n' +
    ' * // "after", 3\n' +
    ' * // "before", 2\n' +
    ' * // "after", 2\n' +
    ' * // "before", 1\n' +
    ' * // "after", 1\n' +
    ' * ```\n' +
    ' */\n' +
    'export declare const queueScheduler: QueueScheduler;\n' +
    '/**\n' +
    ' * @deprecated renamed. Use {@link queueScheduler}\n' +
    ' */\n' +
    'export declare const queue: QueueScheduler;\n',
  timestamp: 1669130813215
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/scheduler: true',
  timestamp: 1669130813216
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/scheduler: true',
  timestamp: 1669130813216
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/scheduler/QueueScheduler.ts:false',
  timestamp: 1669130813216
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/scheduler/QueueScheduler.tsx:false',
  timestamp: 1669130813216
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/scheduler/QueueScheduler.d.ts:true',
  timestamp: 1669130813216
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/scheduler/QueueScheduler.d.ts, [object Object]',
  timestamp: 1669130813216
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/scheduler/QueueScheduler.d.ts: import { AsyncScheduler } from './AsyncScheduler';\n" +
    'export declare class QueueScheduler extends AsyncScheduler {\n' +
    '}\n',
  timestamp: 1669130813216
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/scheduler/animationFrame.d.ts, [object Object]',
  timestamp: 1669130813217
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/scheduler/animationFrame.d.ts: import { AnimationFrameScheduler } from './AnimationFrameScheduler';\n" +
    '/**\n' +
    ' *\n' +
    ' * Animation Frame Scheduler\n' +
    ' *\n' +
    ' * <span class="informal">Perform task when `window.requestAnimationFrame` would fire</span>\n' +
    ' *\n' +
    ' * When `animationFrame` scheduler is used with delay, it will fall back to {@link asyncScheduler} scheduler\n' +
    ' * behaviour.\n' +
    ' *\n' +
    ' * Without delay, `animationFrame` scheduler can be used to create smooth browser animations.\n' +
    ' * It makes sure scheduled task will happen just before next browser content repaint,\n' +
    ' * thus performing animations as efficiently as possible.\n' +
    ' *\n' +
    ' * ## Example\n' +
    ' * Schedule div height animation\n' +
    ' * ```ts\n' +
    ' * // html: <div style="background: #0ff;"></div>\n' +
    " * import { animationFrameScheduler } from 'rxjs';\n" +
    ' *\n' +
    " * const div = document.querySelector('div');\n" +
    ' *\n' +
    ' * animationFrameScheduler.schedule(function(height) {\n' +
    ' *   div.style.height = height + "px";\n' +
    ' *\n' +
    ' *   this.schedule(height + 1);  // `this` references currently executing Action,\n' +
    ' *                               // which we reschedule with new state\n' +
    ' * }, 0, 0);\n' +
    ' *\n' +
    ' * // You will see a div element growing in height\n' +
    ' * ```\n' +
    ' */\n' +
    'export declare const animationFrameScheduler: AnimationFrameScheduler;\n' +
    '/**\n' +
    ' * @deprecated renamed. Use {@link animationFrameScheduler}\n' +
    ' */\n' +
    'export declare const animationFrame: AnimationFrameScheduler;\n',
  timestamp: 1669130813217
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/scheduler: true',
  timestamp: 1669130813218
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/scheduler: true',
  timestamp: 1669130813218
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/scheduler/AnimationFrameScheduler.ts:false',
  timestamp: 1669130813218
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/scheduler/AnimationFrameScheduler.tsx:false',
  timestamp: 1669130813218
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/scheduler/AnimationFrameScheduler.d.ts:true',
  timestamp: 1669130813218
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/scheduler/AnimationFrameScheduler.d.ts, [object Object]',
  timestamp: 1669130813218
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/scheduler/AnimationFrameScheduler.d.ts: import { AsyncAction } from './AsyncAction';\n" +
    "import { AsyncScheduler } from './AsyncScheduler';\n" +
    'export declare class AnimationFrameScheduler extends AsyncScheduler {\n' +
    '    flush(action?: AsyncAction<any>): void;\n' +
    '}\n',
  timestamp: 1669130813218
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/scheduler/VirtualTimeScheduler.d.ts, [object Object]',
  timestamp: 1669130813219
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/scheduler/VirtualTimeScheduler.d.ts: import { AsyncAction } from './AsyncAction';\n" +
    "import { Subscription } from '../Subscription';\n" +
    "import { AsyncScheduler } from './AsyncScheduler';\n" +
    "import { SchedulerAction } from '../types';\n" +
    'export declare class VirtualTimeScheduler extends AsyncScheduler {\n' +
    '    maxFrames: number;\n' +
    '    protected static frameTimeFactor: number;\n' +
    '    frame: number;\n' +
    '    index: number;\n' +
    '    constructor(SchedulerAction?: typeof AsyncAction, maxFrames?: number);\n' +
    '    /**\n' +
    '     * Prompt the Scheduler to execute all of its queued actions, therefore\n' +
    '     * clearing its queue.\n' +
    '     * @return {void}\n' +
    '     */\n' +
    '    flush(): void;\n' +
    '}\n' +
    '/**\n' +
    ' * We need this JSDoc comment for affecting ESDoc.\n' +
    ' * @nodoc\n' +
    ' */\n' +
    'export declare class VirtualAction<T> extends AsyncAction<T> {\n' +
    '    protected scheduler: VirtualTimeScheduler;\n' +
    '    protected work: (this: SchedulerAction<T>, state?: T) => void;\n' +
    '    protected index: number;\n' +
    '    protected active: boolean;\n' +
    '    constructor(scheduler: VirtualTimeScheduler, work: (this: SchedulerAction<T>, state?: T) => void, index?: number);\n' +
    '    schedule(state?: T, delay?: number): Subscription;\n' +
    '    protected requestAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay?: number): any;\n' +
    '    protected recycleAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay?: number): any;\n' +
    '    protected _execute(state: T, delay: number): any;\n' +
    '    static sortActions<T>(a: VirtualAction<T>, b: VirtualAction<T>): 1 | 0 | -1;\n' +
    '}\n',
  timestamp: 1669130813219
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/util/pipe.d.ts, [object Object]',
  timestamp: 1669130813221
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/util/pipe.d.ts: import { UnaryFunction } from '../types';\n" +
    'export declare function pipe<T>(): UnaryFunction<T, T>;\n' +
    'export declare function pipe<T, A>(fn1: UnaryFunction<T, A>): UnaryFunction<T, A>;\n' +
    'export declare function pipe<T, A, B>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>): UnaryFunction<T, B>;\n' +
    'export declare function pipe<T, A, B, C>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>): UnaryFunction<T, C>;\n' +
    'export declare function pipe<T, A, B, C, D>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>): UnaryFunction<T, D>;\n' +
    'export declare function pipe<T, A, B, C, D, E>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>): UnaryFunction<T, E>;\n' +
    'export declare function pipe<T, A, B, C, D, E, F>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>): UnaryFunction<T, F>;\n' +
    'export declare function pipe<T, A, B, C, D, E, F, G>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>): UnaryFunction<T, G>;\n' +
    'export declare function pipe<T, A, B, C, D, E, F, G, H>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>, fn8: UnaryFunction<G, H>): UnaryFunction<T, H>;\n' +
    'export declare function pipe<T, A, B, C, D, E, F, G, H, I>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>, fn8: UnaryFunction<G, H>, fn9: UnaryFunction<H, I>): UnaryFunction<T, I>;\n' +
    'export declare function pipe<T, A, B, C, D, E, F, G, H, I>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>, fn8: UnaryFunction<G, H>, fn9: UnaryFunction<H, I>, ...fns: UnaryFunction<any, any>[]): UnaryFunction<T, {}>;\n' +
    '/** @internal */\n' +
    'export declare function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R>;\n',
  timestamp: 1669130813221
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813225
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813225
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/types.ts:false',
  timestamp: 1669130813225
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/types.tsx:false',
  timestamp: 1669130813225
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/types.d.ts:true',
  timestamp: 1669130813225
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/util/noop.d.ts, [object Object]',
  timestamp: 1669130813225
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: readFile /node_modules/rxjs/internal/util/noop.d.ts: export declare function noop(): void;\n',
  timestamp: 1669130813225
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/util/identity.d.ts, [object Object]',
  timestamp: 1669130813226
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: readFile /node_modules/rxjs/internal/util/identity.d.ts: export declare function identity<T>(x: T): T;\n',
  timestamp: 1669130813226
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/util/isObservable.d.ts, [object Object]',
  timestamp: 1669130813226
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/util/isObservable.d.ts: import { Observable } from '../Observable';\n" +
    '/**\n' +
    ' * Tests to see if the object is an RxJS {@link Observable}\n' +
    ' * @param obj the object to test\n' +
    ' */\n' +
    'export declare function isObservable<T>(obj: any): obj is Observable<T>;\n',
  timestamp: 1669130813226
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813226
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813227
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Observable.ts:false',
  timestamp: 1669130813227
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Observable.tsx:false',
  timestamp: 1669130813227
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Observable.d.ts:true',
  timestamp: 1669130813227
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/util/ArgumentOutOfRangeError.d.ts, [object Object]',
  timestamp: 1669130813227
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: readFile /node_modules/rxjs/internal/util/ArgumentOutOfRangeError.d.ts: export interface ArgumentOutOfRangeError extends Error {\n' +
    '}\n' +
    'export interface ArgumentOutOfRangeErrorCtor {\n' +
    '    new (): ArgumentOutOfRangeError;\n' +
    '}\n' +
    '/**\n' +
    ' * An error thrown when an element was queried at a certain index of an\n' +
    ' * Observable, but no such index or position exists in that sequence.\n' +
    ' *\n' +
    ' * @see {@link elementAt}\n' +
    ' * @see {@link take}\n' +
    ' * @see {@link takeLast}\n' +
    ' *\n' +
    ' * @class ArgumentOutOfRangeError\n' +
    ' */\n' +
    'export declare const ArgumentOutOfRangeError: ArgumentOutOfRangeErrorCtor;\n',
  timestamp: 1669130813227
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/util/EmptyError.d.ts, [object Object]',
  timestamp: 1669130813228
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: readFile /node_modules/rxjs/internal/util/EmptyError.d.ts: export interface EmptyError extends Error {\n' +
    '}\n' +
    'export interface EmptyErrorCtor {\n' +
    '    new (): EmptyError;\n' +
    '}\n' +
    '/**\n' +
    ' * An error thrown when an Observable or a sequence was queried but has no\n' +
    ' * elements.\n' +
    ' *\n' +
    ' * @see {@link first}\n' +
    ' * @see {@link last}\n' +
    ' * @see {@link single}\n' +
    ' *\n' +
    ' * @class EmptyError\n' +
    ' */\n' +
    'export declare const EmptyError: EmptyErrorCtor;\n',
  timestamp: 1669130813228
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/util/ObjectUnsubscribedError.d.ts, [object Object]',
  timestamp: 1669130813229
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: readFile /node_modules/rxjs/internal/util/ObjectUnsubscribedError.d.ts: export interface ObjectUnsubscribedError extends Error {\n' +
    '}\n' +
    'export interface ObjectUnsubscribedErrorCtor {\n' +
    '    new (): ObjectUnsubscribedError;\n' +
    '}\n' +
    '/**\n' +
    ' * An error thrown when an action is invalid because the object has been\n' +
    ' * unsubscribed.\n' +
    ' *\n' +
    ' * @see {@link Subject}\n' +
    ' * @see {@link BehaviorSubject}\n' +
    ' *\n' +
    ' * @class ObjectUnsubscribedError\n' +
    ' */\n' +
    'export declare const ObjectUnsubscribedError: ObjectUnsubscribedErrorCtor;\n',
  timestamp: 1669130813229
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/util/UnsubscriptionError.d.ts, [object Object]',
  timestamp: 1669130813230
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: readFile /node_modules/rxjs/internal/util/UnsubscriptionError.d.ts: export interface UnsubscriptionError extends Error {\n' +
    '    readonly errors: any[];\n' +
    '}\n' +
    'export interface UnsubscriptionErrorCtor {\n' +
    '    new (errors: any[]): UnsubscriptionError;\n' +
    '}\n' +
    '/**\n' +
    ' * An error thrown when one or more errors have occurred during the\n' +
    ' * `unsubscribe` of a {@link Subscription}.\n' +
    ' */\n' +
    'export declare const UnsubscriptionError: UnsubscriptionErrorCtor;\n',
  timestamp: 1669130813230
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/util/TimeoutError.d.ts, [object Object]',
  timestamp: 1669130813230
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: readFile /node_modules/rxjs/internal/util/TimeoutError.d.ts: export interface TimeoutError extends Error {\n' +
    '}\n' +
    'export interface TimeoutErrorCtor {\n' +
    '    new (): TimeoutError;\n' +
    '}\n' +
    '/**\n' +
    ' * An error thrown when duetime elapses.\n' +
    ' *\n' +
    ' * @see {@link operators/timeout}\n' +
    ' *\n' +
    ' * @class TimeoutError\n' +
    ' */\n' +
    'export declare const TimeoutError: TimeoutErrorCtor;\n',
  timestamp: 1669130813230
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/observable/bindCallback.d.ts, [object Object]',
  timestamp: 1669130813231
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/observable/bindCallback.d.ts: import { SchedulerLike } from '../types';\n" +
    "import { Observable } from '../Observable';\n" +
    '/** @deprecated resultSelector is no longer supported, use a mapping function. */\n' +
    'export declare function bindCallback(callbackFunc: Function, resultSelector: Function, scheduler?: SchedulerLike): (...args: any[]) => Observable<any>;\n' +
    'export declare function bindCallback<R1, R2, R3, R4>(callbackFunc: (callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): () => Observable<any[]>;\n' +
    'export declare function bindCallback<R1, R2, R3>(callbackFunc: (callback: (res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): () => Observable<[R1, R2, R3]>;\n' +
    'export declare function bindCallback<R1, R2>(callbackFunc: (callback: (res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): () => Observable<[R1, R2]>;\n' +
    'export declare function bindCallback<R1>(callbackFunc: (callback: (res1: R1) => any) => any, scheduler?: SchedulerLike): () => Observable<R1>;\n' +
    'export declare function bindCallback(callbackFunc: (callback: () => any) => any, scheduler?: SchedulerLike): () => Observable<void>;\n' +
    'export declare function bindCallback<A1, R1, R2, R3, R4>(callbackFunc: (arg1: A1, callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<any[]>;\n' +
    'export declare function bindCallback<A1, R1, R2, R3>(callbackFunc: (arg1: A1, callback: (res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<[R1, R2, R3]>;\n' +
    'export declare function bindCallback<A1, R1, R2>(callbackFunc: (arg1: A1, callback: (res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<[R1, R2]>;\n' +
    'export declare function bindCallback<A1, R1>(callbackFunc: (arg1: A1, callback: (res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<R1>;\n' +
    'export declare function bindCallback<A1>(callbackFunc: (arg1: A1, callback: () => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<void>;\n' +
    'export declare function bindCallback<A1, A2, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<any[]>;\n' +
    'export declare function bindCallback<A1, A2, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, callback: (res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<[R1, R2, R3]>;\n' +
    'export declare function bindCallback<A1, A2, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, callback: (res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<[R1, R2]>;\n' +
    'export declare function bindCallback<A1, A2, R1>(callbackFunc: (arg1: A1, arg2: A2, callback: (res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<R1>;\n' +
    'export declare function bindCallback<A1, A2>(callbackFunc: (arg1: A1, arg2: A2, callback: () => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<void>;\n' +
    'export declare function bindCallback<A1, A2, A3, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<any[]>;\n' +
    'export declare function bindCallback<A1, A2, A3, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<[R1, R2, R3]>;\n' +
    'export declare function bindCallback<A1, A2, A3, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<[R1, R2]>;\n' +
    'export declare function bindCallback<A1, A2, A3, R1>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<R1>;\n' +
    'export declare function bindCallback<A1, A2, A3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: () => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<void>;\n' +
    'export declare function bindCallback<A1, A2, A3, A4, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<any[]>;\n' +
    'export declare function bindCallback<A1, A2, A3, A4, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<[R1, R2, R3]>;\n' +
    'export declare function bindCallback<A1, A2, A3, A4, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<[R1, R2]>;\n' +
    'export declare function bindCallback<A1, A2, A3, A4, R1>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<R1>;\n' +
    'export declare function bindCallback<A1, A2, A3, A4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: () => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<void>;\n' +
    'export declare function bindCallback<A1, A2, A3, A4, A5, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<any[]>;\n' +
    'export declare function bindCallback<A1, A2, A3, A4, A5, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<[R1, R2, R3]>;\n' +
    'export declare function bindCallback<A1, A2, A3, A4, A5, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<[R1, R2]>;\n' +
    'export declare function bindCallback<A1, A2, A3, A4, A5, R1>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<R1>;\n' +
    'export declare function bindCallback<A1, A2, A3, A4, A5>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: () => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<void>;\n' +
    'export declare function bindCallback<A, R>(callbackFunc: (...args: Array<A | ((result: R) => any)>) => any, scheduler?: SchedulerLike): (...args: A[]) => Observable<R>;\n' +
    'export declare function bindCallback<A, R>(callbackFunc: (...args: Array<A | ((...results: R[]) => any)>) => any, scheduler?: SchedulerLike): (...args: A[]) => Observable<R[]>;\n' +
    'export declare function bindCallback(callbackFunc: Function, scheduler?: SchedulerLike): (...args: any[]) => Observable<any>;\n',
  timestamp: 1669130813231
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/observable/bindNodeCallback.d.ts, [object Object]',
  timestamp: 1669130813246
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/observable/bindNodeCallback.d.ts: import { Observable } from '../Observable';\n" +
    "import { SchedulerLike } from '../types';\n" +
    '/** @deprecated resultSelector is deprecated, pipe to map instead */\n' +
    'export declare function bindNodeCallback(callbackFunc: Function, resultSelector: Function, scheduler?: SchedulerLike): (...args: any[]) => Observable<any>;\n' +
    'export declare function bindNodeCallback<R1, R2, R3, R4>(callbackFunc: (callback: (err: any, res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (...args: any[]) => Observable<any[]>;\n' +
    'export declare function bindNodeCallback<R1, R2, R3>(callbackFunc: (callback: (err: any, res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): () => Observable<[R1, R2, R3]>;\n' +
    'export declare function bindNodeCallback<R1, R2>(callbackFunc: (callback: (err: any, res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): () => Observable<[R1, R2]>;\n' +
    'export declare function bindNodeCallback<R1>(callbackFunc: (callback: (err: any, res1: R1) => any) => any, scheduler?: SchedulerLike): () => Observable<R1>;\n' +
    'export declare function bindNodeCallback(callbackFunc: (callback: (err: any) => any) => any, scheduler?: SchedulerLike): () => Observable<void>;\n' +
    'export declare function bindNodeCallback<A1, R1, R2, R3, R4>(callbackFunc: (arg1: A1, callback: (err: any, res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (...args: any[]) => Observable<any[]>;\n' +
    'export declare function bindNodeCallback<A1, R1, R2, R3>(callbackFunc: (arg1: A1, callback: (err: any, res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<[R1, R2, R3]>;\n' +
    'export declare function bindNodeCallback<A1, R1, R2>(callbackFunc: (arg1: A1, callback: (err: any, res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<[R1, R2]>;\n' +
    'export declare function bindNodeCallback<A1, R1>(callbackFunc: (arg1: A1, callback: (err: any, res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<R1>;\n' +
    'export declare function bindNodeCallback<A1>(callbackFunc: (arg1: A1, callback: (err: any) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<void>;\n' +
    'export declare function bindNodeCallback<A1, A2, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, callback: (err: any, res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (...args: any[]) => Observable<any[]>;\n' +
    'export declare function bindNodeCallback<A1, A2, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, callback: (err: any, res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<[R1, R2, R3]>;\n' +
    'export declare function bindNodeCallback<A1, A2, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, callback: (err: any, res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<[R1, R2]>;\n' +
    'export declare function bindNodeCallback<A1, A2, R1>(callbackFunc: (arg1: A1, arg2: A2, callback: (err: any, res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<R1>;\n' +
    'export declare function bindNodeCallback<A1, A2>(callbackFunc: (arg1: A1, arg2: A2, callback: (err: any) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<void>;\n' +
    'export declare function bindNodeCallback<A1, A2, A3, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (err: any, res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (...args: any[]) => Observable<any[]>;\n' +
    'export declare function bindNodeCallback<A1, A2, A3, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (err: any, res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<[R1, R2, R3]>;\n' +
    'export declare function bindNodeCallback<A1, A2, A3, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (err: any, res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<[R1, R2]>;\n' +
    'export declare function bindNodeCallback<A1, A2, A3, R1>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (err: any, res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<R1>;\n' +
    'export declare function bindNodeCallback<A1, A2, A3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (err: any) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<void>;\n' +
    'export declare function bindNodeCallback<A1, A2, A3, A4, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (err: any, res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (...args: any[]) => Observable<any[]>;\n' +
    'export declare function bindNodeCallback<A1, A2, A3, A4, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (err: any, res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<[R1, R2, R3]>;\n' +
    'export declare function bindNodeCallback<A1, A2, A3, A4, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (err: any, res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<[R1, R2]>;\n' +
    'export declare function bindNodeCallback<A1, A2, A3, A4, R1>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (err: any, res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<R1>;\n' +
    'export declare function bindNodeCallback<A1, A2, A3, A4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (err: any) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<void>;\n' +
    'export declare function bindNodeCallback<A1, A2, A3, A4, A5, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (err: any, res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (...args: any[]) => Observable<any[]>;\n' +
    'export declare function bindNodeCallback<A1, A2, A3, A4, A5, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (err: any, res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<[R1, R2, R3]>;\n' +
    'export declare function bindNodeCallback<A1, A2, A3, A4, A5, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (err: any, res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<[R1, R2]>;\n' +
    'export declare function bindNodeCallback<A1, A2, A3, A4, A5, R1>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (err: any, res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<R1>;\n' +
    'export declare function bindNodeCallback<A1, A2, A3, A4, A5>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (err: any) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<void>;\n' +
    'export declare function bindNodeCallback(callbackFunc: Function, scheduler?: SchedulerLike): (...args: any[]) => Observable<any[]>;\n',
  timestamp: 1669130813247
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/observable/combineLatest.d.ts, [object Object]',
  timestamp: 1669130813260
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/observable/combineLatest.d.ts: import { Observable } from '../Observable';\n" +
    "import { ObservableInput, SchedulerLike, ObservedValueOf } from '../types';\n" +
    "import { Subscriber } from '../Subscriber';\n" +
    "import { OuterSubscriber } from '../OuterSubscriber';\n" +
    "import { Operator } from '../Operator';\n" +
    '/** @deprecated resultSelector no longer supported, pipe to map instead */\n' +
    'export declare function combineLatest<O1 extends ObservableInput<any>, R>(sources: [O1], resultSelector: (v1: ObservedValueOf<O1>) => R, scheduler?: SchedulerLike): Observable<R>;\n' +
    '/** @deprecated resultSelector no longer supported, pipe to map instead */\n' +
    'export declare function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, R>(sources: [O1, O2], resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>) => R, scheduler?: SchedulerLike): Observable<R>;\n' +
    '/** @deprecated resultSelector no longer supported, pipe to map instead */\n' +
    'export declare function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, R>(sources: [O1, O2, O3], resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>) => R, scheduler?: SchedulerLike): Observable<R>;\n' +
    '/** @deprecated resultSelector no longer supported, pipe to map instead */\n' +
    'export declare function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, R>(sources: [O1, O2, O3, O4], resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>) => R, scheduler?: SchedulerLike): Observable<R>;\n' +
    '/** @deprecated resultSelector no longer supported, pipe to map instead */\n' +
    'export declare function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, R>(sources: [O1, O2, O3, O4, O5], resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>, v5: ObservedValueOf<O5>) => R, scheduler?: SchedulerLike): Observable<R>;\n' +
    '/** @deprecated resultSelector no longer supported, pipe to map instead */\n' +
    'export declare function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, O6 extends ObservableInput<any>, R>(sources: [O1, O2, O3, O4, O5, O6], resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>, v5: ObservedValueOf<O5>, v6: ObservedValueOf<O6>) => R, scheduler?: SchedulerLike): Observable<R>;\n' +
    '/** @deprecated resultSelector no longer supported, pipe to map instead */\n' +
    'export declare function combineLatest<O extends ObservableInput<any>, R>(sources: O[], resultSelector: (...args: ObservedValueOf<O>[]) => R, scheduler?: SchedulerLike): Observable<R>;\n' +
    '/** @deprecated resultSelector no longer supported, pipe to map instead */\n' +
    'export declare function combineLatest<O1 extends ObservableInput<any>, R>(v1: O1, resultSelector: (v1: ObservedValueOf<O1>) => R, scheduler?: SchedulerLike): Observable<R>;\n' +
    '/** @deprecated resultSelector no longer supported, pipe to map instead */\n' +
    'export declare function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, R>(v1: O1, v2: O2, resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>) => R, scheduler?: SchedulerLike): Observable<R>;\n' +
    '/** @deprecated resultSelector no longer supported, pipe to map instead */\n' +
    'export declare function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, R>(v1: O1, v2: O2, v3: O3, resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>) => R, scheduler?: SchedulerLike): Observable<R>;\n' +
    '/** @deprecated resultSelector no longer supported, pipe to map instead */\n' +
    'export declare function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, R>(v1: O1, v2: O2, v3: O3, v4: O4, resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>) => R, scheduler?: SchedulerLike): Observable<R>;\n' +
    '/** @deprecated resultSelector no longer supported, pipe to map instead */\n' +
    'export declare function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, R>(v1: O1, v2: O2, v3: O3, v4: O4, v5: O5, resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>, v5: ObservedValueOf<O5>) => R, scheduler?: SchedulerLike): Observable<R>;\n' +
    '/** @deprecated resultSelector no longer supported, pipe to map instead */\n' +
    'export declare function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, O6 extends ObservableInput<any>, R>(v1: O1, v2: O2, v3: O3, v4: O4, v5: O5, v6: O6, resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>, v5: ObservedValueOf<O5>, v6: ObservedValueOf<O6>) => R, scheduler?: SchedulerLike): Observable<R>;\n' +
    '/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */\n' +
    'export declare function combineLatest<O1 extends ObservableInput<any>>(sources: [O1], scheduler: SchedulerLike): Observable<[ObservedValueOf<O1>]>;\n' +
    '/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */\n' +
    'export declare function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>>(sources: [O1, O2], scheduler: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>]>;\n' +
    '/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */\n' +
    'export declare function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>>(sources: [O1, O2, O3], scheduler: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>]>;\n' +
    '/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */\n' +
    'export declare function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>>(sources: [O1, O2, O3, O4], scheduler: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>]>;\n' +
    '/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */\n' +
    'export declare function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>>(sources: [O1, O2, O3, O4, O5], scheduler: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>, ObservedValueOf<O5>]>;\n' +
    '/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */\n' +
    'export declare function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, O6 extends ObservableInput<any>>(sources: [O1, O2, O3, O4, O5, O6], scheduler: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>, ObservedValueOf<O5>, ObservedValueOf<O6>]>;\n' +
    '/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */\n' +
    'export declare function combineLatest<O extends ObservableInput<any>>(sources: O[], scheduler: SchedulerLike): Observable<ObservedValueOf<O>[]>;\n' +
    'export declare function combineLatest<O1 extends ObservableInput<any>>(sources: [O1]): Observable<[ObservedValueOf<O1>]>;\n' +
    'export declare function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>>(sources: [O1, O2]): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>]>;\n' +
    'export declare function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>>(sources: [O1, O2, O3]): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>]>;\n' +
    'export declare function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>>(sources: [O1, O2, O3, O4]): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>]>;\n' +
    'export declare function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>>(sources: [O1, O2, O3, O4, O5]): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>, ObservedValueOf<O5>]>;\n' +
    'export declare function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, O6 extends ObservableInput<any>>(sources: [O1, O2, O3, O4, O5, O6]): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>, ObservedValueOf<O5>, ObservedValueOf<O6>]>;\n' +
    'export declare function combineLatest<O extends ObservableInput<any>>(sources: O[]): Observable<ObservedValueOf<O>[]>;\n' +
    '/** @deprecated Pass arguments in a single array instead `combineLatest([a, b, c])` */\n' +
    'export declare function combineLatest<O1 extends ObservableInput<any>>(v1: O1, scheduler?: SchedulerLike): Observable<[ObservedValueOf<O1>]>;\n' +
    '/** @deprecated Pass arguments in a single array instead `combineLatest([a, b, c])` */\n' +
    'export declare function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>>(v1: O1, v2: O2, scheduler?: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>]>;\n' +
    '/** @deprecated Pass arguments in a single array instead `combineLatest([a, b, c])` */\n' +
    'export declare function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>>(v1: O1, v2: O2, v3: O3, scheduler?: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>]>;\n' +
    '/** @deprecated Pass arguments in a single array instead `combineLatest([a, b, c])` */\n' +
    'export declare function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>>(v1: O1, v2: O2, v3: O3, v4: O4, scheduler?: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>]>;\n' +
    '/** @deprecated Pass arguments in a single array instead `combineLatest([a, b, c])` */\n' +
    'export declare function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>>(v1: O1, v2: O2, v3: O3, v4: O4, v5: O5, scheduler?: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>, ObservedValueOf<O5>]>;\n' +
    '/** @deprecated Pass arguments in a single array instead `combineLatest([a, b, c])` */\n' +
    'export declare function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, O6 extends ObservableInput<any>>(v1: O1, v2: O2, v3: O3, v4: O4, v5: O5, v6: O6, scheduler?: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>, ObservedValueOf<O5>, ObservedValueOf<O6>]>;\n' +
    '/** @deprecated Pass arguments in a single array instead `combineLatest([a, b, c])` */\n' +
    'export declare function combineLatest<O extends ObservableInput<any>>(...observables: O[]): Observable<any[]>;\n' +
    '/** @deprecated Pass arguments in a single array instead `combineLatest([a, b, c])` */\n' +
    'export declare function combineLatest<O extends ObservableInput<any>, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n' +
    '/** @deprecated resultSelector no longer supported, pipe to map instead */\n' +
    'export declare function combineLatest<O extends ObservableInput<any>, R>(array: O[], resultSelector: (...values: ObservedValueOf<O>[]) => R, scheduler?: SchedulerLike): Observable<R>;\n' +
    '/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */\n' +
    'export declare function combineLatest<O extends ObservableInput<any>>(...observables: Array<O | SchedulerLike>): Observable<any[]>;\n' +
    '/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */\n' +
    'export declare function combineLatest<O extends ObservableInput<any>, R>(...observables: Array<O | ((...values: ObservedValueOf<O>[]) => R) | SchedulerLike>): Observable<R>;\n' +
    '/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */\n' +
    'export declare function combineLatest<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R) | SchedulerLike>): Observable<R>;\n' +
    'export declare class CombineLatestOperator<T, R> implements Operator<T, R> {\n' +
    '    private resultSelector?;\n' +
    '    constructor(resultSelector?: (...values: Array<any>) => R);\n' +
    '    call(subscriber: Subscriber<R>, source: any): any;\n' +
    '}\n' +
    '/**\n' +
    ' * We need this JSDoc comment for affecting ESDoc.\n' +
    ' * @ignore\n' +
    ' * @extends {Ignored}\n' +
    ' */\n' +
    'export declare class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n' +
    '    private resultSelector?;\n' +
    '    private active;\n' +
    '    private values;\n' +
    '    private observables;\n' +
    '    private toRespond?;\n' +
    '    constructor(destination: Subscriber<R>, resultSelector?: (...values: Array<any>) => R);\n' +
    '    protected _next(observable: any): void;\n' +
    '    protected _complete(): void;\n' +
    '    notifyComplete(unused: Subscriber<R>): void;\n' +
    '    notifyNext(_outerValue: T, innerValue: R, outerIndex: number): void;\n' +
    '    private _tryResultSelector;\n' +
    '}\n',
  timestamp: 1669130813261
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813275
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813275
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/OuterSubscriber.ts:false',
  timestamp: 1669130813275
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/OuterSubscriber.tsx:false',
  timestamp: 1669130813275
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/OuterSubscriber.d.ts:true',
  timestamp: 1669130813275
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813275
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813275
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Operator.ts:false',
  timestamp: 1669130813275
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Operator.tsx:false',
  timestamp: 1669130813275
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/Operator.d.ts:true',
  timestamp: 1669130813275
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/OuterSubscriber.d.ts, [object Object]',
  timestamp: 1669130813276
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/OuterSubscriber.d.ts: import { Subscriber } from './Subscriber';\n" +
    "import { InnerSubscriber } from './InnerSubscriber';\n" +
    '/**\n' +
    ' * We need this JSDoc comment for affecting ESDoc.\n' +
    ' * @ignore\n' +
    ' * @extends {Ignored}\n' +
    ' */\n' +
    'export declare class OuterSubscriber<T, R> extends Subscriber<T> {\n' +
    '    notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number, innerSub: InnerSubscriber<T, R>): void;\n' +
    '    notifyError(error: any, innerSub: InnerSubscriber<T, R>): void;\n' +
    '    notifyComplete(innerSub: InnerSubscriber<T, R>): void;\n' +
    '}\n',
  timestamp: 1669130813276
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813276
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813276
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/InnerSubscriber.ts:false',
  timestamp: 1669130813276
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/InnerSubscriber.tsx:false',
  timestamp: 1669130813277
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/InnerSubscriber.d.ts:true',
  timestamp: 1669130813277
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/InnerSubscriber.d.ts, [object Object]',
  timestamp: 1669130813277
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/InnerSubscriber.d.ts: import { Subscriber } from './Subscriber';\n" +
    "import { OuterSubscriber } from './OuterSubscriber';\n" +
    '/**\n' +
    ' * We need this JSDoc comment for affecting ESDoc.\n' +
    ' * @ignore\n' +
    ' * @extends {Ignored}\n' +
    ' */\n' +
    'export declare class InnerSubscriber<T, R> extends Subscriber<R> {\n' +
    '    private parent;\n' +
    '    outerValue: T;\n' +
    '    outerIndex: number;\n' +
    '    private index;\n' +
    '    constructor(parent: OuterSubscriber<T, R>, outerValue: T, outerIndex: number);\n' +
    '    protected _next(value: R): void;\n' +
    '    protected _error(error: any): void;\n' +
    '    protected _complete(): void;\n' +
    '}\n',
  timestamp: 1669130813277
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813277
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal: true',
  timestamp: 1669130813277
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/OuterSubscriber.ts:false',
  timestamp: 1669130813278
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/OuterSubscriber.tsx:false',
  timestamp: 1669130813278
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/OuterSubscriber.d.ts:true',
  timestamp: 1669130813278
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/observable/concat.d.ts, [object Object]',
  timestamp: 1669130813278
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/observable/concat.d.ts: import { Observable } from '../Observable';\n" +
    "import { ObservableInput, SchedulerLike, ObservedValueOf } from '../types';\n" +
    '/** @deprecated Use {@link scheduled} and {@link concatAll} (e.g. `scheduled([o1, o2, o3], scheduler).pipe(concatAll())`) */\n' +
    'export declare function concat<O1 extends ObservableInput<any>>(v1: O1, scheduler: SchedulerLike): Observable<ObservedValueOf<O1>>;\n' +
    '/** @deprecated Use {@link scheduled} and {@link concatAll} (e.g. `scheduled([o1, o2, o3], scheduler).pipe(concatAll())`) */\n' +
    'export declare function concat<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>>(v1: O1, v2: O2, scheduler: SchedulerLike): Observable<ObservedValueOf<O1> | ObservedValueOf<O2>>;\n' +
    '/** @deprecated Use {@link scheduled} and {@link concatAll} (e.g. `scheduled([o1, o2, o3], scheduler).pipe(concatAll())`) */\n' +
    'export declare function concat<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>>(v1: O1, v2: O2, v3: O3, scheduler: SchedulerLike): Observable<ObservedValueOf<O1> | ObservedValueOf<O2> | ObservedValueOf<O3>>;\n' +
    '/** @deprecated Use {@link scheduled} and {@link concatAll} (e.g. `scheduled([o1, o2, o3], scheduler).pipe(concatAll())`) */\n' +
    'export declare function concat<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>>(v1: O1, v2: O2, v3: O3, v4: O4, scheduler: SchedulerLike): Observable<ObservedValueOf<O1> | ObservedValueOf<O2> | ObservedValueOf<O3> | ObservedValueOf<O4>>;\n' +
    '/** @deprecated Use {@link scheduled} and {@link concatAll} (e.g. `scheduled([o1, o2, o3], scheduler).pipe(concatAll())`) */\n' +
    'export declare function concat<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>>(v1: O1, v2: O2, v3: O3, v4: O4, v5: O5, scheduler: SchedulerLike): Observable<ObservedValueOf<O1> | ObservedValueOf<O2> | ObservedValueOf<O3> | ObservedValueOf<O4> | ObservedValueOf<O5>>;\n' +
    '/** @deprecated Use {@link scheduled} and {@link concatAll} (e.g. `scheduled([o1, o2, o3], scheduler).pipe(concatAll())`) */\n' +
    'export declare function concat<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, O6 extends ObservableInput<any>>(v1: O1, v2: O2, v3: O3, v4: O4, v5: O5, v6: O6, scheduler: SchedulerLike): Observable<ObservedValueOf<O1> | ObservedValueOf<O2> | ObservedValueOf<O3> | ObservedValueOf<O4> | ObservedValueOf<O5> | ObservedValueOf<O6>>;\n' +
    'export declare function concat<O1 extends ObservableInput<any>>(v1: O1): Observable<ObservedValueOf<O1>>;\n' +
    'export declare function concat<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>>(v1: O1, v2: O2): Observable<ObservedValueOf<O1> | ObservedValueOf<O2>>;\n' +
    'export declare function concat<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>>(v1: O1, v2: O2, v3: O3): Observable<ObservedValueOf<O1> | ObservedValueOf<O2> | ObservedValueOf<O3>>;\n' +
    'export declare function concat<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>>(v1: O1, v2: O2, v3: O3, v4: O4): Observable<ObservedValueOf<O1> | ObservedValueOf<O2> | ObservedValueOf<O3> | ObservedValueOf<O4>>;\n' +
    'export declare function concat<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>>(v1: O1, v2: O2, v3: O3, v4: O4, v5: O5): Observable<ObservedValueOf<O1> | ObservedValueOf<O2> | ObservedValueOf<O3> | ObservedValueOf<O4> | ObservedValueOf<O5>>;\n' +
    'export declare function concat<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, O6 extends ObservableInput<any>>(v1: O1, v2: O2, v3: O3, v4: O4, v5: O5, v6: O6): Observable<ObservedValueOf<O1> | ObservedValueOf<O2> | ObservedValueOf<O3> | ObservedValueOf<O4> | ObservedValueOf<O5> | ObservedValueOf<O6>>;\n' +
    'export declare function concat<O extends ObservableInput<any>>(...observables: O[]): Observable<ObservedValueOf<O>>;\n' +
    '/** @deprecated Use {@link scheduled} and {@link concatAll} (e.g. `scheduled([o1, o2, o3], scheduler).pipe(concatAll())`) */\n' +
    'export declare function concat<O extends ObservableInput<any>>(...observables: (O | SchedulerLike)[]): Observable<ObservedValueOf<O>>;\n' +
    'export declare function concat<R>(...observables: ObservableInput<any>[]): Observable<R>;\n' +
    '/** @deprecated Use {@link scheduled} and {@link concatAll} (e.g. `scheduled([o1, o2, o3], scheduler).pipe(concatAll())`) */\n' +
    'export declare function concat<R>(...observables: (ObservableInput<any> | SchedulerLike)[]): Observable<R>;\n',
  timestamp: 1669130813278
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/observable/defer.d.ts, [object Object]',
  timestamp: 1669130813280
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/observable/defer.d.ts: import { Observable } from '../Observable';\n" +
    "import { ObservedValueOf, ObservableInput } from '../types';\n" +
    '/**\n' +
    ' * Creates an Observable that, on subscribe, calls an Observable factory to\n' +
    ' * make an Observable for each new Observer.\n' +
    ' *\n' +
    ' * <span class="informal">Creates the Observable lazily, that is, only when it\n' +
    ' * is subscribed.\n' +
    ' * </span>\n' +
    ' *\n' +
    ' * ![](defer.png)\n' +
    ' *\n' +
    ' * `defer` allows you to create the Observable only when the Observer\n' +
    ' * subscribes, and create a fresh Observable for each Observer. It waits until\n' +
    ' * an Observer subscribes to it, and then it generates an Observable,\n' +
    ' * typically with an Observable factory function. It does this afresh for each\n' +
    ' * subscriber, so although each subscriber may think it is subscribing to the\n' +
    ' * same Observable, in fact each subscriber gets its own individual\n' +
    ' * Observable.\n' +
    ' *\n' +
    ' * ## Example\n' +
    ' * ### Subscribe to either an Observable of clicks or an Observable of interval, at random\n' +
    ' * ```ts\n' +
    " * import { defer, fromEvent, interval } from 'rxjs';\n" +
    ' *\n' +
    ' * const clicksOrInterval = defer(function () {\n' +
    ' *   return Math.random() > 0.5\n' +
    " *     ? fromEvent(document, 'click')\n" +
    ' *     : interval(1000);\n' +
    ' * });\n' +
    ' * clicksOrInterval.subscribe(x => console.log(x));\n' +
    ' *\n' +
    ' * // Results in the following behavior:\n' +
    ' * // If the result of Math.random() is greater than 0.5 it will listen\n' +
    ' * // for clicks anywhere on the "document"; when document is clicked it\n' +
    ' * // will log a MouseEvent object to the console. If the result is less\n' +
    ' * // than 0.5 it will emit ascending numbers, one every second(1000ms).\n' +
    ' * ```\n' +
    ' *\n' +
    ' * @see {@link Observable}\n' +
    ' *\n' +
    ' * @param {function(): SubscribableOrPromise} observableFactory The Observable\n' +
    ' * factory function to invoke for each Observer that subscribes to the output\n' +
    ' * Observable. May also return a Promise, which will be converted on the fly\n' +
    ' * to an Observable.\n' +
    " * @return {Observable} An Observable whose Observers' subscriptions trigger\n" +
    ' * an invocation of the given Observable factory function.\n' +
    ' * @static true\n' +
    ' * @name defer\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function defer<R extends ObservableInput<any> | void>(observableFactory: () => R): Observable<ObservedValueOf<R>>;\n',
  timestamp: 1669130813281
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/observable/empty.d.ts, [object Object]',
  timestamp: 1669130813281
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/observable/empty.d.ts: import { Observable } from '../Observable';\n" +
    "import { SchedulerLike } from '../types';\n" +
    '/**\n' +
    ' * The same Observable instance returned by any call to {@link empty} without a\n' +
    ' * `scheduler`. It is preferrable to use this over `empty()`.\n' +
    ' */\n' +
    'export declare const EMPTY: Observable<never>;\n' +
    '/**\n' +
    ' * Creates an Observable that emits no items to the Observer and immediately\n' +
    ' * emits a complete notification.\n' +
    ' *\n' +
    ` * <span class="informal">Just emits 'complete', and nothing else.\n` +
    ' * </span>\n' +
    ' *\n' +
    ' * ![](empty.png)\n' +
    ' *\n' +
    ' * This static operator is useful for creating a simple Observable that only\n' +
    ' * emits the complete notification. It can be used for composing with other\n' +
    ' * Observables, such as in a {@link mergeMap}.\n' +
    ' *\n' +
    ' * ## Examples\n' +
    ' * ### Emit the number 7, then complete\n' +
    ' * ```ts\n' +
    " * import { empty } from 'rxjs';\n" +
    " * import { startWith } from 'rxjs/operators';\n" +
    ' *\n' +
    ' * const result = empty().pipe(startWith(7));\n' +
    ' * result.subscribe(x => console.log(x));\n' +
    ' * ```\n' +
    ' *\n' +
    " * ### Map and flatten only odd numbers to the sequence 'a', 'b', 'c'\n" +
    ' * ```ts\n' +
    " * import { empty, interval, of } from 'rxjs';\n" +
    " * import { mergeMap } from 'rxjs/operators';\n" +
    ' *\n' +
    ' * const interval$ = interval(1000);\n' +
    ' * const result = interval$.pipe(\n' +
    " *   mergeMap(x => x % 2 === 1 ? of('a', 'b', 'c') : empty()),\n" +
    ' * );\n' +
    ' * result.subscribe(x => console.log(x));\n' +
    ' *\n' +
    ' * // Results in the following to the console:\n' +
    ' * // x is equal to the count on the interval eg(0,1,2,3,...)\n' +
    ' * // x will occur every 1000ms\n' +
    ' * // if x % 2 is equal to 1 print abc\n' +
    ' * // if x % 2 is not equal to 1 nothing will be output\n' +
    ' * ```\n' +
    ' *\n' +
    ' * @see {@link Observable}\n' +
    ' * @see {@link never}\n' +
    ' * @see {@link of}\n' +
    ' * @see {@link throwError}\n' +
    ' *\n' +
    ' * @param scheduler A {@link SchedulerLike} to use for scheduling\n' +
    ' * the emission of the complete notification.\n' +
    ' * @return An "empty" Observable: emits only the complete\n' +
    ' * notification.\n' +
    ' * @deprecated Deprecated in favor of using {@link EMPTY} constant, or {@link scheduled} (e.g. `scheduled([], scheduler)`)\n' +
    ' */\n' +
    'export declare function empty(scheduler?: SchedulerLike): Observable<never>;\n',
  timestamp: 1669130813281
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/observable/forkJoin.d.ts, [object Object]',
  timestamp: 1669130813283
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/observable/forkJoin.d.ts: import { Observable } from '../Observable';\n" +
    "import { ObservableInput, ObservedValuesFromArray, ObservedValueOf, SubscribableOrPromise } from '../types';\n" +
    '/** @deprecated Use the version that takes an array of Observables instead */\n' +
    'export declare function forkJoin<T>(v1: SubscribableOrPromise<T>): Observable<[T]>;\n' +
    '/** @deprecated Use the version that takes an array of Observables instead */\n' +
    'export declare function forkJoin<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\n' +
    '/** @deprecated Use the version that takes an array of Observables instead */\n' +
    'export declare function forkJoin<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\n' +
    '/** @deprecated Use the version that takes an array of Observables instead */\n' +
    'export declare function forkJoin<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\n' +
    '/** @deprecated Use the version that takes an array of Observables instead */\n' +
    'export declare function forkJoin<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\n' +
    '/** @deprecated Use the version that takes an array of Observables instead */\n' +
    'export declare function forkJoin<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n' +
    'export declare function forkJoin<A>(sources: [ObservableInput<A>]): Observable<[A]>;\n' +
    'export declare function forkJoin<A, B>(sources: [ObservableInput<A>, ObservableInput<B>]): Observable<[A, B]>;\n' +
    'export declare function forkJoin<A, B, C>(sources: [ObservableInput<A>, ObservableInput<B>, ObservableInput<C>]): Observable<[A, B, C]>;\n' +
    'export declare function forkJoin<A, B, C, D>(sources: [ObservableInput<A>, ObservableInput<B>, ObservableInput<C>, ObservableInput<D>]): Observable<[A, B, C, D]>;\n' +
    'export declare function forkJoin<A, B, C, D, E>(sources: [ObservableInput<A>, ObservableInput<B>, ObservableInput<C>, ObservableInput<D>, ObservableInput<E>]): Observable<[A, B, C, D, E]>;\n' +
    'export declare function forkJoin<A, B, C, D, E, F>(sources: [ObservableInput<A>, ObservableInput<B>, ObservableInput<C>, ObservableInput<D>, ObservableInput<E>, ObservableInput<F>]): Observable<[A, B, C, D, E, F]>;\n' +
    'export declare function forkJoin<A extends ObservableInput<any>[]>(sources: A): Observable<ObservedValuesFromArray<A>[]>;\n' +
    'export declare function forkJoin(sourcesObject: {}): Observable<never>;\n' +
    'export declare function forkJoin<T, K extends keyof T>(sourcesObject: T): Observable<{\n' +
    '    [K in keyof T]: ObservedValueOf<T[K]>;\n' +
    '}>;\n' +
    '/** @deprecated resultSelector is deprecated, pipe to map instead */\n' +
    'export declare function forkJoin(...args: Array<ObservableInput<any> | Function>): Observable<any>;\n' +
    '/** @deprecated Use the version that takes an array of Observables instead */\n' +
    'export declare function forkJoin<T>(...sources: ObservableInput<T>[]): Observable<T[]>;\n',
  timestamp: 1669130813283
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/observable/from.d.ts, [object Object]',
  timestamp: 1669130813293
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/observable/from.d.ts: import { Observable } from '../Observable';\n" +
    "import { ObservableInput, SchedulerLike, ObservedValueOf } from '../types';\n" +
    'export declare function from<O extends ObservableInput<any>>(input: O): Observable<ObservedValueOf<O>>;\n' +
    '/** @deprecated use {@link scheduled} instead. */\n' +
    'export declare function from<O extends ObservableInput<any>>(input: O, scheduler: SchedulerLike): Observable<ObservedValueOf<O>>;\n',
  timestamp: 1669130813294
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/observable/fromEvent.d.ts, [object Object]',
  timestamp: 1669130813294
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/observable/fromEvent.d.ts: import { Observable } from '../Observable';\n" +
    'export interface NodeStyleEventEmitter {\n' +
    '    addListener: (eventName: string | symbol, handler: NodeEventHandler) => this;\n' +
    '    removeListener: (eventName: string | symbol, handler: NodeEventHandler) => this;\n' +
    '}\n' +
    'export declare type NodeEventHandler = (...args: any[]) => void;\n' +
    'export interface NodeCompatibleEventEmitter {\n' +
    '    addListener: (eventName: string, handler: NodeEventHandler) => void | {};\n' +
    '    removeListener: (eventName: string, handler: NodeEventHandler) => void | {};\n' +
    '}\n' +
    'export interface JQueryStyleEventEmitter {\n' +
    '    on: (eventName: string, handler: Function) => void;\n' +
    '    off: (eventName: string, handler: Function) => void;\n' +
    '}\n' +
    'export interface HasEventTargetAddRemove<E> {\n' +
    '    addEventListener(type: string, listener: ((evt: E) => void) | null, options?: boolean | AddEventListenerOptions): void;\n' +
    '    removeEventListener(type: string, listener?: ((evt: E) => void) | null, options?: EventListenerOptions | boolean): void;\n' +
    '}\n' +
    'export declare type EventTargetLike<T> = HasEventTargetAddRemove<T> | NodeStyleEventEmitter | NodeCompatibleEventEmitter | JQueryStyleEventEmitter;\n' +
    'export declare type FromEventTarget<T> = EventTargetLike<T> | ArrayLike<EventTargetLike<T>>;\n' +
    'export interface EventListenerOptions {\n' +
    '    capture?: boolean;\n' +
    '    passive?: boolean;\n' +
    '    once?: boolean;\n' +
    '}\n' +
    'export interface AddEventListenerOptions extends EventListenerOptions {\n' +
    '    once?: boolean;\n' +
    '    passive?: boolean;\n' +
    '}\n' +
    'export declare function fromEvent<T>(target: FromEventTarget<T>, eventName: string): Observable<T>;\n' +
    '/** @deprecated resultSelector no longer supported, pipe to map instead */\n' +
    'export declare function fromEvent<T>(target: FromEventTarget<T>, eventName: string, resultSelector: (...args: any[]) => T): Observable<T>;\n' +
    'export declare function fromEvent<T>(target: FromEventTarget<T>, eventName: string, options: EventListenerOptions): Observable<T>;\n' +
    '/** @deprecated resultSelector no longer supported, pipe to map instead */\n' +
    'export declare function fromEvent<T>(target: FromEventTarget<T>, eventName: string, options: EventListenerOptions, resultSelector: (...args: any[]) => T): Observable<T>;\n',
  timestamp: 1669130813295
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/observable/fromEventPattern.d.ts, [object Object]',
  timestamp: 1669130813296
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/observable/fromEventPattern.d.ts: import { Observable } from '../Observable';\n" +
    "import { NodeEventHandler } from './fromEvent';\n" +
    'export declare function fromEventPattern<T>(addHandler: (handler: NodeEventHandler) => any, removeHandler?: (handler: NodeEventHandler, signal?: any) => void): Observable<T>;\n' +
    '/** @deprecated resultSelector no longer supported, pipe to map instead */\n' +
    'export declare function fromEventPattern<T>(addHandler: (handler: NodeEventHandler) => any, removeHandler?: (handler: NodeEventHandler, signal?: any) => void, resultSelector?: (...args: any[]) => T): Observable<T>;\n',
  timestamp: 1669130813296
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813297
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/observable: true',
  timestamp: 1669130813297
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/fromEvent.ts:false',
  timestamp: 1669130813297
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/fromEvent.tsx:false',
  timestamp: 1669130813297
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/observable/fromEvent.d.ts:true',
  timestamp: 1669130813298
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/observable/generate.d.ts, [object Object]',
  timestamp: 1669130813298
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/observable/generate.d.ts: import { Observable } from '../Observable';\n" +
    "import { SchedulerLike } from '../types';\n" +
    'export declare type ConditionFunc<S> = (state: S) => boolean;\n' +
    'export declare type IterateFunc<S> = (state: S) => S;\n' +
    'export declare type ResultFunc<S, T> = (state: S) => T;\n' +
    'export interface GenerateBaseOptions<S> {\n' +
    '    /**\n' +
    '     * Initial state.\n' +
    '     */\n' +
    '    initialState: S;\n' +
    '    /**\n' +
    '     * Condition function that accepts state and returns boolean.\n' +
    '     * When it returns false, the generator stops.\n' +
    '     * If not specified, a generator never stops.\n' +
    '     */\n' +
    '    condition?: ConditionFunc<S>;\n' +
    '    /**\n' +
    '     * Iterate function that accepts state and returns new state.\n' +
    '     */\n' +
    '    iterate: IterateFunc<S>;\n' +
    '    /**\n' +
    '     * SchedulerLike to use for generation process.\n' +
    '     * By default, a generator starts immediately.\n' +
    '     */\n' +
    '    scheduler?: SchedulerLike;\n' +
    '}\n' +
    'export interface GenerateOptions<T, S> extends GenerateBaseOptions<S> {\n' +
    '    /**\n' +
    '     * Result selection function that accepts state and returns a value to emit.\n' +
    '     */\n' +
    '    resultSelector: ResultFunc<S, T>;\n' +
    '}\n' +
    '/**\n' +
    ' * Generates an observable sequence by running a state-driven loop\n' +
    " * producing the sequence's elements, using the specified scheduler\n" +
    ' * to send out observer messages.\n' +
    ' *\n' +
    ' * ![](generate.png)\n' +
    ' *\n' +
    ' * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n' +
    ' * const res = generate(0, x => x < 10, x => x + 1, x => x);\n' +
    ' *\n' +
    ' * @example <caption>Using asap scheduler, produces sequence of 2, 3, 5, then completes.</caption>\n' +
    ' * const res = generate(1, x => x < 5, x => x * 2, x => x + 1, asap);\n' +
    ' *\n' +
    ' * @see {@link from}\n' +
    ' * @see {@link Observable}\n' +
    ' *\n' +
    ' * @param {S} initialState Initial state.\n' +
    ' * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n' +
    ' * @param {function (state: S): S} iterate Iteration step function.\n' +
    ' * @param {function (state: S): T} resultSelector Selector function for results produced in the sequence. (deprecated)\n' +
    ' * @param {SchedulerLike} [scheduler] A {@link SchedulerLike} on which to run the generator loop. If not provided, defaults to emit immediately.\n' +
    ' * @returns {Observable<T>} The generated sequence.\n' +
    ' */\n' +
    'export declare function generate<T, S>(initialState: S, condition: ConditionFunc<S>, iterate: IterateFunc<S>, resultSelector: ResultFunc<S, T>, scheduler?: SchedulerLike): Observable<T>;\n' +
    '/**\n' +
    ' * Generates an Observable by running a state-driven loop\n' +
    ' * that emits an element on each iteration.\n' +
    ' *\n' +
    ' * <span class="informal">Use it instead of nexting values in a for loop.</span>\n' +
    ' *\n' +
    ' * <img src="./img/generate.png" width="100%">\n' +
    ' *\n' +
    ' * `generate` allows you to create stream of values generated with a loop very similar to\n' +
    ' * traditional for loop. First argument of `generate` is a beginning value. Second argument\n' +
    ' * is a function that accepts this value and tests if some condition still holds. If it does,\n' +
    ' * loop continues, if not, it stops. Third value is a function which takes previously defined\n' +
    ' * value and modifies it in some way on each iteration. Note how these three parameters\n' +
    ' * are direct equivalents of three expressions in regular for loop: first expression\n' +
    ' * initializes some state (for example numeric index), second tests if loop can make next\n' +
    ' * iteration (for example if index is lower than 10) and third states how defined value\n' +
    ' * will be modified on every step (index will be incremented by one).\n' +
    ' *\n' +
    ' * Return value of a `generate` operator is an Observable that on each loop iteration\n' +
    ' * emits a value. First, condition function is ran. If it returned true, Observable\n' +
    ' * emits currently stored value (initial value at the first iteration) and then updates\n' +
    ' * that value with iterate function. If at some point condition returned false, Observable\n' +
    ' * completes at that moment.\n' +
    ' *\n' +
    ' * Optionally you can pass fourth parameter to `generate` - a result selector function which allows you\n' +
    ' * to immediately map value that would normally be emitted by an Observable.\n' +
    ' *\n' +
    ' * If you find three anonymous functions in `generate` call hard to read, you can provide\n' +
    ' * single object to the operator instead. That object has properties: `initialState`,\n' +
    ' * `condition`, `iterate` and `resultSelector`, which should have respective values that you\n' +
    ' * would normally pass to `generate`. `resultSelector` is still optional, but that form\n' +
    ' * of calling `generate` allows you to omit `condition` as well. If you omit it, that means\n' +
    ' * condition always holds, so output Observable will never complete.\n' +
    ' *\n' +
    ' * Both forms of `generate` can optionally accept a scheduler. In case of multi-parameter call,\n' +
    ' * scheduler simply comes as a last argument (no matter if there is resultSelector\n' +
    ' * function or not). In case of single-parameter call, you can provide it as a\n' +
    ' * `scheduler` property on object passed to the operator. In both cases scheduler decides when\n' +
    ' * next iteration of the loop will happen and therefore when next value will be emitted\n' +
    ' * by the Observable. For example to ensure that each value is pushed to the observer\n' +
    ' * on separate task in event loop, you could use `async` scheduler. Note that\n' +
    ' * by default (when no scheduler is passed) values are simply emitted synchronously.\n' +
    ' *\n' +
    ' *\n' +
    ' * @example <caption>Use with condition and iterate functions.</caption>\n' +
    ' * const generated = generate(0, x => x < 3, x => x + 1);\n' +
    ' *\n' +
    ' * generated.subscribe(\n' +
    ' *   value => console.log(value),\n' +
    ' *   err => {},\n' +
    " *   () => console.log('Yo!')\n" +
    ' * );\n' +
    ' *\n' +
    ' * // Logs:\n' +
    ' * // 0\n' +
    ' * // 1\n' +
    ' * // 2\n' +
    ' * // "Yo!"\n' +
    ' *\n' +
    ' *\n' +
    ' * @example <caption>Use with condition, iterate and resultSelector functions.</caption>\n' +
    ' * const generated = generate(0, x => x < 3, x => x + 1, x => x * 1000);\n' +
    ' *\n' +
    ' * generated.subscribe(\n' +
    ' *   value => console.log(value),\n' +
    ' *   err => {},\n' +
    " *   () => console.log('Yo!')\n" +
    ' * );\n' +
    ' *\n' +
    ' * // Logs:\n' +
    ' * // 0\n' +
    ' * // 1000\n' +
    ' * // 2000\n' +
    ' * // "Yo!"\n' +
    ' *\n' +
    ' *\n' +
    ' * @example <caption>Use with options object.</caption>\n' +
    ' * const generated = generate({\n' +
    ' *   initialState: 0,\n' +
    ' *   condition(value) { return value < 3; },\n' +
    ' *   iterate(value) { return value + 1; },\n' +
    ' *   resultSelector(value) { return value * 1000; }\n' +
    ' * });\n' +
    ' *\n' +
    ' * generated.subscribe(\n' +
    ' *   value => console.log(value),\n' +
    ' *   err => {},\n' +
    " *   () => console.log('Yo!')\n" +
    ' * );\n' +
    ' *\n' +
    ' * // Logs:\n' +
    ' * // 0\n' +
    ' * // 1000\n' +
    ' * // 2000\n' +
    ' * // "Yo!"\n' +
    ' *\n' +
    ' * @example <caption>Use options object without condition function.</caption>\n' +
    ' * const generated = generate({\n' +
    ' *   initialState: 0,\n' +
    ' *   iterate(value) { return value + 1; },\n' +
    ' *   resultSelector(value) { return value * 1000; }\n' +
    ' * });\n' +
    ' *\n' +
    ' * generated.subscribe(\n' +
    ' *   value => console.log(value),\n' +
    ' *   err => {},\n' +
    " *   () => console.log('Yo!') // This will never run.\n" +
    ' * );\n' +
    ' *\n' +
    ' * // Logs:\n' +
    ' * // 0\n' +
    ' * // 1000\n' +
    ' * // 2000\n' +
    ' * // 3000\n' +
    ' * // ...and never stops.\n' +
    ' *\n' +
    ' *\n' +
    ' * @see {@link from}\n' +
    ' * @see {@link index/Observable.create}\n' +
    ' *\n' +
    ' * @param {S} initialState Initial state.\n' +
    ' * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n' +
    ' * @param {function (state: S): S} iterate Iteration step function.\n' +
    ' * @param {function (state: S): T} [resultSelector] Selector function for results produced in the sequence.\n' +
    ' * @param {Scheduler} [scheduler] A {@link Scheduler} on which to run the generator loop. If not provided, defaults to emitting immediately.\n' +
    ' * @return {Observable<T>} The generated sequence.\n' +
    ' */\n' +
    'export declare function generate<S>(initialState: S, condition: ConditionFunc<S>, iterate: IterateFunc<S>, scheduler?: SchedulerLike): Observable<S>;\n' +
    '/**\n' +
    ' * Generates an observable sequence by running a state-driven loop\n' +
    " * producing the sequence's elements, using the specified scheduler\n" +
    ' * to send out observer messages.\n' +
    ' * The overload accepts options object that might contain initial state, iterate,\n' +
    ' * condition and scheduler.\n' +
    ' *\n' +
    ' * ![](generate.png)\n' +
    ' *\n' +
    ' * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n' +
    ' * const res = generate({\n' +
    ' *   initialState: 0,\n' +
    ' *   condition: x => x < 10,\n' +
    ' *   iterate: x => x + 1,\n' +
    ' * });\n' +
    ' *\n' +
    ' * @see {@link from}\n' +
    ' * @see {@link Observable}\n' +
    ' *\n' +
    ' * @param {GenerateBaseOptions<S>} options Object that must contain initialState, iterate and might contain condition and scheduler.\n' +
    ' * @returns {Observable<S>} The generated sequence.\n' +
    ' */\n' +
    'export declare function generate<S>(options: GenerateBaseOptions<S>): Observable<S>;\n' +
    '/**\n' +
    ' * Generates an observable sequence by running a state-driven loop\n' +
    " * producing the sequence's elements, using the specified scheduler\n" +
    ' * to send out observer messages.\n' +
    ' * The overload accepts options object that might contain initial state, iterate,\n' +
    ' * condition, result selector and scheduler.\n' +
    ' *\n' +
    ' * ![](generate.png)\n' +
    ' *\n' +
    ' * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n' +
    ' * const res = generate({\n' +
    ' *   initialState: 0,\n' +
    ' *   condition: x => x < 10,\n' +
    ' *   iterate: x => x + 1,\n' +
    ' *   resultSelector: x => x,\n' +
    ' * });\n' +
    ' *\n' +
    ' * @see {@link from}\n' +
    ' * @see {@link Observable}\n' +
    ' *\n' +
    ' * @param {GenerateOptions<T, S>} options Object that must contain initialState, iterate, resultSelector and might contain condition and scheduler.\n' +
    ' * @returns {Observable<T>} The generated sequence.\n' +
    ' */\n' +
    'export declare function generate<T, S>(options: GenerateOptions<T, S>): Observable<T>;\n',
  timestamp: 1669130813298
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/observable/interval.d.ts, [object Object]',
  timestamp: 1669130813301
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/observable/interval.d.ts: import { Observable } from '../Observable';\n" +
    "import { SchedulerLike } from '../types';\n" +
    '/**\n' +
    ' * Creates an Observable that emits sequential numbers every specified\n' +
    ' * interval of time, on a specified {@link SchedulerLike}.\n' +
    ' *\n' +
    ' * <span class="informal">Emits incremental numbers periodically in time.\n' +
    ' * </span>\n' +
    ' *\n' +
    ' * ![](interval.png)\n' +
    ' *\n' +
    ' * `interval` returns an Observable that emits an infinite sequence of\n' +
    ' * ascending integers, with a constant interval of time of your choosing\n' +
    ' * between those emissions. The first emission is not sent immediately, but\n' +
    ' * only after the first period has passed. By default, this operator uses the\n' +
    ' * `async` {@link SchedulerLike} to provide a notion of time, but you may pass any\n' +
    ' * {@link SchedulerLike} to it.\n' +
    ' *\n' +
    ' * ## Example\n' +
    ' * Emits ascending numbers, one every second (1000ms) up to the number 3\n' +
    ' * ```ts\n' +
    " * import { interval } from 'rxjs';\n" +
    " * import { take } from 'rxjs/operators';\n" +
    ' *\n' +
    ' * const numbers = interval(1000);\n' +
    ' *\n' +
    ' * const takeFourNumbers = numbers.pipe(take(4));\n' +
    ' *\n' +
    " * takeFourNumbers.subscribe(x => console.log('Next: ', x));\n" +
    ' *\n' +
    ' * // Logs:\n' +
    ' * // Next: 0\n' +
    ' * // Next: 1\n' +
    ' * // Next: 2\n' +
    ' * // Next: 3\n' +
    ' * ```\n' +
    ' *\n' +
    ' * @see {@link timer}\n' +
    ' * @see {@link delay}\n' +
    ' *\n' +
    ' * @param {number} [period=0] The interval size in milliseconds (by default)\n' +
    " * or the time unit determined by the scheduler's clock.\n" +
    ' * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for scheduling\n' +
    ' * the emission of values, and providing a notion of "time".\n' +
    ' * @return {Observable} An Observable that emits a sequential number each time\n' +
    ' * interval.\n' +
    ' * @static true\n' +
    ' * @name interval\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function interval(period?: number, scheduler?: SchedulerLike): Observable<number>;\n',
  timestamp: 1669130813301
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/observable/merge.d.ts, [object Object]',
  timestamp: 1669130813302
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/observable/merge.d.ts: import { Observable } from '../Observable';\n" +
    "import { ObservableInput, SchedulerLike } from '../types';\n" +
    '/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduled).pipe(mergeAll())*/\n' +
    'export declare function merge<T>(v1: ObservableInput<T>, scheduler: SchedulerLike): Observable<T>;\n' +
    '/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduled).pipe(mergeAll())*/\n' +
    'export declare function merge<T>(v1: ObservableInput<T>, concurrent: number, scheduler: SchedulerLike): Observable<T>;\n' +
    '/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduled).pipe(mergeAll())*/\n' +
    'export declare function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler: SchedulerLike): Observable<T | T2>;\n' +
    '/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduled).pipe(mergeAll())*/\n' +
    'export declare function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, concurrent: number, scheduler: SchedulerLike): Observable<T | T2>;\n' +
    '/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduled).pipe(mergeAll())*/\n' +
    'export declare function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler: SchedulerLike): Observable<T | T2 | T3>;\n' +
    '/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduled).pipe(mergeAll())*/\n' +
    'export declare function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent: number, scheduler: SchedulerLike): Observable<T | T2 | T3>;\n' +
    '/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduled).pipe(mergeAll())*/\n' +
    'export declare function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler: SchedulerLike): Observable<T | T2 | T3 | T4>;\n' +
    '/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduled).pipe(mergeAll())*/\n' +
    'export declare function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent: number, scheduler: SchedulerLike): Observable<T | T2 | T3 | T4>;\n' +
    '/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduled).pipe(mergeAll())*/\n' +
    'export declare function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler: SchedulerLike): Observable<T | T2 | T3 | T4 | T5>;\n' +
    '/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduled).pipe(mergeAll())*/\n' +
    'export declare function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent: number, scheduler: SchedulerLike): Observable<T | T2 | T3 | T4 | T5>;\n' +
    '/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduled).pipe(mergeAll())*/\n' +
    'export declare function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6>;\n' +
    '/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduled).pipe(mergeAll())*/\n' +
    'export declare function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent: number, scheduler: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6>;\n' +
    'export declare function merge<T>(v1: ObservableInput<T>): Observable<T>;\n' +
    'export declare function merge<T>(v1: ObservableInput<T>, concurrent?: number): Observable<T>;\n' +
    'export declare function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<T | T2>;\n' +
    'export declare function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, concurrent?: number): Observable<T | T2>;\n' +
    'export declare function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<T | T2 | T3>;\n' +
    'export declare function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number): Observable<T | T2 | T3>;\n' +
    'export declare function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<T | T2 | T3 | T4>;\n' +
    'export declare function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number): Observable<T | T2 | T3 | T4>;\n' +
    'export declare function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<T | T2 | T3 | T4 | T5>;\n' +
    'export declare function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number): Observable<T | T2 | T3 | T4 | T5>;\n' +
    'export declare function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<T | T2 | T3 | T4 | T5 | T6>;\n' +
    'export declare function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number): Observable<T | T2 | T3 | T4 | T5 | T6>;\n' +
    'export declare function merge<T>(...observables: (ObservableInput<T> | number)[]): Observable<T>;\n' +
    '/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduled).pipe(mergeAll())*/\n' +
    'export declare function merge<T>(...observables: (ObservableInput<T> | SchedulerLike | number)[]): Observable<T>;\n' +
    'export declare function merge<T, R>(...observables: (ObservableInput<any> | number)[]): Observable<R>;\n' +
    '/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduled).pipe(mergeAll())*/\n' +
    'export declare function merge<T, R>(...observables: (ObservableInput<any> | SchedulerLike | number)[]): Observable<R>;\n',
  timestamp: 1669130813302
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/observable/never.d.ts, [object Object]',
  timestamp: 1669130813308
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/observable/never.d.ts: import { Observable } from '../Observable';\n" +
    '/**\n' +
    ' * An Observable that emits no items to the Observer and never completes.\n' +
    ' *\n' +
    ' * ![](never.png)\n' +
    ' *\n' +
    ' * A simple Observable that emits neither values nor errors nor the completion\n' +
    ' * notification. It can be used for testing purposes or for composing with other\n' +
    ' * Observables. Please note that by never emitting a complete notification, this\n' +
    ' * Observable keeps the subscription from being disposed automatically.\n' +
    ' * Subscriptions need to be manually disposed.\n' +
    ' *\n' +
    ' * ##  Example\n' +
    ' * ### Emit the number 7, then never emit anything else (not even complete)\n' +
    ' * ```ts\n' +
    " * import { NEVER } from 'rxjs';\n" +
    " * import { startWith } from 'rxjs/operators';\n" +
    ' *\n' +
    ' * function info() {\n' +
    " *   console.log('Will not be called');\n" +
    ' * }\n' +
    ' * const result = NEVER.pipe(startWith(7));\n' +
    ' * result.subscribe(x => console.log(x), info, info);\n' +
    ' *\n' +
    ' * ```\n' +
    ' *\n' +
    ' * @see {@link Observable}\n' +
    ' * @see {@link index/EMPTY}\n' +
    ' * @see {@link of}\n' +
    ' * @see {@link throwError}\n' +
    ' */\n' +
    'export declare const NEVER: Observable<never>;\n' +
    '/**\n' +
    ' * @deprecated Deprecated in favor of using {@link NEVER} constant.\n' +
    ' */\n' +
    'export declare function never(): Observable<never>;\n',
  timestamp: 1669130813308
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/observable/of.d.ts, [object Object]',
  timestamp: 1669130813309
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/observable/of.d.ts: import { SchedulerLike } from '../types';\n" +
    "import { Observable } from '../Observable';\n" +
    '/** @deprecated use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */\n' +
    'export declare function of<T>(a: T, scheduler: SchedulerLike): Observable<T>;\n' +
    '/** @deprecated use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */\n' +
    'export declare function of<T, T2>(a: T, b: T2, scheduler: SchedulerLike): Observable<T | T2>;\n' +
    '/** @deprecated use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */\n' +
    'export declare function of<T, T2, T3>(a: T, b: T2, c: T3, scheduler: SchedulerLike): Observable<T | T2 | T3>;\n' +
    '/** @deprecated use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */\n' +
    'export declare function of<T, T2, T3, T4>(a: T, b: T2, c: T3, d: T4, scheduler: SchedulerLike): Observable<T | T2 | T3 | T4>;\n' +
    '/** @deprecated use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */\n' +
    'export declare function of<T, T2, T3, T4, T5>(a: T, b: T2, c: T3, d: T4, e: T5, scheduler: SchedulerLike): Observable<T | T2 | T3 | T4 | T5>;\n' +
    '/** @deprecated use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */\n' +
    'export declare function of<T, T2, T3, T4, T5, T6>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, scheduler: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6>;\n' +
    '/** @deprecated use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */\n' +
    'export declare function of<T, T2, T3, T4, T5, T6, T7>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, scheduler: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6 | T7>;\n' +
    '/** @deprecated use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */\n' +
    'export declare function of<T, T2, T3, T4, T5, T6, T7, T8>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, h: T8, scheduler: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6 | T7 | T8>;\n' +
    '/** @deprecated use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */\n' +
    'export declare function of<T, T2, T3, T4, T5, T6, T7, T8, T9>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, h: T8, i: T9, scheduler: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9>;\n' +
    'export declare function of<T>(...args: (T | SchedulerLike)[]): Observable<T>;\n' +
    'export declare function of<T>(a: T): Observable<T>;\n' +
    'export declare function of<T, T2>(a: T, b: T2): Observable<T | T2>;\n' +
    'export declare function of<T, T2, T3>(a: T, b: T2, c: T3): Observable<T | T2 | T3>;\n' +
    'export declare function of<T, T2, T3, T4>(a: T, b: T2, c: T3, d: T4): Observable<T | T2 | T3 | T4>;\n' +
    'export declare function of<T, T2, T3, T4, T5>(a: T, b: T2, c: T3, d: T4, e: T5): Observable<T | T2 | T3 | T4 | T5>;\n' +
    'export declare function of<T, T2, T3, T4, T5, T6>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6): Observable<T | T2 | T3 | T4 | T5 | T6>;\n' +
    'export declare function of<T, T2, T3, T4, T5, T6, T7>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7): Observable<T | T2 | T3 | T4 | T5 | T6 | T7>;\n' +
    'export declare function of<T, T2, T3, T4, T5, T6, T7, T8>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, h: T8): Observable<T | T2 | T3 | T4 | T5 | T6 | T7 | T8>;\n' +
    'export declare function of<T, T2, T3, T4, T5, T6, T7, T8, T9>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, h: T8, i: T9): Observable<T | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9>;\n' +
    'export declare function of<T>(...args: T[]): Observable<T>;\n',
  timestamp: 1669130813309
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/observable/onErrorResumeNext.d.ts, [object Object]',
  timestamp: 1669130813312
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/observable/onErrorResumeNext.d.ts: import { Observable } from '../Observable';\n" +
    "import { ObservableInput } from '../types';\n" +
    'export declare function onErrorResumeNext<R>(v: ObservableInput<R>): Observable<R>;\n' +
    'export declare function onErrorResumeNext<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\n' +
    'export declare function onErrorResumeNext<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\n' +
    'export declare function onErrorResumeNext<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\n' +
    'export declare function onErrorResumeNext<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\n' +
    'export declare function onErrorResumeNext<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n' +
    'export declare function onErrorResumeNext<R>(array: ObservableInput<any>[]): Observable<R>;\n',
  timestamp: 1669130813313
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/observable/pairs.d.ts, [object Object]',
  timestamp: 1669130813314
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/observable/pairs.d.ts: import { Observable } from '../Observable';\n" +
    "import { SchedulerAction, SchedulerLike } from '../types';\n" +
    "import { Subscriber } from '../Subscriber';\n" +
    "import { Subscription } from '../Subscription';\n" +
    '/**\n' +
    ' * Convert an object into an Observable of `[key, value]` pairs.\n' +
    ' *\n' +
    ' * <span class="informal">Turn entries of an object into a stream.</span>\n' +
    ' *\n' +
    ' * <img src="./img/pairs.png" width="100%">\n' +
    ' *\n' +
    ' * `pairs` takes an arbitrary object and returns an Observable that emits arrays. Each\n' +
    ' * emitted array has exactly two elements - the first is a key from the object\n' +
    ' * and the second is a value corresponding to that key. Keys are extracted from\n' +
    ' * an object via `Object.keys` function, which means that they will be only\n' +
    ' * enumerable keys that are present on an object directly - not ones inherited\n' +
    ' * via prototype chain.\n' +
    ' *\n' +
    ' * By default these arrays are emitted synchronously. To change that you can\n' +
    ' * pass a {@link SchedulerLike} as a second argument to `pairs`.\n' +
    ' *\n' +
    ' * @example <caption>Converts a javascript object to an Observable</caption>\n' +
    ' * ```ts\n' +
    " * import { pairs } from 'rxjs';\n" +
    ' *\n' +
    ' * const obj = {\n' +
    ' *   foo: 42,\n' +
    ' *   bar: 56,\n' +
    ' *   baz: 78\n' +
    ' * };\n' +
    ' *\n' +
    ' * pairs(obj)\n' +
    ' * .subscribe(\n' +
    ' *   value => console.log(value),\n' +
    ' *   err => {},\n' +
    " *   () => console.log('the end!')\n" +
    ' * );\n' +
    ' *\n' +
    ' * // Logs:\n' +
    ' * // ["foo", 42],\n' +
    ' * // ["bar", 56],\n' +
    ' * // ["baz", 78],\n' +
    ' * // "the end!"\n' +
    ' * ```\n' +
    ' *\n' +
    ' * @param {Object} obj The object to inspect and turn into an\n' +
    ' * Observable sequence.\n' +
    ' * @param {Scheduler} [scheduler] An optional IScheduler to schedule\n' +
    ' * when resulting Observable will emit values.\n' +
    ' * @returns {(Observable<Array<string|T>>)} An observable sequence of\n' +
    ' * [key, value] pairs from the object.\n' +
    ' */\n' +
    'export declare function pairs<T>(obj: Object, scheduler?: SchedulerLike): Observable<[string, T]>;\n' +
    '/** @internal */\n' +
    'export declare function dispatch<T>(this: SchedulerAction<any>, state: {\n' +
    '    keys: string[];\n' +
    '    index: number;\n' +
    '    subscriber: Subscriber<[string, T]>;\n' +
    '    subscription: Subscription;\n' +
    '    obj: Object;\n' +
    '}): void;\n',
  timestamp: 1669130813315
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/observable/partition.d.ts, [object Object]',
  timestamp: 1669130813316
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/observable/partition.d.ts: import { ObservableInput } from '../types';\n" +
    "import { Observable } from '../Observable';\n" +
    '/**\n' +
    ' * Splits the source Observable into two, one with values that satisfy a\n' +
    " * predicate, and another with values that don't satisfy the predicate.\n" +
    ' *\n' +
    ` * <span class="informal">It's like {@link filter}, but returns two Observables:\n` +
    ' * one like the output of {@link filter}, and the other with values that did not\n' +
    ' * pass the condition.</span>\n' +
    ' *\n' +
    ' * ![](partition.png)\n' +
    ' *\n' +
    ' * `partition` outputs an array with two Observables that partition the values\n' +
    ' * from the source Observable through the given `predicate` function. The first\n' +
    ' * Observable in that array emits source values for which the predicate argument\n' +
    ' * returns true. The second Observable emits source values for which the\n' +
    ' * predicate returns false. The first behaves like {@link filter} and the second\n' +
    ' * behaves like {@link filter} with the predicate negated.\n' +
    ' *\n' +
    ' * ## Example\n' +
    ' * Partition a set of numbers into odds and evens observables\n' +
    ' * ```ts\n' +
    " * import { of, partition } from 'rxjs';\n" +
    ' *\n' +
    ' * const observableValues = of(1, 2, 3, 4, 5, 6);\n' +
    ' * const [evens$, odds$] = partition(observableValues, (value, index) => value % 2 === 0);\n' +
    ' *\n' +
    " * odds$.subscribe(x => console.log('odds', x));\n" +
    " * evens$.subscribe(x => console.log('evens', x));\n" +
    ' *\n' +
    ' * // Logs:\n' +
    ' * // odds 1\n' +
    ' * // odds 3\n' +
    ' * // odds 5\n' +
    ' * // evens 2\n' +
    ' * // evens 4\n' +
    ' * // evens 6\n' +
    ' * ```\n' +
    ' *\n' +
    ' * @see {@link filter}\n' +
    ' *\n' +
    ' * @param {function(value: T, index: number): boolean} predicate A function that\n' +
    ' * evaluates each value emitted by the source Observable. If it returns `true`,\n' +
    ' * the value is emitted on the first Observable in the returned array, if\n' +
    ' * `false` the value is emitted on the second Observable in the array. The\n' +
    ' * `index` parameter is the number `i` for the i-th source emission that has\n' +
    ' * happened since the subscription, starting from the number `0`.\n' +
    ' * @param {any} [thisArg] An optional argument to determine the value of `this`\n' +
    ' * in the `predicate` function.\n' +
    ' * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n' +
    ' * with values that passed the predicate, and another with values that did not\n' +
    ' * pass the predicate.\n' +
    ' */\n' +
    'export declare function partition<T>(source: ObservableInput<T>, predicate: (value: T, index: number) => boolean, thisArg?: any): [Observable<T>, Observable<T>];\n',
  timestamp: 1669130813316
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/observable/race.d.ts, [object Object]',
  timestamp: 1669130813317
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/observable/race.d.ts: import { Observable } from '../Observable';\n" +
    "import { Operator } from '../Operator';\n" +
    "import { Subscriber } from '../Subscriber';\n" +
    "import { TeardownLogic, ObservableInput } from '../types';\n" +
    "import { OuterSubscriber } from '../OuterSubscriber';\n" +
    'export declare function race<A>(arg: [ObservableInput<A>]): Observable<A>;\n' +
    'export declare function race<A, B>(arg: [ObservableInput<A>, ObservableInput<B>]): Observable<A | B>;\n' +
    'export declare function race<A, B, C>(arg: [ObservableInput<A>, ObservableInput<B>, ObservableInput<C>]): Observable<A | B | C>;\n' +
    'export declare function race<A, B, C, D>(arg: [ObservableInput<A>, ObservableInput<B>, ObservableInput<C>, ObservableInput<D>]): Observable<A | B | C | D>;\n' +
    'export declare function race<A, B, C, D, E>(arg: [ObservableInput<A>, ObservableInput<B>, ObservableInput<C>, ObservableInput<D>, ObservableInput<E>]): Observable<A | B | C | D | E>;\n' +
    'export declare function race<T>(arg: ObservableInput<T>[]): Observable<T>;\n' +
    'export declare function race(arg: ObservableInput<any>[]): Observable<{}>;\n' +
    'export declare function race<A>(a: ObservableInput<A>): Observable<A>;\n' +
    'export declare function race<A, B>(a: ObservableInput<A>, b: ObservableInput<B>): Observable<A | B>;\n' +
    'export declare function race<A, B, C>(a: ObservableInput<A>, b: ObservableInput<B>, c: ObservableInput<C>): Observable<A | B | C>;\n' +
    'export declare function race<A, B, C, D>(a: ObservableInput<A>, b: ObservableInput<B>, c: ObservableInput<C>, d: ObservableInput<D>): Observable<A | B | C | D>;\n' +
    'export declare function race<A, B, C, D, E>(a: ObservableInput<A>, b: ObservableInput<B>, c: ObservableInput<C>, d: ObservableInput<D>, e: ObservableInput<E>): Observable<A | B | C | D | E>;\n' +
    'export declare function race<T>(observables: ObservableInput<T>[]): Observable<T>;\n' +
    'export declare function race(observables: ObservableInput<any>[]): Observable<{}>;\n' +
    'export declare function race<T>(...observables: ObservableInput<T>[]): Observable<T>;\n' +
    'export declare function race(...observables: ObservableInput<any>[]): Observable<{}>;\n' +
    'export declare class RaceOperator<T> implements Operator<T, T> {\n' +
    '    call(subscriber: Subscriber<T>, source: any): TeardownLogic;\n' +
    '}\n' +
    '/**\n' +
    ' * We need this JSDoc comment for affecting ESDoc.\n' +
    ' * @ignore\n' +
    ' * @extends {Ignored}\n' +
    ' */\n' +
    'export declare class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n' +
    '    private hasFirst;\n' +
    '    private observables;\n' +
    '    private subscriptions;\n' +
    '    constructor(destination: Subscriber<T>);\n' +
    '    protected _next(observable: any): void;\n' +
    '    protected _complete(): void;\n' +
    '    notifyNext(_outerValue: T, innerValue: T, outerIndex: number): void;\n' +
    '}\n',
  timestamp: 1669130813317
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/observable/range.d.ts, [object Object]',
  timestamp: 1669130813319
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/observable/range.d.ts: import { SchedulerAction, SchedulerLike } from '../types';\n" +
    "import { Observable } from '../Observable';\n" +
    '/**\n' +
    ' * Creates an Observable that emits a sequence of numbers within a specified\n' +
    ' * range.\n' +
    ' *\n' +
    ' * <span class="informal">Emits a sequence of numbers in a range.</span>\n' +
    ' *\n' +
    ' * ![](range.png)\n' +
    ' *\n' +
    ' * `range` operator emits a range of sequential integers, in order, where you\n' +
    ' * select the `start` of the range and its `length`. By default, uses no\n' +
    ' * {@link SchedulerLike} and just delivers the notifications synchronously, but may use\n' +
    ' * an optional {@link SchedulerLike} to regulate those deliveries.\n' +
    ' *\n' +
    ' * ## Example\n' +
    ' * Emits the numbers 1 to 10</caption>\n' +
    ' * ```ts\n' +
    " * import { range } from 'rxjs';\n" +
    ' *\n' +
    ' * const numbers = range(1, 10);\n' +
    ' * numbers.subscribe(x => console.log(x));\n' +
    ' * ```\n' +
    ' * @see {@link timer}\n' +
    ' * @see {@link index/interval}\n' +
    ' *\n' +
    ' * @param {number} [start=0] The value of the first integer in the sequence.\n' +
    ' * @param {number} count The number of sequential integers to generate.\n' +
    ' * @param {SchedulerLike} [scheduler] A {@link SchedulerLike} to use for scheduling\n' +
    ' * the emissions of the notifications.\n' +
    ' * @return {Observable} An Observable of numbers that emits a finite range of\n' +
    ' * sequential integers.\n' +
    ' * @static true\n' +
    ' * @name range\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function range(start?: number, count?: number, scheduler?: SchedulerLike): Observable<number>;\n' +
    '/** @internal */\n' +
    'export declare function dispatch(this: SchedulerAction<any>, state: any): void;\n',
  timestamp: 1669130813320
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/observable/timer.d.ts, [object Object]',
  timestamp: 1669130813321
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/observable/timer.d.ts: import { Observable } from '../Observable';\n" +
    "import { SchedulerLike } from '../types';\n" +
    '/**\n' +
    ' * Creates an Observable that starts emitting after an `dueTime` and\n' +
    ' * emits ever increasing numbers after each `period` of time thereafter.\n' +
    ' *\n' +
    ' * <span class="informal">Its like {@link index/interval}, but you can specify when\n' +
    ' * should the emissions start.</span>\n' +
    ' *\n' +
    ' * ![](timer.png)\n' +
    ' *\n' +
    ' * `timer` returns an Observable that emits an infinite sequence of ascending\n' +
    ' * integers, with a constant interval of time, `period` of your choosing\n' +
    ' * between those emissions. The first emission happens after the specified\n' +
    ' * `dueTime`. The initial delay may be a `Date`. By default, this\n' +
    ' * operator uses the {@link asyncScheduler} {@link SchedulerLike} to provide a notion of time, but you\n' +
    ' * may pass any {@link SchedulerLike} to it. If `period` is not specified, the output\n' +
    ' * Observable emits only one value, `0`. Otherwise, it emits an infinite\n' +
    ' * sequence.\n' +
    ' *\n' +
    ' * ## Examples\n' +
    ' * ### Emits ascending numbers, one every second (1000ms), starting after 3 seconds\n' +
    ' * ```ts\n' +
    " * import { timer } from 'rxjs';\n" +
    ' *\n' +
    ' * const numbers = timer(3000, 1000);\n' +
    ' * numbers.subscribe(x => console.log(x));\n' +
    ' * ```\n' +
    ' *\n' +
    ' * ### Emits one number after five seconds\n' +
    ' * ```ts\n' +
    " * import { timer } from 'rxjs';\n" +
    ' *\n' +
    ' * const numbers = timer(5000);\n' +
    ' * numbers.subscribe(x => console.log(x));\n' +
    ' * ```\n' +
    ' * @see {@link index/interval}\n' +
    ' * @see {@link delay}\n' +
    ' *\n' +
    ' * @param {number|Date} [dueTime] The initial delay time specified as a Date object or as an integer denoting\n' +
    ' * milliseconds to wait before emitting the first value of 0`.\n' +
    ' * @param {number|SchedulerLike} [periodOrScheduler] The period of time between emissions of the\n' +
    ' * subsequent numbers.\n' +
    ' * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for scheduling\n' +
    ' * the emission of values, and providing a notion of "time".\n' +
    ' * @return {Observable} An Observable that emits a `0` after the\n' +
    ' * `dueTime` and ever increasing numbers after each `period` of time\n' +
    ' * thereafter.\n' +
    ' * @static true\n' +
    ' * @name timer\n' +
    ' * @owner Observable\n' +
    ' */\n' +
    'export declare function timer(dueTime?: number | Date, periodOrScheduler?: number | SchedulerLike, scheduler?: SchedulerLike): Observable<number>;\n',
  timestamp: 1669130813321
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/observable/using.d.ts, [object Object]',
  timestamp: 1669130813322
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/observable/using.d.ts: import { Observable } from '../Observable';\n" +
    "import { Unsubscribable, ObservableInput } from '../types';\n" +
    '/**\n' +
    ' * Creates an Observable that uses a resource which will be disposed at the same time as the Observable.\n' +
    ' *\n' +
    ' * <span class="informal">Use it when you catch yourself cleaning up after an Observable.</span>\n' +
    ' *\n' +
    ' * `using` is a factory operator, which accepts two functions. First function returns a disposable resource.\n' +
    ' * It can be an arbitrary object that implements `unsubscribe` method. Second function will be injected with\n' +
    ' * that object and should return an Observable. That Observable can use resource object during its execution.\n' +
    ' * Both functions passed to `using` will be called every time someone subscribes - neither an Observable nor\n' +
    ' * resource object will be shared in any way between subscriptions.\n' +
    ' *\n' +
    ' * When Observable returned by `using` is subscribed, Observable returned from the second function will be subscribed\n' +
    ' * as well. All its notifications (nexted values, completion and error events) will be emitted unchanged by the output\n' +
    ' * Observable. If however someone unsubscribes from the Observable or source Observable completes or errors by itself,\n' +
    ' * the `unsubscribe` method on resource object will be called. This can be used to do any necessary clean up, which\n' +
    ' * otherwise would have to be handled by hand. Note that complete or error notifications are not emitted when someone\n' +
    ' * cancels subscription to an Observable via `unsubscribe`, so `using` can be used as a hook, allowing you to make\n' +
    ' * sure that all resources which need to exist during an Observable execution will be disposed at appropriate time.\n' +
    ' *\n' +
    ' * @see {@link defer}\n' +
    ' *\n' +
    ' * @param {function(): ISubscription} resourceFactory A function which creates any resource object\n' +
    ' * that implements `unsubscribe` method.\n' +
    ' * @param {function(resource: ISubscription): Observable<T>} observableFactory A function which\n' +
    ' * creates an Observable, that can use injected resource object.\n' +
    ' * @return {Observable<T>} An Observable that behaves the same as Observable returned by `observableFactory`, but\n' +
    ' * which - when completed, errored or unsubscribed - will also call `unsubscribe` on created resource object.\n' +
    ' */\n' +
    'export declare function using<T>(resourceFactory: () => Unsubscribable | void, observableFactory: (resource: Unsubscribable | void) => ObservableInput<T> | void): Observable<T>;\n',
  timestamp: 1669130813322
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/observable/zip.d.ts, [object Object]',
  timestamp: 1669130813323
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/observable/zip.d.ts: import { Observable } from '../Observable';\n" +
    "import { Operator } from '../Operator';\n" +
    "import { ObservableInput, ObservedValueOf } from '../types';\n" +
    "import { Subscriber } from '../Subscriber';\n" +
    '/** @deprecated resultSelector is no longer supported, pipe to map instead */\n' +
    'export declare function zip<O1 extends ObservableInput<any>, R>(v1: O1, resultSelector: (v1: ObservedValueOf<O1>) => R): Observable<R>;\n' +
    '/** @deprecated resultSelector is no longer supported, pipe to map instead */\n' +
    'export declare function zip<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, R>(v1: O1, v2: O2, resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>) => R): Observable<R>;\n' +
    '/** @deprecated resultSelector is no longer supported, pipe to map instead */\n' +
    'export declare function zip<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, R>(v1: O1, v2: O2, v3: O3, resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>) => R): Observable<R>;\n' +
    '/** @deprecated resultSelector is no longer supported, pipe to map instead */\n' +
    'export declare function zip<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, R>(v1: O1, v2: O2, v3: O3, v4: O4, resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>) => R): Observable<R>;\n' +
    '/** @deprecated resultSelector is no longer supported, pipe to map instead */\n' +
    'export declare function zip<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, R>(v1: O1, v2: O2, v3: O3, v4: O4, v5: O5, resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>, v5: ObservedValueOf<O5>) => R): Observable<R>;\n' +
    '/** @deprecated resultSelector is no longer supported, pipe to map instead */\n' +
    'export declare function zip<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, O6 extends ObservableInput<any>, R>(v1: O1, v2: O2, v3: O3, v4: O4, v5: O5, v6: O6, resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>, v5: ObservedValueOf<O5>, v6: ObservedValueOf<O6>) => R): Observable<R>;\n' +
    'export declare function zip<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>>(v1: O1, v2: O2): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>]>;\n' +
    'export declare function zip<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>>(v1: O1, v2: O2, v3: O3): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>]>;\n' +
    'export declare function zip<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>>(v1: O1, v2: O2, v3: O3, v4: O4): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>]>;\n' +
    'export declare function zip<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>>(v1: O1, v2: O2, v3: O3, v4: O4, v5: O5): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>, ObservedValueOf<O5>]>;\n' +
    'export declare function zip<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, O6 extends ObservableInput<any>>(v1: O1, v2: O2, v3: O3, v4: O4, v5: O5, v6: O6): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>, ObservedValueOf<O5>, ObservedValueOf<O6>]>;\n' +
    'export declare function zip<O extends ObservableInput<any>>(array: O[]): Observable<ObservedValueOf<O>[]>;\n' +
    'export declare function zip<R>(array: ObservableInput<any>[]): Observable<R>;\n' +
    '/** @deprecated resultSelector is no longer supported, pipe to map instead */\n' +
    'export declare function zip<O extends ObservableInput<any>, R>(array: O[], resultSelector: (...values: ObservedValueOf<O>[]) => R): Observable<R>;\n' +
    '/** @deprecated resultSelector is no longer supported, pipe to map instead */\n' +
    'export declare function zip<R>(array: ObservableInput<any>[], resultSelector: (...values: any[]) => R): Observable<R>;\n' +
    'export declare function zip<O extends ObservableInput<any>>(...observables: O[]): Observable<ObservedValueOf<O>[]>;\n' +
    'export declare function zip<O extends ObservableInput<any>, R>(...observables: Array<O | ((...values: ObservedValueOf<O>[]) => R)>): Observable<R>;\n' +
    'export declare function zip<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n' +
    'export declare class ZipOperator<T, R> implements Operator<T, R> {\n' +
    '    resultSelector?: (...values: Array<any>) => R;\n' +
    '    constructor(resultSelector?: (...values: Array<any>) => R);\n' +
    '    call(subscriber: Subscriber<R>, source: any): any;\n' +
    '}\n' +
    '/**\n' +
    ' * We need this JSDoc comment for affecting ESDoc.\n' +
    ' * @ignore\n' +
    ' * @extends {Ignored}\n' +
    ' */\n' +
    'export declare class ZipSubscriber<T, R> extends Subscriber<T> {\n' +
    '    private resultSelector?;\n' +
    '    private iterators;\n' +
    '    private active;\n' +
    '    constructor(destination: Subscriber<R>, resultSelector?: (...values: Array<any>) => R, values?: any);\n' +
    '    protected _next(value: any): void;\n' +
    '    protected _complete(): void;\n' +
    '    notifyInactive(): void;\n' +
    '    checkIterators(): void;\n' +
    '    protected _tryresultSelector(args: any[]): void;\n' +
    '}\n',
  timestamp: 1669130813323
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/scheduled/scheduled.d.ts, [object Object]',
  timestamp: 1669130813327
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: "treeHost: readFile /node_modules/rxjs/internal/scheduled/scheduled.d.ts: import { ObservableInput, SchedulerLike, Observable } from 'rxjs';\n" +
    '/**\n' +
    ' * Converts from a common {@link ObservableInput} type to an observable where subscription and emissions\n' +
    ' * are scheduled on the provided scheduler.\n' +
    ' *\n' +
    ' * @see from\n' +
    ' * @see of\n' +
    ' *\n' +
    ' * @param input The observable, array, promise, iterable, etc you would like to schedule\n' +
    ' * @param scheduler The scheduler to use to schedule the subscription and emissions from\n' +
    ' * the returned observable.\n' +
    ' */\n' +
    'export declare function scheduled<T>(input: ObservableInput<T>, scheduler: SchedulerLike): Observable<T>;\n',
  timestamp: 1669130813328
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /: true',
  timestamp: 1669130813330
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /: true',
  timestamp: 1669130813330
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /: true',
  timestamp: 1669130813330
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /rxjs.ts:false',
  timestamp: 1669130813330
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /rxjs.tsx:false',
  timestamp: 1669130813330
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /rxjs.d.ts:false',
  timestamp: 1669130813330
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /rxjs: true',
  timestamp: 1669130813331
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /rxjs: true',
  timestamp: 1669130813331
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /rxjs: true',
  timestamp: 1669130813331
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /rxjs/index.ts:false',
  timestamp: 1669130813331
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /rxjs/index.tsx:false',
  timestamp: 1669130813331
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /rxjs/index.d.ts:false',
  timestamp: 1669130813331
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/scheduled/node_modules: true',
  timestamp: 1669130813331
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/scheduled/node_modules/rxjs: true',
  timestamp: 1669130813331
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/scheduled/node_modules/rxjs/package.json:false',
  timestamp: 1669130813331
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/scheduled/node_modules: true',
  timestamp: 1669130813331
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/scheduled/node_modules/rxjs.ts:false',
  timestamp: 1669130813331
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/scheduled/node_modules/rxjs.tsx:false',
  timestamp: 1669130813332
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/scheduled/node_modules/rxjs.d.ts:false',
  timestamp: 1669130813332
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/scheduled/node_modules/rxjs: true',
  timestamp: 1669130813332
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/scheduled/node_modules/rxjs: true',
  timestamp: 1669130813332
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/scheduled/node_modules/rxjs/index.ts:false',
  timestamp: 1669130813332
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/scheduled/node_modules/rxjs/index.tsx:false',
  timestamp: 1669130813332
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/scheduled/node_modules/rxjs/index.d.ts:false',
  timestamp: 1669130813332
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/scheduled/node_modules/@types: true',
  timestamp: 1669130813332
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/scheduled/node_modules/@types/rxjs: true',
  timestamp: 1669130813332
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/scheduled/node_modules/@types/rxjs/package.json:false',
  timestamp: 1669130813332
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/scheduled/node_modules/@types: true',
  timestamp: 1669130813333
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/scheduled/node_modules/@types/rxjs.d.ts:false',
  timestamp: 1669130813334
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/scheduled/node_modules/@types/rxjs: true',
  timestamp: 1669130813334
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/scheduled/node_modules/@types/rxjs: true',
  timestamp: 1669130813334
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/scheduled/node_modules/@types/rxjs/index.d.ts:false',
  timestamp: 1669130813334
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/node_modules: true',
  timestamp: 1669130813334
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/node_modules/rxjs: true',
  timestamp: 1669130813334
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/node_modules/rxjs/package.json:false',
  timestamp: 1669130813334
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/node_modules: true',
  timestamp: 1669130813334
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/node_modules/rxjs.ts:false',
  timestamp: 1669130813334
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/node_modules/rxjs.tsx:false',
  timestamp: 1669130813334
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/node_modules/rxjs.d.ts:false',
  timestamp: 1669130813334
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/node_modules/rxjs: true',
  timestamp: 1669130813335
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/node_modules/rxjs: true',
  timestamp: 1669130813335
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/node_modules/rxjs/index.ts:false',
  timestamp: 1669130813335
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/node_modules/rxjs/index.tsx:false',
  timestamp: 1669130813335
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/node_modules/rxjs/index.d.ts:false',
  timestamp: 1669130813335
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/node_modules/@types: true',
  timestamp: 1669130813335
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/node_modules/@types/rxjs: true',
  timestamp: 1669130813335
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/node_modules/@types/rxjs/package.json:false',
  timestamp: 1669130813335
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/node_modules/@types: true',
  timestamp: 1669130813335
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/node_modules/@types/rxjs.d.ts:false',
  timestamp: 1669130813335
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/node_modules/@types/rxjs: true',
  timestamp: 1669130813335
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/internal/node_modules/@types/rxjs: true',
  timestamp: 1669130813335
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/internal/node_modules/@types/rxjs/index.d.ts:false',
  timestamp: 1669130813336
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/node_modules: true',
  timestamp: 1669130813336
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/node_modules/rxjs: true',
  timestamp: 1669130813336
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/node_modules/rxjs/package.json:false',
  timestamp: 1669130813336
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/node_modules: true',
  timestamp: 1669130813336
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/node_modules/rxjs.ts:false',
  timestamp: 1669130813336
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/node_modules/rxjs.tsx:false',
  timestamp: 1669130813336
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/node_modules/rxjs.d.ts:false',
  timestamp: 1669130813336
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/node_modules/rxjs: true',
  timestamp: 1669130813336
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/node_modules/rxjs: true',
  timestamp: 1669130813336
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/node_modules/rxjs/index.ts:false',
  timestamp: 1669130813336
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/node_modules/rxjs/index.tsx:false',
  timestamp: 1669130813336
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/node_modules/rxjs/index.d.ts:false',
  timestamp: 1669130813337
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/node_modules/@types: true',
  timestamp: 1669130813337
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/node_modules/@types/rxjs: true',
  timestamp: 1669130813337
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/node_modules/@types/rxjs/package.json:false',
  timestamp: 1669130813337
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/node_modules/@types: true',
  timestamp: 1669130813337
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/node_modules/@types/rxjs.d.ts:false',
  timestamp: 1669130813337
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/node_modules/@types/rxjs: true',
  timestamp: 1669130813337
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs/node_modules/@types/rxjs: true',
  timestamp: 1669130813337
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/node_modules/@types/rxjs/index.d.ts:false',
  timestamp: 1669130813337
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/rxjs/internal/config.d.ts, [object Object]',
  timestamp: 1669130813338
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: readFile /node_modules/rxjs/internal/config.d.ts: /**\n' +
    ' * The global configuration object for RxJS, used to configure things\n' +
    ' * like what Promise contructor should used to create Promises\n' +
    ' */\n' +
    'export declare const config: {\n' +
    '    /**\n' +
    '     * The promise constructor used by default for methods such as\n' +
    '     * {@link toPromise} and {@link forEach}\n' +
    '     */\n' +
    '    Promise: PromiseConstructorLike;\n' +
    '    /**\n' +
    '     * If true, turns on synchronous error rethrowing, which is a deprecated behavior\n' +
    '     * in v6 and higher. This behavior enables bad patterns like wrapping a subscribe\n' +
    '     * call in a try/catch block. It also enables producer interference, a nasty bug\n' +
    '     * where a multicast can be broken for all observers by a downstream consumer with\n' +
    "     * an unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BY TIME\n" +
    '     * FOR MIGRATION REASONS.\n' +
    '     */\n' +
    '    useDeprecatedSynchronousErrorHandling: boolean;\n' +
    '};\n',
  timestamp: 1669130813338
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules: true',
  timestamp: 1669130813338
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: getDirectories for /node_modules: rxjs,typescript',
  timestamp: 1669130813343
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/package.json:true',
  timestamp: 1669130813354
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: readFile /node_modules/rxjs/package.json: {\n' +
    '  "name": "rxjs",\n' +
    '  "version": "6.6.7",\n' +
    '  "description": "Reactive Extensions for modern JavaScript",\n' +
    '  "main": "./index.js",\n' +
    '  "sideEffects": false,\n' +
    '  "config": {\n' +
    '    "commitizen": {\n' +
    '      "path": "cz-conventional-changelog"\n' +
    '    }\n' +
    '  },\n' +
    '  "nyc": {\n' +
    '    "include": [\n' +
    '      "src/*.ts",\n' +
    '      "src/**/*.ts"\n' +
    '    ],\n' +
    '    "exclude": [\n' +
    '      "node_modules",\n' +
    '      "dist",\n' +
    '      "*.d.ts",\n' +
    '      "src/**/MiscJSDoc.ts"\n' +
    '    ],\n' +
    '    "extension": [\n' +
    '      ".ts"\n' +
    '    ],\n' +
    '    "reporter": [\n' +
    '      "html"\n' +
    '    ],\n' +
    '    "all": true\n' +
    '  },\n' +
    '  "lint-staged": {\n' +
    '    "linters": {\n' +
    '      "*.@(js)": [\n' +
    '        "eslint --fix",\n' +
    '        "git add"\n' +
    '      ],\n' +
    '      "*.@(ts)": [\n' +
    '        "tslint --fix",\n' +
    '        "git add"\n' +
    '      ]\n' +
    '    },\n' +
    '    "ignore": [\n' +
    '      "spec-dtslint/**/*.{js,ts}",\n' +
    '      "api_guard/**/*.{js,ts}"\n' +
    '    ]\n' +
    '  },\n' +
    '  "repository": {\n' +
    '    "type": "git",\n' +
    '    "url": "https://github.com/reactivex/rxjs.git"\n' +
    '  },\n' +
    '  "keywords": [\n' +
    '    "Rx",\n' +
    '    "RxJS",\n' +
    '    "ReactiveX",\n' +
    '    "ReactiveExtensions",\n' +
    '    "Streams",\n' +
    '    "Observables",\n' +
    '    "Observable",\n' +
    '    "Stream",\n' +
    '    "ES6",\n' +
    '    "ES2015"\n' +
    '  ],\n' +
    '  "author": "Ben Lesh <ben@benlesh.com>",\n' +
    '  "contributors": [\n' +
    '    {\n' +
    '      "name": "Ben Lesh",\n' +
    '      "email": "ben@benlesh.com"\n' +
    '    },\n' +
    '    {\n' +
    '      "name": "Paul Taylor",\n' +
    '      "email": "paul.e.taylor@me.com"\n' +
    '    },\n' +
    '    {\n' +
    '      "name": "Jeff Cross",\n' +
    '      "email": "crossj@google.com"\n' +
    '    },\n' +
    '    {\n' +
    '      "name": "Matthew Podwysocki",\n' +
    '      "email": "matthewp@microsoft.com"\n' +
    '    },\n' +
    '    {\n' +
    '      "name": "OJ Kwon",\n' +
    '      "email": "kwon.ohjoong@gmail.com"\n' +
    '    },\n' +
    '    {\n' +
    '      "name": "Andre Staltz",\n' +
    '      "email": "andre@staltz.com"\n' +
    '    }\n' +
    '  ],\n' +
    '  "license": "Apache-2.0",\n' +
    '  "bugs": {\n' +
    '    "url": "https://github.com/ReactiveX/RxJS/issues"\n' +
    '  },\n' +
    '  "homepage": "https://github.com/ReactiveX/RxJS",\n' +
    '  "dependencies": {\n' +
    '    "tslib": "^1.9.0"\n' +
    '  },\n' +
    '  "devDependencies": {\n' +
    '    "@angular-devkit/build-optimizer": "0.4.6",\n' +
    '    "@angular-devkit/schematics": "^0.5.4",\n' +
    '    "@types/chai": "4.1.2",\n' +
    '    "@types/lodash": "4.14.102",\n' +
    '    "@types/mocha": "2.2.48",\n' +
    '    "@types/node": "9.4.5",\n' +
    '    "@types/sinon": "4.1.3",\n' +
    '    "@types/sinon-chai": "2.7.29",\n' +
    '    "@types/source-map": "^0.5.2",\n' +
    '    "babel-polyfill": "6.26.0",\n' +
    '    "benchmark": "2.1.0",\n' +
    '    "benchpress": "2.0.0-beta.1",\n' +
    '    "chai": "4.1.2",\n' +
    '    "check-side-effects": "0.0.20",\n' +
    '    "color": "3.0.0",\n' +
    '    "colors": "1.1.2",\n' +
    '    "commitizen": "2.9.6",\n' +
    '    "coveralls": "3.0.0",\n' +
    '    "cross-env": "5.1.3",\n' +
    '    "cz-conventional-changelog": "1.2.0",\n' +
    '    "danger": "1.1.0",\n' +
    '    "dependency-cruiser": "2.13.0",\n' +
    '    "doctoc": "1.3.0",\n' +
    '    "dtslint": "0.6.1",\n' +
    '    "escape-string-regexp": "1.0.5",\n' +
    '    "esdoc": "0.4.7",\n' +
    '    "eslint": "4.17.0",\n' +
    '    "eslint-plugin-jasmine": "^2.10.1",\n' +
    '    "fs-extra": "5.0.0",\n' +
    '    "get-folder-size": "1.0.1",\n' +
    '    "glob": "7.1.2",\n' +
    '    "gm": "1.23.1",\n' +
    '    "google-closure-compiler-js": "20170218.0.0",\n' +
    '    "gzip-size": "4.1.0",\n' +
    '    "http-server": "0.11.1",\n' +
    '    "husky": "0.14.3",\n' +
    '    "klaw-sync": "3.0.2",\n' +
    '    "lint-staged": "7.1.1",\n' +
    '    "lodash": "4.17.5",\n' +
    '    "markdown-doctest": "0.9.1",\n' +
    '    "minimist": "1.2.0",\n' +
    '    "mkdirp": "^1.0.4",\n' +
    '    "mocha": "5.0.0",\n' +
    '    "mocha-in-sauce": "0.0.1",\n' +
    '    "npm-run-all": "4.1.2",\n' +
    '    "nyc": "11.4.1",\n' +
    '    "opn-cli": "3.1.0",\n' +
    '    "platform": "1.3.5",\n' +
    '    "promise": "8.0.1",\n' +
    '    "protractor": "3.1.1",\n' +
    '    "rollup": "0.66.6",\n' +
    '    "rollup-plugin-alias": "1.4.0",\n' +
    '    "rollup-plugin-inject": "2.0.0",\n' +
    '    "rollup-plugin-node-resolve": "2.0.0",\n' +
    '    "rx": "latest",\n' +
    '    "rxjs": "^5.5.7",\n' +
    '    "shx": "^0.3.2",\n' +
    '    "sinon": "4.3.0",\n' +
    '    "sinon-chai": "2.14.0",\n' +
    '    "source-map-support": "0.5.3",\n' +
    '    "symbol-observable": "1.0.1",\n' +
    '    "systemjs": "^0.21.0",\n' +
    '    "ts-api-guardian": "^0.5.0",\n' +
    '    "ts-node": "6.1.0",\n' +
    '    "tsconfig-paths": "3.2.0",\n' +
    '    "tslint": "5.9.1",\n' +
    '    "tslint-etc": "1.2.6",\n' +
    '    "tslint-no-toplevel-property-access": "0.0.2",\n' +
    '    "tslint-no-unused-expression-chai": "0.0.3",\n' +
    '    "typescript": "^3.0.1",\n' +
    '    "validate-commit-msg": "2.14.0",\n' +
    '    "webpack": "1.13.1",\n' +
    '    "xmlhttprequest": "1.8.0"\n' +
    '  },\n' +
    '  "engines": {\n' +
    '    "npm": ">=2.0.0"\n' +
    '  },\n' +
    '  "typings": "./index.d.ts",\n' +
    '  "ng-update": {\n' +
    '    "migrations": "./migrations/collection.json"\n' +
    '  },\n' +
    '  "module": "./_esm5/index.js",\n' +
    '  "es2015": "./_esm2015/index.js"\n' +
    '}\n',
  timestamp: 1669130813354
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/typescript/package.json:true',
  timestamp: 1669130813357
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: readFile /node_modules/typescript/package.json: {\n' +
    '    "name": "typescript",\n' +
    '    "author": "Microsoft Corp.",\n' +
    '    "homepage": "https://www.typescriptlang.org/",\n' +
    '    "version": "4.7.4",\n' +
    '    "license": "Apache-2.0",\n' +
    '    "description": "TypeScript is a language for application scale JavaScript development",\n' +
    '    "keywords": [\n' +
    '        "TypeScript",\n' +
    '        "Microsoft",\n' +
    '        "compiler",\n' +
    '        "language",\n' +
    '        "javascript"\n' +
    '    ],\n' +
    '    "bugs": {\n' +
    '        "url": "https://github.com/Microsoft/TypeScript/issues"\n' +
    '    },\n' +
    '    "repository": {\n' +
    '        "type": "git",\n' +
    '        "url": "https://github.com/Microsoft/TypeScript.git"\n' +
    '    },\n' +
    '    "main": "./lib/typescript.js",\n' +
    '    "typings": "./lib/typescript.d.ts",\n' +
    '    "bin": {\n' +
    '        "tsc": "./bin/tsc",\n' +
    '        "tsserver": "./bin/tsserver"\n' +
    '    },\n' +
    '    "engines": {\n' +
    '        "node": ">=4.2.0"\n' +
    '    },\n' +
    '    "packageManager": "npm@6.14.15",\n' +
    '    "devDependencies": {\n' +
    '        "@octokit/rest": "latest",\n' +
    '        "@types/chai": "latest",\n' +
    '        "@types/convert-source-map": "latest",\n' +
    '        "@types/glob": "latest",\n' +
    '        "@types/gulp": "^4.0.9",\n' +
    '        "@types/gulp-concat": "latest",\n' +
    '        "@types/gulp-newer": "latest",\n' +
    '        "@types/gulp-rename": "0.0.33",\n' +
    '        "@types/gulp-sourcemaps": "0.0.32",\n' +
    '        "@types/merge2": "latest",\n' +
    '        "@types/microsoft__typescript-etw": "latest",\n' +
    '        "@types/minimatch": "latest",\n' +
    '        "@types/minimist": "latest",\n' +
    '        "@types/mkdirp": "latest",\n' +
    '        "@types/mocha": "latest",\n' +
    '        "@types/ms": "latest",\n' +
    '        "@types/node": "latest",\n' +
    '        "@types/node-fetch": "^2.3.4",\n' +
    '        "@types/q": "latest",\n' +
    '        "@types/source-map-support": "latest",\n' +
    '        "@types/xml2js": "^0.4.0",\n' +
    '        "@typescript-eslint/eslint-plugin": "^4.28.0",\n' +
    '        "@typescript-eslint/experimental-utils": "^4.28.0",\n' +
    '        "@typescript-eslint/parser": "^4.28.0",\n' +
    '        "async": "latest",\n' +
    '        "azure-devops-node-api": "^11.0.1",\n' +
    '        "chai": "latest",\n' +
    '        "chalk": "^4.1.2",\n' +
    '        "convert-source-map": "latest",\n' +
    '        "del": "5.1.0",\n' +
    '        "diff": "^4.0.2",\n' +
    '        "eslint": "7.12.1",\n' +
    '        "eslint-formatter-autolinkable-stylish": "1.1.4",\n' +
    '        "eslint-plugin-import": "2.22.1",\n' +
    '        "eslint-plugin-jsdoc": "30.7.6",\n' +
    '        "eslint-plugin-no-null": "1.0.2",\n' +
    '        "fancy-log": "latest",\n' +
    '        "fs-extra": "^9.0.0",\n' +
    '        "glob": "latest",\n' +
    '        "gulp": "^4.0.0",\n' +
    '        "gulp-concat": "latest",\n' +
    '        "gulp-insert": "latest",\n' +
    '        "gulp-newer": "latest",\n' +
    '        "gulp-rename": "latest",\n' +
    '        "gulp-sourcemaps": "latest",\n' +
    '        "merge2": "latest",\n' +
    '        "minimist": "latest",\n' +
    '        "mkdirp": "latest",\n' +
    '        "mocha": "latest",\n' +
    '        "mocha-fivemat-progress-reporter": "latest",\n' +
    '        "ms": "^2.1.3",\n' +
    '        "node-fetch": "^2.6.1",\n' +
    '        "prex": "^0.4.3",\n' +
    '        "q": "latest",\n' +
    '        "source-map-support": "latest",\n' +
    '        "typescript": "^4.5.5",\n' +
    '        "vinyl": "latest",\n' +
    '        "vinyl-sourcemaps-apply": "latest",\n' +
    '        "xml2js": "^0.4.19"\n' +
    '    },\n' +
    '    "scripts": {\n' +
    '        "prepare": "gulp build-eslint-rules",\n' +
    '        "pretest": "gulp tests",\n' +
    '        "test": "gulp runtests-parallel --light=false",\n' +
    '        "test:eslint-rules": "gulp run-eslint-rules-tests",\n' +
    '        "build": "npm run build:compiler && npm run build:tests",\n' +
    '        "build:compiler": "gulp local",\n' +
    '        "build:tests": "gulp tests",\n' +
    '        "start": "node lib/tsc",\n' +
    '        "clean": "gulp clean",\n' +
    '        "gulp": "gulp",\n' +
    '        "lint": "gulp lint",\n' +
    '        "lint:ci": "gulp lint --ci",\n' +
    '        "lint:compiler": "gulp lint-compiler",\n' +
    '        "lint:scripts": "gulp lint-scripts",\n' +
    '        "setup-hooks": "node scripts/link-hooks.js"\n' +
    '    },\n' +
    '    "browser": {\n' +
    '        "fs": false,\n' +
    '        "os": false,\n' +
    '        "path": false,\n' +
    '        "crypto": false,\n' +
    '        "buffer": false,\n' +
    '        "@microsoft/typescript-etw": false,\n' +
    '        "source-map-support": false,\n' +
    '        "inspector": false\n' +
    '    },\n' +
    '    "volta": {\n' +
    '        "node": "14.15.5"\n' +
    '    }\n' +
    '}\n',
  timestamp: 1669130813357
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules: true',
  timestamp: 1669130813360
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs: true',
  timestamp: 1669130813360
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/rxjs: true',
  timestamp: 1669130813360
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/index.d.ts:true',
  timestamp: 1669130813360
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/rxjs/index.d.ts:true',
  timestamp: 1669130813360
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules: true',
  timestamp: 1669130813360
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/typescript: true',
  timestamp: 1669130813361
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/typescript/package.json:true',
  timestamp: 1669130813361
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: readFile /node_modules/typescript/package.json: {\n' +
    '    "name": "typescript",\n' +
    '    "author": "Microsoft Corp.",\n' +
    '    "homepage": "https://www.typescriptlang.org/",\n' +
    '    "version": "4.7.4",\n' +
    '    "license": "Apache-2.0",\n' +
    '    "description": "TypeScript is a language for application scale JavaScript development",\n' +
    '    "keywords": [\n' +
    '        "TypeScript",\n' +
    '        "Microsoft",\n' +
    '        "compiler",\n' +
    '        "language",\n' +
    '        "javascript"\n' +
    '    ],\n' +
    '    "bugs": {\n' +
    '        "url": "https://github.com/Microsoft/TypeScript/issues"\n' +
    '    },\n' +
    '    "repository": {\n' +
    '        "type": "git",\n' +
    '        "url": "https://github.com/Microsoft/TypeScript.git"\n' +
    '    },\n' +
    '    "main": "./lib/typescript.js",\n' +
    '    "typings": "./lib/typescript.d.ts",\n' +
    '    "bin": {\n' +
    '        "tsc": "./bin/tsc",\n' +
    '        "tsserver": "./bin/tsserver"\n' +
    '    },\n' +
    '    "engines": {\n' +
    '        "node": ">=4.2.0"\n' +
    '    },\n' +
    '    "packageManager": "npm@6.14.15",\n' +
    '    "devDependencies": {\n' +
    '        "@octokit/rest": "latest",\n' +
    '        "@types/chai": "latest",\n' +
    '        "@types/convert-source-map": "latest",\n' +
    '        "@types/glob": "latest",\n' +
    '        "@types/gulp": "^4.0.9",\n' +
    '        "@types/gulp-concat": "latest",\n' +
    '        "@types/gulp-newer": "latest",\n' +
    '        "@types/gulp-rename": "0.0.33",\n' +
    '        "@types/gulp-sourcemaps": "0.0.32",\n' +
    '        "@types/merge2": "latest",\n' +
    '        "@types/microsoft__typescript-etw": "latest",\n' +
    '        "@types/minimatch": "latest",\n' +
    '        "@types/minimist": "latest",\n' +
    '        "@types/mkdirp": "latest",\n' +
    '        "@types/mocha": "latest",\n' +
    '        "@types/ms": "latest",\n' +
    '        "@types/node": "latest",\n' +
    '        "@types/node-fetch": "^2.3.4",\n' +
    '        "@types/q": "latest",\n' +
    '        "@types/source-map-support": "latest",\n' +
    '        "@types/xml2js": "^0.4.0",\n' +
    '        "@typescript-eslint/eslint-plugin": "^4.28.0",\n' +
    '        "@typescript-eslint/experimental-utils": "^4.28.0",\n' +
    '        "@typescript-eslint/parser": "^4.28.0",\n' +
    '        "async": "latest",\n' +
    '        "azure-devops-node-api": "^11.0.1",\n' +
    '        "chai": "latest",\n' +
    '        "chalk": "^4.1.2",\n' +
    '        "convert-source-map": "latest",\n' +
    '        "del": "5.1.0",\n' +
    '        "diff": "^4.0.2",\n' +
    '        "eslint": "7.12.1",\n' +
    '        "eslint-formatter-autolinkable-stylish": "1.1.4",\n' +
    '        "eslint-plugin-import": "2.22.1",\n' +
    '        "eslint-plugin-jsdoc": "30.7.6",\n' +
    '        "eslint-plugin-no-null": "1.0.2",\n' +
    '        "fancy-log": "latest",\n' +
    '        "fs-extra": "^9.0.0",\n' +
    '        "glob": "latest",\n' +
    '        "gulp": "^4.0.0",\n' +
    '        "gulp-concat": "latest",\n' +
    '        "gulp-insert": "latest",\n' +
    '        "gulp-newer": "latest",\n' +
    '        "gulp-rename": "latest",\n' +
    '        "gulp-sourcemaps": "latest",\n' +
    '        "merge2": "latest",\n' +
    '        "minimist": "latest",\n' +
    '        "mkdirp": "latest",\n' +
    '        "mocha": "latest",\n' +
    '        "mocha-fivemat-progress-reporter": "latest",\n' +
    '        "ms": "^2.1.3",\n' +
    '        "node-fetch": "^2.6.1",\n' +
    '        "prex": "^0.4.3",\n' +
    '        "q": "latest",\n' +
    '        "source-map-support": "latest",\n' +
    '        "typescript": "^4.5.5",\n' +
    '        "vinyl": "latest",\n' +
    '        "vinyl-sourcemaps-apply": "latest",\n' +
    '        "xml2js": "^0.4.19"\n' +
    '    },\n' +
    '    "scripts": {\n' +
    '        "prepare": "gulp build-eslint-rules",\n' +
    '        "pretest": "gulp tests",\n' +
    '        "test": "gulp runtests-parallel --light=false",\n' +
    '        "test:eslint-rules": "gulp run-eslint-rules-tests",\n' +
    '        "build": "npm run build:compiler && npm run build:tests",\n' +
    '        "build:compiler": "gulp local",\n' +
    '        "build:tests": "gulp tests",\n' +
    '        "start": "node lib/tsc",\n' +
    '        "clean": "gulp clean",\n' +
    '        "gulp": "gulp",\n' +
    '        "lint": "gulp lint",\n' +
    '        "lint:ci": "gulp lint --ci",\n' +
    '        "lint:compiler": "gulp lint-compiler",\n' +
    '        "lint:scripts": "gulp lint-scripts",\n' +
    '        "setup-hooks": "node scripts/link-hooks.js"\n' +
    '    },\n' +
    '    "browser": {\n' +
    '        "fs": false,\n' +
    '        "os": false,\n' +
    '        "path": false,\n' +
    '        "crypto": false,\n' +
    '        "buffer": false,\n' +
    '        "@microsoft/typescript-etw": false,\n' +
    '        "source-map-support": false,\n' +
    '        "inspector": false\n' +
    '    },\n' +
    '    "volta": {\n' +
    '        "node": "14.15.5"\n' +
    '    }\n' +
    '}\n',
  timestamp: 1669130813361
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/typescript/lib: true',
  timestamp: 1669130813363
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: directoryExists for /node_modules/typescript: true',
  timestamp: 1669130813363
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/typescript/lib/typescript.d.ts:true',
  timestamp: 1669130813363
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: exists /node_modules/typescript/lib/typescript.d.ts:true',
  timestamp: 1669130813363
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, /node_modules/typescript/lib/typescript.d.ts, [object Object]',
  timestamp: 1669130813364
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: readFile /node_modules/typescript/lib/typescript.d.ts: /*! *****************************************************************************\n' +
    'Copyright (c) Microsoft Corporation. All rights reserved.\n' +
    'Licensed under the Apache License, Version 2.0 (the "License"); you may not use\n' +
    'this file except in compliance with the License. You may obtain a copy of the\n' +
    'License at http://www.apache.org/licenses/LICENSE-2.0\n' +
    '\n' +
    'THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n' +
    'KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\n' +
    'WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\n' +
    'MERCHANTABLITY OR NON-INFRINGEMENT.\n' +
    '\n' +
    'See the Apache Version 2.0 License for specific language governing permissions\n' +
    'and limitations under the License.\n' +
    '***************************************************************************** */\n' +
    '\n' +
    'declare namespace ts {\n' +
    '    const versionMajorMinor = "4.7";\n' +
    '    /** The version of the TypeScript compiler release */\n' +
    '    const version: string;\n' +
    '    /**\n' +
    '     * Type of objects whose values are all of the same type.\n' +
    '     * The `in` and `for-in` operators can *not* be safely used,\n' +
    '     * since `Object.prototype` may be modified by outside code.\n' +
    '     */\n' +
    '    interface MapLike<T> {\n' +
    '        [index: string]: T;\n' +
    '    }\n' +
    '    interface SortedReadonlyArray<T> extends ReadonlyArray<T> {\n' +
    '        " __sortedArrayBrand": any;\n' +
    '    }\n' +
    '    interface SortedArray<T> extends Array<T> {\n' +
    '        " __sortedArrayBrand": any;\n' +
    '    }\n' +
    '    /** Common read methods for ES6 Map/Set. */\n' +
    '    interface ReadonlyCollection<K> {\n' +
    '        readonly size: number;\n' +
    '        has(key: K): boolean;\n' +
    '        keys(): Iterator<K>;\n' +
    '    }\n' +
    '    /** Common write methods for ES6 Map/Set. */\n' +
    '    interface Collection<K> extends ReadonlyCollection<K> {\n' +
    '        delete(key: K): boolean;\n' +
    '        clear(): void;\n' +
    '    }\n' +
    '    /** ES6 Map interface, only read methods included. */\n' +
    '    interface ReadonlyESMap<K, V> extends ReadonlyCollection<K> {\n' +
    '        get(key: K): V | undefined;\n' +
    '        values(): Iterator<V>;\n' +
    '        entries(): Iterator<[K, V]>;\n' +
    '        forEach(action: (value: V, key: K) => void): void;\n' +
    '    }\n' +
    '    /**\n' +
    '     * ES6 Map interface, only read methods included.\n' +
    '     */\n' +
    '    interface ReadonlyMap<T> extends ReadonlyESMap<string, T> {\n' +
    '    }\n' +
    '    /** ES6 Map interface. */\n' +
    '    interface ESMap<K, V> extends ReadonlyESMap<K, V>, Collection<K> {\n' +
    '        set(key: K, value: V): this;\n' +
    '    }\n' +
    '    /**\n' +
    '     * ES6 Map interface.\n' +
    '     */\n' +
    '    interface Map<T> extends ESMap<string, T> {\n' +
    '    }\n' +
    '    /** ES6 Set interface, only read methods included. */\n' +
    '    interface ReadonlySet<T> extends ReadonlyCollection<T> {\n' +
    '        has(value: T): boolean;\n' +
    '        values(): Iterator<T>;\n' +
    '        entries(): Iterator<[T, T]>;\n' +
    '        forEach(action: (value: T, key: T) => void): void;\n' +
    '    }\n' +
    '    /** ES6 Set interface. */\n' +
    '    interface Set<T> extends ReadonlySet<T>, Collection<T> {\n' +
    '        add(value: T): this;\n' +
    '        delete(value: T): boolean;\n' +
    '    }\n' +
    '    /** ES6 Iterator type. */\n' +
    '    interface Iterator<T> {\n' +
    '        next(): {\n' +
    '            value: T;\n' +
    '            done?: false;\n' +
    '        } | {\n' +
    '            value: void;\n' +
    '            done: true;\n' +
    '        };\n' +
    '    }\n' +
    '    /** Array that is only intended to be pushed to, never read. */\n' +
    '    interface Push<T> {\n' +
    '        push(...values: T[]): void;\n' +
    '    }\n' +
    '}\n' +
    'declare namespace ts {\n' +
    '    export type Path = string & {\n' +
    '        __pathBrand: any;\n' +
    '    };\n' +
    '    export interface TextRange {\n' +
    '        pos: number;\n' +
    '        end: number;\n' +
    '    }\n' +
    '    export interface ReadonlyTextRange {\n' +
    '        readonly pos: number;\n' +
    '        readonly end: number;\n' +
    '    }\n' +
    '    export enum SyntaxKind {\n' +
    '        Unknown = 0,\n' +
    '        EndOfFileToken = 1,\n' +
    '        SingleLineCommentTrivia = 2,\n' +
    '        MultiLineCommentTrivia = 3,\n' +
    '        NewLineTrivia = 4,\n' +
    '        WhitespaceTrivia = 5,\n' +
    '        ShebangTrivia = 6,\n' +
    '        ConflictMarkerTrivia = 7,\n' +
    '        NumericLiteral = 8,\n' +
    '        BigIntLiteral = 9,\n' +
    '        StringLiteral = 10,\n' +
    '        JsxText = 11,\n' +
    '        JsxTextAllWhiteSpaces = 12,\n' +
    '        RegularExpressionLiteral = 13,\n' +
    '        NoSubstitutionTemplateLiteral = 14,\n' +
    '        TemplateHead = 15,\n' +
    '        TemplateMiddle = 16,\n' +
    '        TemplateTail = 17,\n' +
    '        OpenBraceToken = 18,\n' +
    '        CloseBraceToken = 19,\n' +
    '        OpenParenToken = 20,\n' +
    '        CloseParenToken = 21,\n' +
    '        OpenBracketToken = 22,\n' +
    '        CloseBracketToken = 23,\n' +
    '        DotToken = 24,\n' +
    '        DotDotDotToken = 25,\n' +
    '        SemicolonToken = 26,\n' +
    '        CommaToken = 27,\n' +
    '        QuestionDotToken = 28,\n' +
    '        LessThanToken = 29,\n' +
    '        LessThanSlashToken = 30,\n' +
    '        GreaterThanToken = 31,\n' +
    '        LessThanEqualsToken = 32,\n' +
    '        GreaterThanEqualsToken = 33,\n' +
    '        EqualsEqualsToken = 34,\n' +
    '        ExclamationEqualsToken = 35,\n' +
    '        EqualsEqualsEqualsToken = 36,\n' +
    '        ExclamationEqualsEqualsToken = 37,\n' +
    '        EqualsGreaterThanToken = 38,\n' +
    '        PlusToken = 39,\n' +
    '        MinusToken = 40,\n' +
    '        AsteriskToken = 41,\n' +
    '        AsteriskAsteriskToken = 42,\n' +
    '        SlashToken = 43,\n' +
    '        PercentToken = 44,\n' +
    '        PlusPlusToken = 45,\n' +
    '        MinusMinusToken = 46,\n' +
    '        LessThanLessThanToken = 47,\n' +
    '        GreaterThanGreaterThanToken = 48,\n' +
    '        GreaterThanGreaterThanGreaterThanToken = 49,\n' +
    '        AmpersandToken = 50,\n' +
    '        BarToken = 51,\n' +
    '        CaretToken = 52,\n' +
    '        ExclamationToken = 53,\n' +
    '        TildeToken = 54,\n' +
    '        AmpersandAmpersandToken = 55,\n' +
    '        BarBarToken = 56,\n' +
    '        QuestionToken = 57,\n' +
    '        ColonToken = 58,\n' +
    '        AtToken = 59,\n' +
    '        QuestionQuestionToken = 60,\n' +
    '        /** Only the JSDoc scanner produces BacktickToken. The normal scanner produces NoSubstitutionTemplateLiteral and related kinds. */\n' +
    '        BacktickToken = 61,\n' +
    '        /** Only the JSDoc scanner produces HashToken. The normal scanner produces PrivateIdentifier. */\n' +
    '        HashToken = 62,\n' +
    '        EqualsToken = 63,\n' +
    '        PlusEqualsToken = 64,\n' +
    '        MinusEqualsToken = 65,\n' +
    '        AsteriskEqualsToken = 66,\n' +
    '        AsteriskAsteriskEqualsToken = 67,\n' +
    '        SlashEqualsToken = 68,\n' +
    '        PercentEqualsToken = 69,\n' +
    '        LessThanLessThanEqualsToken = 70,\n' +
    '        GreaterThanGreaterThanEqualsToken = 71,\n' +
    '        GreaterThanGreaterThanGreaterThanEqualsToken = 72,\n' +
    '        AmpersandEqualsToken = 73,\n' +
    '        BarEqualsToken = 74,\n' +
    '        BarBarEqualsToken = 75,\n' +
    '        AmpersandAmpersandEqualsToken = 76,\n' +
    '        QuestionQuestionEqualsToken = 77,\n' +
    '        CaretEqualsToken = 78,\n' +
    '        Identifier = 79,\n' +
    '        PrivateIdentifier = 80,\n' +
    '        BreakKeyword = 81,\n' +
    '        CaseKeyword = 82,\n' +
    '        CatchKeyword = 83,\n' +
    '        ClassKeyword = 84,\n' +
    '        ConstKeyword = 85,\n' +
    '        ContinueKeyword = 86,\n' +
    '        DebuggerKeyword = 87,\n' +
    '        DefaultKeyword = 88,\n' +
    '        DeleteKeyword = 89,\n' +
    '        DoKeyword = 90,\n' +
    '        ElseKeyword = 91,\n' +
    '        EnumKeyword = 92,\n' +
    '        ExportKeyword = 93,\n' +
    '        ExtendsKeyword = 94,\n' +
    '        FalseKeyword = 95,\n' +
    '        FinallyKeyword = 96,\n' +
    '        ForKeyword = 97,\n' +
    '        FunctionKeyword = 98,\n' +
    '        IfKeyword = 99,\n' +
    '        ImportKeyword = 100,\n' +
    '        InKeyword = 101,\n' +
    '        InstanceOfKeyword = 102,\n' +
    '        NewKeyword = 103,\n' +
    '        NullKeyword = 104,\n' +
    '        ReturnKeyword = 105,\n' +
    '        SuperKeyword = 106,\n' +
    '        SwitchKeyword = 107,\n' +
    '        ThisKeyword = 108,\n' +
    '        ThrowKeyword = 109,\n' +
    '        TrueKeyword = 110,\n' +
    '        TryKeyword = 111,\n' +
    '        TypeOfKeyword = 112,\n' +
    '        VarKeyword = 113,\n' +
    '        VoidKeyword = 114,\n' +
    '        WhileKeyword = 115,\n' +
    '        WithKeyword = 116,\n' +
    '        ImplementsKeyword = 117,\n' +
    '        InterfaceKeyword = 118,\n' +
    '        LetKeyword = 119,\n' +
    '        PackageKeyword = 120,\n' +
    '        PrivateKeyword = 121,\n' +
    '        ProtectedKeyword = 122,\n' +
    '        PublicKeyword = 123,\n' +
    '        StaticKeyword = 124,\n' +
    '        YieldKeyword = 125,\n' +
    '        AbstractKeyword = 126,\n' +
    '        AsKeyword = 127,\n' +
    '        AssertsKeyword = 128,\n' +
    '        AssertKeyword = 129,\n' +
    '        AnyKeyword = 130,\n' +
    '        AsyncKeyword = 131,\n' +
    '        AwaitKeyword = 132,\n' +
    '        BooleanKeyword = 133,\n' +
    '        ConstructorKeyword = 134,\n' +
    '        DeclareKeyword = 135,\n' +
    '        GetKeyword = 136,\n' +
    '        InferKeyword = 137,\n' +
    '        IntrinsicKeyword = 138,\n' +
    '        IsKeyword = 139,\n' +
    '        KeyOfKeyword = 140,\n' +
    '        ModuleKeyword = 141,\n' +
    '        NamespaceKeyword = 142,\n' +
    '        NeverKeyword = 143,\n' +
    '        OutKeyword = 144,\n' +
    '        ReadonlyKeyword = 145,\n' +
    '        RequireKeyword = 146,\n' +
    '        NumberKeyword = 147,\n' +
    '        ObjectKeyword = 148,\n' +
    '        SetKeyword = 149,\n' +
    '        StringKeyword = 150,\n' +
    '        SymbolKeyword = 151,\n' +
    '        TypeKeyword = 152,\n' +
    '        UndefinedKeyword = 153,\n' +
    '        UniqueKeyword = 154,\n' +
    '        UnknownKeyword = 155,\n' +
    '        FromKeyword = 156,\n' +
    '        GlobalKeyword = 157,\n' +
    '        BigIntKeyword = 158,\n' +
    '        OverrideKeyword = 159,\n' +
    '        OfKeyword = 160,\n' +
    '        QualifiedName = 161,\n' +
    '        ComputedPropertyName = 162,\n' +
    '        TypeParameter = 163,\n' +
    '        Parameter = 164,\n' +
    '        Decorator = 165,\n' +
    '        PropertySignature = 166,\n' +
    '        PropertyDeclaration = 167,\n' +
    '        MethodSignature = 168,\n' +
    '        MethodDeclaration = 169,\n' +
    '        ClassStaticBlockDeclaration = 170,\n' +
    '        Constructor = 171,\n' +
    '        GetAccessor = 172,\n' +
    '        SetAccessor = 173,\n' +
    '        CallSignature = 174,\n' +
    '        ConstructSignature = 175,\n' +
    '        IndexSignature = 176,\n' +
    '        TypePredicate = 177,\n' +
    '        TypeReference = 178,\n' +
    '        FunctionType = 179,\n' +
    '        ConstructorType = 180,\n' +
    '        TypeQuery = 181,\n' +
    '        TypeLiteral = 182,\n' +
    '        ArrayType = 183,\n' +
    '        TupleType = 184,\n' +
    '        OptionalType = 185,\n' +
    '        RestType = 186,\n' +
    '        UnionType = 187,\n' +
    '        IntersectionType = 188,\n' +
    '        ConditionalType = 189,\n' +
    '        InferType = 190,\n' +
    '        ParenthesizedType = 191,\n' +
    '        ThisType = 192,\n' +
    '        TypeOperator = 193,\n' +
    '        IndexedAccessType = 194,\n' +
    '        MappedType = 195,\n' +
    '        LiteralType = 196,\n' +
    '        NamedTupleMember = 197,\n' +
    '        TemplateLiteralType = 198,\n' +
    '        TemplateLiteralTypeSpan = 199,\n' +
    '        ImportType = 200,\n' +
    '        ObjectBindingPattern = 201,\n' +
    '        ArrayBindingPattern = 202,\n' +
    '        BindingElement = 203,\n' +
    '        ArrayLiteralExpression = 204,\n' +
    '        ObjectLiteralExpression = 205,\n' +
    '        PropertyAccessExpression = 206,\n' +
    '        ElementAccessExpression = 207,\n' +
    '        CallExpression = 208,\n' +
    '        NewExpression = 209,\n' +
    '        TaggedTemplateExpression = 210,\n' +
    '        TypeAssertionExpression = 211,\n' +
    '        ParenthesizedExpression = 212,\n' +
    '        FunctionExpression = 213,\n' +
    '        ArrowFunction = 214,\n' +
    '        DeleteExpression = 215,\n' +
    '        TypeOfExpression = 216,\n' +
    '        VoidExpression = 217,\n' +
    '        AwaitExpression = 218,\n' +
    '        PrefixUnaryExpression = 219,\n' +
    '        PostfixUnaryExpression = 220,\n' +
    '        BinaryExpression = 221,\n' +
    '        ConditionalExpression = 222,\n' +
    '        TemplateExpression = 223,\n' +
    '        YieldExpression = 224,\n' +
    '        SpreadElement = 225,\n' +
    '        ClassExpression = 226,\n' +
    '        OmittedExpression = 227,\n' +
    '        ExpressionWithTypeArguments = 228,\n' +
    '        AsExpression = 229,\n' +
    '        NonNullExpression = 230,\n' +
    '        MetaProperty = 231,\n' +
    '        SyntheticExpression = 232,\n' +
    '        TemplateSpan = 233,\n' +
    '        SemicolonClassElement = 234,\n' +
    '        Block = 235,\n' +
    '        EmptyStatement = 236,\n' +
    '        VariableStatement = 237,\n' +
    '        ExpressionStatement = 238,\n' +
    '        IfStatement = 239,\n' +
    '        DoStatement = 240,\n' +
    '        WhileStatement = 241,\n' +
    '        ForStatement = 242,\n' +
    '        ForInStatement = 243,\n' +
    '        ForOfStatement = 244,\n' +
    '        ContinueStatement = 245,\n' +
    '        BreakStatement = 246,\n' +
    '        ReturnStatement = 247,\n' +
    '        WithStatement = 248,\n' +
    '        SwitchStatement = 249,\n' +
    '        LabeledStatement = 250,\n' +
    '        ThrowStatement = 251,\n' +
    '        TryStatement = 252,\n' +
    '        DebuggerStatement = 253,\n' +
    '        VariableDeclaration = 254,\n' +
    '        VariableDeclarationList = 255,\n' +
    '        FunctionDeclaration = 256,\n' +
    '        ClassDeclaration = 257,\n' +
    '        InterfaceDeclaration = 258,\n' +
    '        TypeAliasDeclaration = 259,\n' +
    '        EnumDeclaration = 260,\n' +
    '        ModuleDeclaration = 261,\n' +
    '        ModuleBlock = 262,\n' +
    '        CaseBlock = 263,\n' +
    '        NamespaceExportDeclaration = 264,\n' +
    '        ImportEqualsDeclaration = 265,\n' +
    '        ImportDeclaration = 266,\n' +
    '        ImportClause = 267,\n' +
    '        NamespaceImport = 268,\n' +
    '        NamedImports = 269,\n' +
    '        ImportSpecifier = 270,\n' +
    '        ExportAssignment = 271,\n' +
    '        ExportDeclaration = 272,\n' +
    '        NamedExports = 273,\n' +
    '        NamespaceExport = 274,\n' +
    '        ExportSpecifier = 275,\n' +
    '        MissingDeclaration = 276,\n' +
    '        ExternalModuleReference = 277,\n' +
    '        JsxElement = 278,\n' +
    '        JsxSelfClosingElement = 279,\n' +
    '        JsxOpeningElement = 280,\n' +
    '        JsxClosingElement = 281,\n' +
    '        JsxFragment = 282,\n' +
    '        JsxOpeningFragment = 283,\n' +
    '        JsxClosingFragment = 284,\n' +
    '        JsxAttribute = 285,\n' +
    '        JsxAttributes = 286,\n' +
    '        JsxSpreadAttribute = 287,\n' +
    '        JsxExpression = 288,\n' +
    '        CaseClause = 289,\n' +
    '        DefaultClause = 290,\n' +
    '        HeritageClause = 291,\n' +
    '        CatchClause = 292,\n' +
    '        AssertClause = 293,\n' +
    '        AssertEntry = 294,\n' +
    '        ImportTypeAssertionContainer = 295,\n' +
    '        PropertyAssignment = 296,\n' +
    '        ShorthandPropertyAssignment = 297,\n' +
    '        SpreadAssignment = 298,\n' +
    '        EnumMember = 299,\n' +
    '        UnparsedPrologue = 300,\n' +
    '        UnparsedPrepend = 301,\n' +
    '        UnparsedText = 302,\n' +
    '        UnparsedInternalText = 303,\n' +
    '        UnparsedSyntheticReference = 304,\n' +
    '        SourceFile = 305,\n' +
    '        Bundle = 306,\n' +
    '        UnparsedSource = 307,\n' +
    '        InputFiles = 308,\n' +
    '        JSDocTypeExpression = 309,\n' +
    '        JSDocNameReference = 310,\n' +
    '        JSDocMemberName = 311,\n' +
    '        JSDocAllType = 312,\n' +
    '        JSDocUnknownType = 313,\n' +
    '        JSDocNullableType = 314,\n' +
    '        JSDocNonNullableType = 315,\n' +
    '        JSDocOptionalType = 316,\n' +
    '        JSDocFunctionType = 317,\n' +
    '        JSDocVariadicType = 318,\n' +
    '        JSDocNamepathType = 319,\n' +
    '        /** @deprecated Use SyntaxKind.JSDoc */\n' +
    '        JSDocComment = 320,\n' +
    '        JSDocText = 321,\n' +
    '        JSDocTypeLiteral = 322,\n' +
    '        JSDocSignature = 323,\n' +
    '        JSDocLink = 324,\n' +
    '        JSDocLinkCode = 325,\n' +
    '        JSDocLinkPlain = 326,\n' +
    '        JSDocTag = 327,\n' +
    '        JSDocAugmentsTag = 328,\n' +
    '        JSDocImplementsTag = 329,\n' +
    '        JSDocAuthorTag = 330,\n' +
    '        JSDocDeprecatedTag = 331,\n' +
    '        JSDocClassTag = 332,\n' +
    '        JSDocPublicTag = 333,\n' +
    '        JSDocPrivateTag = 334,\n' +
    '        JSDocProtectedTag = 335,\n' +
    '        JSDocReadonlyTag = 336,\n' +
    '        JSDocOverrideTag = 337,\n' +
    '        JSDocCallbackTag = 338,\n' +
    '        JSDocEnumTag = 339,\n' +
    '        JSDocParameterTag = 340,\n' +
    '        JSDocReturnTag = 341,\n' +
    '        JSDocThisTag = 342,\n' +
    '        JSDocTypeTag = 343,\n' +
    '        JSDocTemplateTag = 344,\n' +
    '        JSDocTypedefTag = 345,\n' +
    '        JSDocSeeTag = 346,\n' +
    '        JSDocPropertyTag = 347,\n' +
    '        SyntaxList = 348,\n' +
    '        NotEmittedStatement = 349,\n' +
    '        PartiallyEmittedExpression = 350,\n' +
    '        CommaListExpression = 351,\n' +
    '        MergeDeclarationMarker = 352,\n' +
    '        EndOfDeclarationMarker = 353,\n' +
    '        SyntheticReferenceExpression = 354,\n' +
    '        Count = 355,\n' +
    '        FirstAssignment = 63,\n' +
    '        LastAssignment = 78,\n' +
    '        FirstCompoundAssignment = 64,\n' +
    '        LastCompoundAssignment = 78,\n' +
    '        FirstReservedWord = 81,\n' +
    '        LastReservedWord = 116,\n' +
    '        FirstKeyword = 81,\n' +
    '        LastKeyword = 160,\n' +
    '        FirstFutureReservedWord = 117,\n' +
    '        LastFutureReservedWord = 125,\n' +
    '        FirstTypeNode = 177,\n' +
    '        LastTypeNode = 200,\n' +
    '        FirstPunctuation = 18,\n' +
    '        LastPunctuation = 78,\n' +
    '        FirstToken = 0,\n' +
    '        LastToken = 160,\n' +
    '        FirstTriviaToken = 2,\n' +
    '        LastTriviaToken = 7,\n' +
    '        FirstLiteralToken = 8,\n' +
    '        LastLiteralToken = 14,\n' +
    '        FirstTemplateToken = 14,\n' +
    '        LastTemplateToken = 17,\n' +
    '        FirstBinaryOperator = 29,\n' +
    '        LastBinaryOperator = 78,\n' +
    '        FirstStatement = 237,\n' +
    '        LastStatement = 253,\n' +
    '        FirstNode = 161,\n' +
    '        FirstJSDocNode = 309,\n' +
    '        LastJSDocNode = 347,\n' +
    '        FirstJSDocTagNode = 327,\n' +
    '        LastJSDocTagNode = 347,\n' +
    '        JSDoc = 320\n' +
    '    }\n' +
    '    export type TriviaSyntaxKind = SyntaxKind.SingleLineCommentTrivia | SyntaxKind.MultiLineCommentTrivia | SyntaxKind.NewLineTrivia | SyntaxKind.WhitespaceTrivia | SyntaxKind.ShebangTrivia | SyntaxKind.ConflictMarkerTrivia;\n' +
    '    export type LiteralSyntaxKind = SyntaxKind.NumericLiteral | SyntaxKind.BigIntLiteral | SyntaxKind.StringLiteral | SyntaxKind.JsxText | SyntaxKind.JsxTextAllWhiteSpaces | SyntaxKind.RegularExpressionLiteral | SyntaxKind.NoSubstitutionTemplateLiteral;\n' +
    '    export type PseudoLiteralSyntaxKind = SyntaxKind.TemplateHead | SyntaxKind.TemplateMiddle | SyntaxKind.TemplateTail;\n' +
    '    export type PunctuationSyntaxKind = SyntaxKind.OpenBraceToken | SyntaxKind.CloseBraceToken | SyntaxKind.OpenParenToken | SyntaxKind.CloseParenToken | SyntaxKind.OpenBracketToken | SyntaxKind.CloseBracketToken | SyntaxKind.DotToken | SyntaxKind.DotDotDotToken | SyntaxKind.SemicolonToken | SyntaxKind.CommaToken | SyntaxKind.QuestionDotToken | SyntaxKind.LessThanToken | SyntaxKind.LessThanSlashToken | SyntaxKind.GreaterThanToken | SyntaxKind.LessThanEqualsToken | SyntaxKind.GreaterThanEqualsToken | SyntaxKind.EqualsEqualsToken | SyntaxKind.ExclamationEqualsToken | SyntaxKind.EqualsEqualsEqualsToken | SyntaxKind.ExclamationEqualsEqualsToken | SyntaxKind.EqualsGreaterThanToken | SyntaxKind.PlusToken | SyntaxKind.MinusToken | SyntaxKind.AsteriskToken | SyntaxKind.AsteriskAsteriskToken | SyntaxKind.SlashToken | SyntaxKind.PercentToken | SyntaxKind.PlusPlusToken | SyntaxKind.MinusMinusToken | SyntaxKind.LessThanLessThanToken | SyntaxKind.GreaterThanGreaterThanToken | SyntaxKind.GreaterThanGreaterThanGreaterThanToken | SyntaxKind.AmpersandToken | SyntaxKind.BarToken | SyntaxKind.CaretToken | SyntaxKind.ExclamationToken | SyntaxKind.TildeToken | SyntaxKind.AmpersandAmpersandToken | SyntaxKind.BarBarToken | SyntaxKind.QuestionQuestionToken | SyntaxKind.QuestionToken | SyntaxKind.ColonToken | SyntaxKind.AtToken | SyntaxKind.BacktickToken | SyntaxKind.HashToken | SyntaxKind.EqualsToken | SyntaxKind.PlusEqualsToken | SyntaxKind.MinusEqualsToken | SyntaxKind.AsteriskEqualsToken | SyntaxKind.AsteriskAsteriskEqualsToken | SyntaxKind.SlashEqualsToken | SyntaxKind.PercentEqualsToken | SyntaxKind.LessThanLessThanEqualsToken | SyntaxKind.GreaterThanGreaterThanEqualsToken | SyntaxKind.GreaterThanGreaterThanGreaterThanEqualsToken | SyntaxKind.AmpersandEqualsToken | SyntaxKind.BarEqualsToken | SyntaxKind.CaretEqualsToken;\n' +
    '    export type KeywordSyntaxKind = SyntaxKind.AbstractKeyword | SyntaxKind.AnyKeyword | SyntaxKind.AsKeyword | SyntaxKind.AssertsKeyword | SyntaxKind.AssertKeyword | SyntaxKind.AsyncKeyword | SyntaxKind.AwaitKeyword | SyntaxKind.BigIntKeyword | SyntaxKind.BooleanKeyword | SyntaxKind.BreakKeyword | SyntaxKind.CaseKeyword | SyntaxKind.CatchKeyword | SyntaxKind.ClassKeyword | SyntaxKind.ConstKeyword | SyntaxKind.ConstructorKeyword | SyntaxKind.ContinueKeyword | SyntaxKind.DebuggerKeyword | SyntaxKind.DeclareKeyword | SyntaxKind.DefaultKeyword | SyntaxKind.DeleteKeyword | SyntaxKind.DoKeyword | SyntaxKind.ElseKeyword | SyntaxKind.EnumKeyword | SyntaxKind.ExportKeyword | SyntaxKind.ExtendsKeyword | SyntaxKind.FalseKeyword | SyntaxKind.FinallyKeyword | SyntaxKind.ForKeyword | SyntaxKind.FromKeyword | SyntaxKind.FunctionKeyword | SyntaxKind.GetKeyword | SyntaxKind.GlobalKeyword | SyntaxKind.IfKeyword | SyntaxKind.ImplementsKeyword | SyntaxKind.ImportKeyword | SyntaxKind.InferKeyword | SyntaxKind.InKeyword | SyntaxKind.InstanceOfKeyword | SyntaxKind.InterfaceKeyword | SyntaxKind.IntrinsicKeyword | SyntaxKind.IsKeyword | SyntaxKind.KeyOfKeyword | SyntaxKind.LetKeyword | SyntaxKind.ModuleKeyword | SyntaxKind.NamespaceKeyword | SyntaxKind.NeverKeyword | SyntaxKind.NewKeyword | SyntaxKind.NullKeyword | SyntaxKind.NumberKeyword | SyntaxKind.ObjectKeyword | SyntaxKind.OfKeyword | SyntaxKind.PackageKeyword | SyntaxKind.PrivateKeyword | SyntaxKind.ProtectedKeyword | SyntaxKind.PublicKeyword | SyntaxKind.ReadonlyKeyword | SyntaxKind.OutKeyword | SyntaxKind.OverrideKeyword | SyntaxKind.RequireKeyword | SyntaxKind.ReturnKeyword | SyntaxKind.SetKeyword | SyntaxKind.StaticKeyword | SyntaxKind.StringKeyword | SyntaxKind.SuperKeyword | SyntaxKind.SwitchKeyword | SyntaxKind.SymbolKeyword | SyntaxKind.ThisKeyword | SyntaxKind.ThrowKeyword | SyntaxKind.TrueKeyword | SyntaxKind.TryKeyword | SyntaxKind.TypeKeyword | SyntaxKind.TypeOfKeyword | SyntaxKind.UndefinedKeyword | SyntaxKind.UniqueKeyword | SyntaxKind.UnknownKeyword | SyntaxKind.VarKeyword | SyntaxKind.VoidKeyword | SyntaxKind.WhileKeyword | SyntaxKind.WithKeyword | SyntaxKind.YieldKeyword;\n' +
    '    export type ModifierSyntaxKind = SyntaxKind.AbstractKeyword | SyntaxKind.AsyncKeyword | SyntaxKind.ConstKeyword | SyntaxKind.DeclareKeyword | SyntaxKind.DefaultKeyword | SyntaxKind.ExportKeyword | SyntaxKind.InKeyword | SyntaxKind.PrivateKeyword | SyntaxKind.ProtectedKeyword | SyntaxKind.PublicKeyword | SyntaxKind.ReadonlyKeyword | SyntaxKind.OutKeyword | SyntaxKind.OverrideKeyword | SyntaxKind.StaticKeyword;\n' +
    '    export type KeywordTypeSyntaxKind = SyntaxKind.AnyKeyword | SyntaxKind.BigIntKeyword | SyntaxKind.BooleanKeyword | SyntaxKind.IntrinsicKeyword | SyntaxKind.NeverKeyword | SyntaxKind.NumberKeyword | SyntaxKind.ObjectKeyword | SyntaxKind.StringKeyword | SyntaxKind.SymbolKeyword | SyntaxKind.UndefinedKeyword | SyntaxKind.UnknownKeyword | SyntaxKind.VoidKeyword;\n' +
    '    export type TokenSyntaxKind = SyntaxKind.Unknown | SyntaxKind.EndOfFileToken | TriviaSyntaxKind | LiteralSyntaxKind | PseudoLiteralSyntaxKind | PunctuationSyntaxKind | SyntaxKind.Identifier | KeywordSyntaxKind;\n' +
    '    export type JsxTokenSyntaxKind = SyntaxKind.LessThanSlashToken | SyntaxKind.EndOfFileToken | SyntaxKind.ConflictMarkerTrivia | SyntaxKind.JsxText | SyntaxKind.JsxTextAllWhiteSpaces | SyntaxKind.OpenBraceToken | SyntaxKind.LessThanToken;\n' +
    '    export type JSDocSyntaxKind = SyntaxKind.EndOfFileToken | SyntaxKind.WhitespaceTrivia | SyntaxKind.AtToken | SyntaxKind.NewLineTrivia | SyntaxKind.AsteriskToken | SyntaxKind.OpenBraceToken | SyntaxKind.CloseBraceToken | SyntaxKind.LessThanToken | SyntaxKind.GreaterThanToken | SyntaxKind.OpenBracketToken | SyntaxKind.CloseBracketToken | SyntaxKind.EqualsToken | SyntaxKind.CommaToken | SyntaxKind.DotToken | SyntaxKind.Identifier | SyntaxKind.BacktickToken | SyntaxKind.HashToken | SyntaxKind.Unknown | KeywordSyntaxKind;\n' +
    '    export enum NodeFlags {\n' +
    '        None = 0,\n' +
    '        Let = 1,\n' +
    '        Const = 2,\n' +
    '        NestedNamespace = 4,\n' +
    '        Synthesized = 8,\n' +
    '        Namespace = 16,\n' +
    '        OptionalChain = 32,\n' +
    '        ExportContext = 64,\n' +
    '        ContainsThis = 128,\n' +
    '        HasImplicitReturn = 256,\n' +
    '        HasExplicitReturn = 512,\n' +
    '        GlobalAugmentation = 1024,\n' +
    '        HasAsyncFunctions = 2048,\n' +
    '        DisallowInContext = 4096,\n' +
    '        YieldContext = 8192,\n' +
    '        DecoratorContext = 16384,\n' +
    '        AwaitContext = 32768,\n' +
    '        DisallowConditionalTypesContext = 65536,\n' +
    '        ThisNodeHasError = 131072,\n' +
    '        JavaScriptFile = 262144,\n' +
    '        ThisNodeOrAnySubNodesHasError = 524288,\n' +
    '        HasAggregatedChildData = 1048576,\n' +
    '        JSDoc = 8388608,\n' +
    '        JsonFile = 67108864,\n' +
    '        BlockScoped = 3,\n' +
    '        ReachabilityCheckFlags = 768,\n' +
    '        ReachabilityAndEmitFlags = 2816,\n' +
    '        ContextFlags = 50720768,\n' +
    '        TypeExcludesFlags = 40960,\n' +
    '    }\n' +
    '    export enum ModifierFlags {\n' +
    '        None = 0,\n' +
    '        Export = 1,\n' +
    '        Ambient = 2,\n' +
    '        Public = 4,\n' +
    '        Private = 8,\n' +
    '        Protected = 16,\n' +
    '        Static = 32,\n' +
    '        Readonly = 64,\n' +
    '        Abstract = 128,\n' +
    '        Async = 256,\n' +
    '        Default = 512,\n' +
    '        Const = 2048,\n' +
    '        HasComputedJSDocModifiers = 4096,\n' +
    '        Deprecated = 8192,\n' +
    '        Override = 16384,\n' +
    '        In = 32768,\n' +
    '        Out = 65536,\n' +
    '        HasComputedFlags = 536870912,\n' +
    '        AccessibilityModifier = 28,\n' +
    '        ParameterPropertyModifier = 16476,\n' +
    '        NonPublicAccessibilityModifier = 24,\n' +
    '        TypeScriptModifier = 116958,\n' +
    '        ExportDefault = 513,\n' +
    '        All = 125951\n' +
    '    }\n' +
    '    export enum JsxFlags {\n' +
    '        None = 0,\n' +
    '        /** An element from a named property of the JSX.IntrinsicElements interface */\n' +
    '        IntrinsicNamedElement = 1,\n' +
    '        /** An element inferred from the string index signature of the JSX.IntrinsicElements interface */\n' +
    '        IntrinsicIndexedElement = 2,\n' +
    '        IntrinsicElement = 3\n' +
    '    }\n' +
    '    export interface Node extends ReadonlyTextRange {\n' +
    '        readonly kind: SyntaxKind;\n' +
    '        readonly flags: NodeFlags;\n' +
    '        readonly decorators?: NodeArray<Decorator>;\n' +
    '        readonly modifiers?: ModifiersArray;\n' +
    '        readonly parent: Node;\n' +
    '    }\n' +
    '    export interface JSDocContainer {\n' +
    '    }\n' +
    '    export type HasJSDoc = ParameterDeclaration | CallSignatureDeclaration | ClassStaticBlockDeclaration | ConstructSignatureDeclaration | MethodSignature | PropertySignature | ArrowFunction | ParenthesizedExpression | SpreadAssignment | ShorthandPropertyAssignment | PropertyAssignment | FunctionExpression | EmptyStatement | DebuggerStatement | Block | VariableStatement | ExpressionStatement | IfStatement | DoStatement | WhileStatement | ForStatement | ForInStatement | ForOfStatement | BreakStatement | ContinueStatement | ReturnStatement | WithStatement | SwitchStatement | LabeledStatement | ThrowStatement | TryStatement | FunctionDeclaration | ConstructorDeclaration | MethodDeclaration | VariableDeclaration | PropertyDeclaration | AccessorDeclaration | ClassLikeDeclaration | InterfaceDeclaration | TypeAliasDeclaration | EnumMember | EnumDeclaration | ModuleDeclaration | ImportEqualsDeclaration | ImportDeclaration | NamespaceExportDeclaration | ExportAssignment | IndexSignatureDeclaration | FunctionTypeNode | ConstructorTypeNode | JSDocFunctionType | ExportDeclaration | NamedTupleMember | ExportSpecifier | CaseClause | EndOfFileToken;\n' +
    '    export type HasType = SignatureDeclaration | VariableDeclaration | ParameterDeclaration | PropertySignature | PropertyDeclaration | TypePredicateNode | ParenthesizedTypeNode | TypeOperatorNode | MappedTypeNode | AssertionExpression | TypeAliasDeclaration | JSDocTypeExpression | JSDocNonNullableType | JSDocNullableType | JSDocOptionalType | JSDocVariadicType;\n' +
    '    export type HasTypeArguments = CallExpression | NewExpression | TaggedTemplateExpression | JsxOpeningElement | JsxSelfClosingElement;\n' +
    '    export type HasInitializer = HasExpressionInitializer | ForStatement | ForInStatement | ForOfStatement | JsxAttribute;\n' +
    '    export type HasExpressionInitializer = VariableDeclaration | ParameterDeclaration | BindingElement | PropertySignature | PropertyDeclaration | PropertyAssignment | EnumMember;\n' +
    '    export interface NodeArray<T extends Node> extends ReadonlyArray<T>, ReadonlyTextRange {\n' +
    '        readonly hasTrailingComma: boolean;\n' +
    '    }\n' +
    '    export interface Token<TKind extends SyntaxKind> extends Node {\n' +
    '        readonly kind: TKind;\n' +
    '    }\n' +
    '    export type EndOfFileToken = Token<SyntaxKind.EndOfFileToken> & JSDocContainer;\n' +
    '    export interface PunctuationToken<TKind extends PunctuationSyntaxKind> extends Token<TKind> {\n' +
    '    }\n' +
    '    export type DotToken = PunctuationToken<SyntaxKind.DotToken>;\n' +
    '    export type DotDotDotToken = PunctuationToken<SyntaxKind.DotDotDotToken>;\n' +
    '    export type QuestionToken = PunctuationToken<SyntaxKind.QuestionToken>;\n' +
    '    export type ExclamationToken = PunctuationToken<SyntaxKind.ExclamationToken>;\n' +
    '    export type ColonToken = PunctuationToken<SyntaxKind.ColonToken>;\n' +
    '    export type EqualsToken = PunctuationToken<SyntaxKind.EqualsToken>;\n' +
    '    export type AsteriskToken = PunctuationToken<SyntaxKind.AsteriskToken>;\n' +
    '    export type EqualsGreaterThanToken = PunctuationToken<SyntaxKind.EqualsGreaterThanToken>;\n' +
    '    export type PlusToken = PunctuationToken<SyntaxKind.PlusToken>;\n' +
    '    export type MinusToken = PunctuationToken<SyntaxKind.MinusToken>;\n' +
    '    export type QuestionDotToken = PunctuationToken<SyntaxKind.QuestionDotToken>;\n' +
    '    export interface KeywordToken<TKind extends KeywordSyntaxKind> extends Token<TKind> {\n' +
    '    }\n' +
    '    export type AssertsKeyword = KeywordToken<SyntaxKind.AssertsKeyword>;\n' +
    '    export type AssertKeyword = KeywordToken<SyntaxKind.AssertKeyword>;\n' +
    '    export type AwaitKeyword = KeywordToken<SyntaxKind.AwaitKeyword>;\n' +
    '    /** @deprecated Use `AwaitKeyword` instead. */\n' +
    '    export type AwaitKeywordToken = AwaitKeyword;\n' +
    '    /** @deprecated Use `AssertsKeyword` instead. */\n' +
    '    export type AssertsToken = AssertsKeyword;\n' +
    '    export interface ModifierToken<TKind extends ModifierSyntaxKind> extends KeywordToken<TKind> {\n' +
    '    }\n' +
    '    export type AbstractKeyword = ModifierToken<SyntaxKind.AbstractKeyword>;\n' +
    '    export type AsyncKeyword = ModifierToken<SyntaxKind.AsyncKeyword>;\n' +
    '    export type ConstKeyword = ModifierToken<SyntaxKind.ConstKeyword>;\n' +
    '    export type DeclareKeyword = ModifierToken<SyntaxKind.DeclareKeyword>;\n' +
    '    export type DefaultKeyword = ModifierToken<SyntaxKind.DefaultKeyword>;\n' +
    '    export type ExportKeyword = ModifierToken<SyntaxKind.ExportKeyword>;\n' +
    '    export type InKeyword = ModifierToken<SyntaxKind.InKeyword>;\n' +
    '    export type PrivateKeyword = ModifierToken<SyntaxKind.PrivateKeyword>;\n' +
    '    export type ProtectedKeyword = ModifierToken<SyntaxKind.ProtectedKeyword>;\n' +
    '    export type PublicKeyword = ModifierToken<SyntaxKind.PublicKeyword>;\n' +
    '    export type ReadonlyKeyword = ModifierToken<SyntaxKind.ReadonlyKeyword>;\n' +
    '    export type OutKeyword = ModifierToken<SyntaxKind.OutKeyword>;\n' +
    '    export type OverrideKeyword = ModifierToken<SyntaxKind.OverrideKeyword>;\n' +
    '    export type StaticKeyword = ModifierToken<SyntaxKind.StaticKeyword>;\n' +
    '    /** @deprecated Use `ReadonlyKeyword` instead. */\n' +
    '    export type ReadonlyToken = ReadonlyKeyword;\n' +
    '    export type Modifier = AbstractKeyword | AsyncKeyword | ConstKeyword | DeclareKeyword | DefaultKeyword | ExportKeyword | InKeyword | PrivateKeyword | ProtectedKeyword | PublicKeyword | OutKeyword | OverrideKeyword | ReadonlyKeyword | StaticKeyword;\n' +
    '    export type AccessibilityModifier = PublicKeyword | PrivateKeyword | ProtectedKeyword;\n' +
    '    export type ParameterPropertyModifier = AccessibilityModifier | ReadonlyKeyword;\n' +
    '    export type ClassMemberModifier = AccessibilityModifier | ReadonlyKeyword | StaticKeyword;\n' +
    '    export type ModifiersArray = NodeArray<Modifier>;\n' +
    '    export enum GeneratedIdentifierFlags {\n' +
    '        None = 0,\n' +
    '        ReservedInNestedScopes = 8,\n' +
    '        Optimistic = 16,\n' +
    '        FileLevel = 32,\n' +
    '        AllowNameSubstitution = 64\n' +
    '    }\n' +
    '    export interface Identifier extends PrimaryExpression, Declaration {\n' +
    '        readonly kind: SyntaxKind.Identifier;\n' +
    '        /**\n' +
    '         * Prefer to use `id.unescapedText`. (Note: This is available only in services, not internally to the TypeScript compiler.)\n' +
    '         * Text of identifier, but if the identifier begins with two underscores, this will begin with three.\n' +
    '         */\n' +
    '        readonly escapedText: __String;\n' +
    '        readonly originalKeywordKind?: SyntaxKind;\n' +
    '        isInJSDocNamespace?: boolean;\n' +
    '    }\n' +
    '    export interface TransientIdentifier extends Identifier {\n' +
    '        resolvedSymbol: Symbol;\n' +
    '    }\n' +
    '    export interface QualifiedName extends Node {\n' +
    '        readonly kind: SyntaxKind.QualifiedName;\n' +
    '        readonly left: EntityName;\n' +
    '        readonly right: Identifier;\n' +
    '    }\n' +
    '    export type EntityName = Identifier | QualifiedName;\n' +
    '    export type PropertyName = Identifier | StringLiteral | NumericLiteral | ComputedPropertyName | PrivateIdentifier;\n' +
    '    export type MemberName = Identifier | PrivateIdentifier;\n' +
    '    export type DeclarationName = Identifier | PrivateIdentifier | StringLiteralLike | NumericLiteral | ComputedPropertyName | ElementAccessExpression | BindingPattern | EntityNameExpression;\n' +
    '    export interface Declaration extends Node {\n' +
    '        _declarationBrand: any;\n' +
    '    }\n' +
    '    export interface NamedDeclaration extends Declaration {\n' +
    '        readonly name?: DeclarationName;\n' +
    '    }\n' +
    '    export interface DeclarationStatement extends NamedDeclaration, Statement {\n' +
    '        readonly name?: Identifier | StringLiteral | NumericLiteral;\n' +
    '    }\n' +
    '    export interface ComputedPropertyName extends Node {\n' +
    '        readonly kind: SyntaxKind.ComputedPropertyName;\n' +
    '        readonly parent: Declaration;\n' +
    '        readonly expression: Expression;\n' +
    '    }\n' +
    '    export interface PrivateIdentifier extends PrimaryExpression {\n' +
    '        readonly kind: SyntaxKind.PrivateIdentifier;\n' +
    '        readonly escapedText: __String;\n' +
    '    }\n' +
    '    export interface Decorator extends Node {\n' +
    '        readonly kind: SyntaxKind.Decorator;\n' +
    '        readonly parent: NamedDeclaration;\n' +
    '        readonly expression: LeftHandSideExpression;\n' +
    '    }\n' +
    '    export interface TypeParameterDeclaration extends NamedDeclaration {\n' +
    '        readonly kind: SyntaxKind.TypeParameter;\n' +
    '        readonly parent: DeclarationWithTypeParameterChildren | InferTypeNode;\n' +
    '        readonly name: Identifier;\n' +
    '        /** Note: Consider calling `getEffectiveConstraintOfTypeParameter` */\n' +
    '        readonly constraint?: TypeNode;\n' +
    '        readonly default?: TypeNode;\n' +
    '        expression?: Expression;\n' +
    '    }\n' +
    '    export interface SignatureDeclarationBase extends NamedDeclaration, JSDocContainer {\n' +
    '        readonly kind: SignatureDeclaration["kind"];\n' +
    '        readonly name?: PropertyName;\n' +
    '        readonly typeParameters?: NodeArray<TypeParameterDeclaration>;\n' +
    '        readonly parameters: NodeArray<ParameterDeclaration>;\n' +
    '        readonly type?: TypeNode;\n' +
    '    }\n' +
    '    export type SignatureDeclaration = CallSignatureDeclaration | ConstructSignatureDeclaration | MethodSignature | IndexSignatureDeclaration | FunctionTypeNode | ConstructorTypeNode | JSDocFunctionType | FunctionDeclaration | MethodDeclaration | ConstructorDeclaration | AccessorDeclaration | FunctionExpression | ArrowFunction;\n' +
    '    export interface CallSignatureDeclaration extends SignatureDeclarationBase, TypeElement {\n' +
    '        readonly kind: SyntaxKind.CallSignature;\n' +
    '    }\n' +
    '    export interface ConstructSignatureDeclaration extends SignatureDeclarationBase, TypeElement {\n' +
    '        readonly kind: SyntaxKind.ConstructSignature;\n' +
    '    }\n' +
    '    export type BindingName = Identifier | BindingPattern;\n' +
    '    export interface VariableDeclaration extends NamedDeclaration, JSDocContainer {\n' +
    '        readonly kind: SyntaxKind.VariableDeclaration;\n' +
    '        readonly parent: VariableDeclarationList | CatchClause;\n' +
    '        readonly name: BindingName;\n' +
    '        readonly exclamationToken?: ExclamationToken;\n' +
    '        readonly type?: TypeNode;\n' +
    '        readonly initializer?: Expression;\n' +
    '    }\n' +
    '    export interface VariableDeclarationList extends Node {\n' +
    '        readonly kind: SyntaxKind.VariableDeclarationList;\n' +
    '        readonly parent: VariableStatement | ForStatement | ForOfStatement | ForInStatement;\n' +
    '        readonly declarations: NodeArray<VariableDeclaration>;\n' +
    '    }\n' +
    '    export interface ParameterDeclaration extends NamedDeclaration, JSDocContainer {\n' +
    '        readonly kind: SyntaxKind.Parameter;\n' +
    '        readonly parent: SignatureDeclaration;\n' +
    '        readonly dotDotDotToken?: DotDotDotToken;\n' +
    '        readonly name: BindingName;\n' +
    '        readonly questionToken?: QuestionToken;\n' +
    '        readonly type?: TypeNode;\n' +
    '        readonly initializer?: Expression;\n' +
    '    }\n' +
    '    export interface BindingElement extends NamedDeclaration {\n' +
    '        readonly kind: SyntaxKind.BindingElement;\n' +
    '        readonly parent: BindingPattern;\n' +
    '        readonly propertyName?: PropertyName;\n' +
    '        readonly dotDotDotToken?: DotDotDotToken;\n' +
    '        readonly name: BindingName;\n' +
    '        readonly initializer?: Expression;\n' +
    '    }\n' +
    '    export interface PropertySignature extends TypeElement, JSDocContainer {\n' +
    '        readonly kind: SyntaxKind.PropertySignature;\n' +
    '        readonly name: PropertyName;\n' +
    '        readonly questionToken?: QuestionToken;\n' +
    '        readonly type?: TypeNode;\n' +
    '        initializer?: Expression;\n' +
    '    }\n' +
    '    export interface PropertyDeclaration extends ClassElement, JSDocContainer {\n' +
    '        readonly kind: SyntaxKind.PropertyDeclaration;\n' +
    '        readonly parent: ClassLikeDeclaration;\n' +
    '        readonly name: PropertyName;\n' +
    '        readonly questionToken?: QuestionToken;\n' +
    '        readonly exclamationToken?: ExclamationToken;\n' +
    '        readonly type?: TypeNode;\n' +
    '        readonly initializer?: Expression;\n' +
    '    }\n' +
    '    export interface ObjectLiteralElement extends NamedDeclaration {\n' +
    '        _objectLiteralBrand: any;\n' +
    '        readonly name?: PropertyName;\n' +
    '    }\n' +
    '    /** Unlike ObjectLiteralElement, excludes JSXAttribute and JSXSpreadAttribute. */\n' +
    '    export type ObjectLiteralElementLike = PropertyAssignment | ShorthandPropertyAssignment | SpreadAssignment | MethodDeclaration | AccessorDeclaration;\n' +
    '    export interface PropertyAssignment extends ObjectLiteralElement, JSDocContainer {\n' +
    '        readonly kind: SyntaxKind.PropertyAssignment;\n' +
    '        readonly parent: ObjectLiteralExpression;\n' +
    '        readonly name: PropertyName;\n' +
    '        readonly questionToken?: QuestionToken;\n' +
    '        readonly exclamationToken?: ExclamationToken;\n' +
    '        readonly initializer: Expression;\n' +
    '    }\n' +
    '    export interface ShorthandPropertyAssignment extends ObjectLiteralElement, JSDocContainer {\n' +
    '        readonly kind: SyntaxKind.ShorthandPropertyAssignment;\n' +
    '        readonly parent: ObjectLiteralExpression;\n' +
    '        readonly name: Identifier;\n' +
    '        readonly questionToken?: QuestionToken;\n' +
    '        readonly exclamationToken?: ExclamationToken;\n' +
    '        readonly equalsToken?: EqualsToken;\n' +
    '        readonly objectAssignmentInitializer?: Expression;\n' +
    '    }\n' +
    '    export interface SpreadAssignment extends ObjectLiteralElement, JSDocContainer {\n' +
    '        readonly kind: SyntaxKind.SpreadAssignment;\n' +
    '        readonly parent: ObjectLiteralExpression;\n' +
    '        readonly expression: Expression;\n' +
    '    }\n' +
    '    export type VariableLikeDeclaration = VariableDeclaration | ParameterDeclaration | BindingElement | PropertyDeclaration | PropertyAssignment | PropertySignature | JsxAttribute | ShorthandPropertyAssignment | EnumMember | JSDocPropertyTag | JSDocParameterTag;\n' +
    '    export interface PropertyLikeDeclaration extends NamedDeclaration {\n' +
    '        readonly name: PropertyName;\n' +
    '    }\n' +
    '    export interface ObjectBindingPattern extends Node {\n' +
    '        readonly kind: SyntaxKind.ObjectBindingPattern;\n' +
    '        readonly parent: VariableDeclaration | ParameterDeclaration | BindingElement;\n' +
    '        readonly elements: NodeArray<BindingElement>;\n' +
    '    }\n' +
    '    export interface ArrayBindingPattern extends Node {\n' +
    '        readonly kind: SyntaxKind.ArrayBindingPattern;\n' +
    '        readonly parent: VariableDeclaration | ParameterDeclaration | BindingElement;\n' +
    '        readonly elements: NodeArray<ArrayBindingElement>;\n' +
    '    }\n' +
    '    export type BindingPattern = ObjectBindingPattern | ArrayBindingPattern;\n' +
    '    export type ArrayBindingElement = BindingElement | OmittedExpression;\n' +
    '    /**\n' +
    '     * Several node kinds share function-like features such as a signature,\n' +
    '     * a name, and a body. These nodes should extend FunctionLikeDeclarationBase.\n' +
    '     * Examples:\n' +
    '     * - FunctionDeclaration\n' +
    '     * - MethodDeclaration\n' +
    '     * - AccessorDeclaration\n' +
    '     */\n' +
    '    export interface FunctionLikeDeclarationBase extends SignatureDeclarationBase {\n' +
    '        _functionLikeDeclarationBrand: any;\n' +
    '        readonly asteriskToken?: AsteriskToken;\n' +
    '        readonly questionToken?: QuestionToken;\n' +
    '        readonly exclamationToken?: ExclamationToken;\n' +
    '        readonly body?: Block | Expression;\n' +
    '    }\n' +
    '    export type FunctionLikeDeclaration = FunctionDeclaration | MethodDeclaration | GetAccessorDeclaration | SetAccessorDeclaration | ConstructorDeclaration | FunctionExpression | ArrowFunction;\n' +
    '    /** @deprecated Use SignatureDeclaration */\n' +
    '    export type FunctionLike = SignatureDeclaration;\n' +
    '    export interface FunctionDeclaration extends FunctionLikeDeclarationBase, DeclarationStatement {\n' +
    '        readonly kind: SyntaxKind.FunctionDeclaration;\n' +
    '        readonly name?: Identifier;\n' +
    '        readonly body?: FunctionBody;\n' +
    '    }\n' +
    '    export interface MethodSignature extends SignatureDeclarationBase, TypeElement {\n' +
    '        readonly kind: SyntaxKind.MethodSignature;\n' +
    '        readonly parent: ObjectTypeDeclaration;\n' +
    '        readonly name: PropertyName;\n' +
    '    }\n' +
    '    export interface MethodDeclaration extends FunctionLikeDeclarationBase, ClassElement, ObjectLiteralElement, JSDocContainer {\n' +
    '        readonly kind: SyntaxKind.MethodDeclaration;\n' +
    '        readonly parent: ClassLikeDeclaration | ObjectLiteralExpression;\n' +
    '        readonly name: PropertyName;\n' +
    '        readonly body?: FunctionBody;\n' +
    '    }\n' +
    '    export interface ConstructorDeclaration extends FunctionLikeDeclarationBase, ClassElement, JSDocContainer {\n' +
    '        readonly kind: SyntaxKind.Constructor;\n' +
    '        readonly parent: ClassLikeDeclaration;\n' +
    '        readonly body?: FunctionBody;\n' +
    '    }\n' +
    '    /** For when we encounter a semicolon in a class declaration. ES6 allows these as class elements. */\n' +
    '    export interface SemicolonClassElement extends ClassElement {\n' +
    '        readonly kind: SyntaxKind.SemicolonClassElement;\n' +
    '        readonly parent: ClassLikeDeclaration;\n' +
    '    }\n' +
    '    export interface GetAccessorDeclaration extends FunctionLikeDeclarationBase, ClassElement, TypeElement, ObjectLiteralElement, JSDocContainer {\n' +
    '        readonly kind: SyntaxKind.GetAccessor;\n' +
    '        readonly parent: ClassLikeDeclaration | ObjectLiteralExpression | TypeLiteralNode | InterfaceDeclaration;\n' +
    '        readonly name: PropertyName;\n' +
    '        readonly body?: FunctionBody;\n' +
    '    }\n' +
    '    export interface SetAccessorDeclaration extends FunctionLikeDeclarationBase, ClassElement, TypeElement, ObjectLiteralElement, JSDocContainer {\n' +
    '        readonly kind: SyntaxKind.SetAccessor;\n' +
    '        readonly parent: ClassLikeDeclaration | ObjectLiteralExpression | TypeLiteralNode | InterfaceDeclaration;\n' +
    '        readonly name: PropertyName;\n' +
    '        readonly body?: FunctionBody;\n' +
    '    }\n' +
    '    export type AccessorDeclaration = GetAccessorDeclaration | SetAccessorDeclaration;\n' +
    '    export interface IndexSignatureDeclaration extends SignatureDeclarationBase, ClassElement, TypeElement {\n' +
    '        readonly kind: SyntaxKind.IndexSignature;\n' +
    '        readonly parent: ObjectTypeDeclaration;\n' +
    '        readonly type: TypeNode;\n' +
    '    }\n' +
    '    export interface ClassStaticBlockDeclaration extends ClassElement, JSDocContainer {\n' +
    '        readonly kind: SyntaxKind.ClassStaticBlockDeclaration;\n' +
    '        readonly parent: ClassDeclaration | ClassExpression;\n' +
    '        readonly body: Block;\n' +
    '    }\n' +
    '    export interface TypeNode extends Node {\n' +
    '        _typeNodeBrand: any;\n' +
    '    }\n' +
    '    export interface KeywordTypeNode<TKind extends KeywordTypeSyntaxKind = KeywordTypeSyntaxKind> extends KeywordToken<TKind>, TypeNode {\n' +
    '        readonly kind: TKind;\n' +
    '    }\n' +
    '    export interface ImportTypeAssertionContainer extends Node {\n' +
    '        readonly kind: SyntaxKind.ImportTypeAssertionContainer;\n' +
    '        readonly parent: ImportTypeNode;\n' +
    '        readonly assertClause: AssertClause;\n' +
    '        readonly multiLine?: boolean;\n' +
    '    }\n' +
    '    export interface ImportTypeNode extends NodeWithTypeArguments {\n' +
    '        readonly kind: SyntaxKind.ImportType;\n' +
    '        readonly isTypeOf: boolean;\n' +
    '        readonly argument: TypeNode;\n' +
    '        readonly assertions?: ImportTypeAssertionContainer;\n' +
    '        readonly qualifier?: EntityName;\n' +
    '    }\n' +
    '    export interface ThisTypeNode extends TypeNode {\n' +
    '        readonly kind: SyntaxKind.ThisType;\n' +
    '    }\n' +
    '    export type FunctionOrConstructorTypeNode = FunctionTypeNode | ConstructorTypeNode;\n' +
    '    export interface FunctionOrConstructorTypeNodeBase extends TypeNode, SignatureDeclarationBase {\n' +
    '        readonly kind: SyntaxKind.FunctionType | SyntaxKind.ConstructorType;\n' +
    '        readonly type: TypeNode;\n' +
    '    }\n' +
    '    export interface FunctionTypeNode extends FunctionOrConstructorTypeNodeBase {\n' +
    '        readonly kind: SyntaxKind.FunctionType;\n' +
    '    }\n' +
    '    export interface ConstructorTypeNode extends FunctionOrConstructorTypeNodeBase {\n' +
    '        readonly kind: SyntaxKind.ConstructorType;\n' +
    '    }\n' +
    '    export interface NodeWithTypeArguments extends TypeNode {\n' +
    '        readonly typeArguments?: NodeArray<TypeNode>;\n' +
    '    }\n' +
    '    export type TypeReferenceType = TypeReferenceNode | ExpressionWithTypeArguments;\n' +
    '    export interface TypeReferenceNode extends NodeWithTypeArguments {\n' +
    '        readonly kind: SyntaxKind.TypeReference;\n' +
    '        readonly typeName: EntityName;\n' +
    '    }\n' +
    '    export interface TypePredicateNode extends TypeNode {\n' +
    '        readonly kind: SyntaxKind.TypePredicate;\n' +
    '        readonly parent: SignatureDeclaration | JSDocTypeExpression;\n' +
    '        readonly assertsModifier?: AssertsKeyword;\n' +
    '        readonly parameterName: Identifier | ThisTypeNode;\n' +
    '        readonly type?: TypeNode;\n' +
    '    }\n' +
    '    export interface TypeQueryNode extends NodeWithTypeArguments {\n' +
    '        readonly kind: SyntaxKind.TypeQuery;\n' +
    '        readonly exprName: EntityName;\n' +
    '    }\n' +
    '    export interface TypeLiteralNode extends TypeNode, Declaration {\n' +
    '        readonly kind: SyntaxKind.TypeLiteral;\n' +
    '        readonly members: NodeArray<TypeElement>;\n' +
    '    }\n' +
    '    export interface ArrayTypeNode extends TypeNode {\n' +
    '        readonly kind: SyntaxKind.ArrayType;\n' +
    '        readonly elementType: TypeNode;\n' +
    '    }\n' +
    '    export interface TupleTypeNode extends TypeNode {\n' +
    '        readonly kind: SyntaxKind.TupleType;\n' +
    '        readonly elements: NodeArray<TypeNode | NamedTupleMember>;\n' +
    '    }\n' +
    '    export interface NamedTupleMember extends TypeNode, JSDocContainer, Declaration {\n' +
    '        readonly kind: SyntaxKind.NamedTupleMember;\n' +
    '        readonly dotDotDotToken?: Token<SyntaxKind.DotDotDotToken>;\n' +
    '        readonly name: Identifier;\n' +
    '        readonly questionToken?: Token<SyntaxKind.QuestionToken>;\n' +
    '        readonly type: TypeNode;\n' +
    '    }\n' +
    '    export interface OptionalTypeNode extends TypeNode {\n' +
    '        readonly kind: SyntaxKind.OptionalType;\n' +
    '        readonly type: TypeNode;\n' +
    '    }\n' +
    '    export interface RestTypeNode extends TypeNode {\n' +
    '        readonly kind: SyntaxKind.RestType;\n' +
    '        readonly type: TypeNode;\n' +
    '    }\n' +
    '    export type UnionOrIntersectionTypeNode = UnionTypeNode | IntersectionTypeNode;\n' +
    '    export interface UnionTypeNode extends TypeNode {\n' +
    '        readonly kind: SyntaxKind.UnionType;\n' +
    '        readonly types: NodeArray<TypeNode>;\n' +
    '    }\n' +
    '    export interface IntersectionTypeNode extends TypeNode {\n' +
    '        readonly kind: SyntaxKind.IntersectionType;\n' +
    '        readonly types: NodeArray<TypeNode>;\n' +
    '    }\n' +
    '    export interface ConditionalTypeNode extends TypeNode {\n' +
    '        readonly kind: SyntaxKind.ConditionalType;\n' +
    '        readonly checkType: TypeNode;\n' +
    '        readonly extendsType: TypeNode;\n' +
    '        readonly trueType: TypeNode;\n' +
    '        readonly falseType: TypeNode;\n' +
    '    }\n' +
    '    export interface InferTypeNode extends TypeNode {\n' +
    '        readonly kind: SyntaxKind.InferType;\n' +
    '        readonly typeParameter: TypeParameterDeclaration;\n' +
    '    }\n' +
    '    export interface ParenthesizedTypeNode extends TypeNode {\n' +
    '        readonly kind: SyntaxKind.ParenthesizedType;\n' +
    '        readonly type: TypeNode;\n' +
    '    }\n' +
    '    export interface TypeOperatorNode extends TypeNode {\n' +
    '        readonly kind: SyntaxKind.TypeOperator;\n' +
    '        readonly operator: SyntaxKind.KeyOfKeyword | SyntaxKind.UniqueKeyword | SyntaxKind.ReadonlyKeyword;\n' +
    '        readonly type: TypeNode;\n' +
    '    }\n' +
    '    export interface IndexedAccessTypeNode extends TypeNode {\n' +
    '        readonly kind: SyntaxKind.IndexedAccessType;\n' +
    '        readonly objectType: TypeNode;\n' +
    '        readonly indexType: TypeNode;\n' +
    '    }\n' +
    '    export interface MappedTypeNode extends TypeNode, Declaration {\n' +
    '        readonly kind: SyntaxKind.MappedType;\n' +
    '        readonly readonlyToken?: ReadonlyKeyword | PlusToken | MinusToken;\n' +
    '        readonly typeParameter: TypeParameterDeclaration;\n' +
    '        readonly nameType?: TypeNode;\n' +
    '        readonly questionToken?: QuestionToken | PlusToken | MinusToken;\n' +
    '        readonly type?: TypeNode;\n' +
    '        /** Used only to produce grammar errors */\n' +
    '        readonly members?: NodeArray<TypeElement>;\n' +
    '    }\n' +
    '    export interface LiteralTypeNode extends TypeNode {\n' +
    '        readonly kind: SyntaxKind.LiteralType;\n' +
    '        readonly literal: NullLiteral | BooleanLiteral | LiteralExpression | PrefixUnaryExpression;\n' +
    '    }\n' +
    '    export interface StringLiteral extends LiteralExpression, Declaration {\n' +
    '        readonly kind: SyntaxKind.StringLiteral;\n' +
    '    }\n' +
    '    export type StringLiteralLike = StringLiteral | NoSubstitutionTemplateLiteral;\n' +
    '    export type PropertyNameLiteral = Identifier | StringLiteralLike | NumericLiteral;\n' +
    '    export interface TemplateLiteralTypeNode extends TypeNode {\n' +
    '        kind: SyntaxKind.TemplateLiteralType;\n' +
    '        readonly head: TemplateHead;\n' +
    '        readonly templateSpans: NodeArray<TemplateLiteralTypeSpan>;\n' +
    '    }\n' +
    '    export interface TemplateLiteralTypeSpan extends TypeNode {\n' +
    '        readonly kind: SyntaxKind.TemplateLiteralTypeSpan;\n' +
    '        readonly parent: TemplateLiteralTypeNode;\n' +
    '        readonly type: TypeNode;\n' +
    '        readonly literal: TemplateMiddle | TemplateTail;\n' +
    '    }\n' +
    '    export interface Expression extends Node {\n' +
    '        _expressionBrand: any;\n' +
    '    }\n' +
    '    export interface OmittedExpression extends Expression {\n' +
    '        readonly kind: SyntaxKind.OmittedExpression;\n' +
    '    }\n' +
    '    export interface PartiallyEmittedExpression extends LeftHandSideExpression {\n' +
    '        readonly kind: SyntaxKind.PartiallyEmittedExpression;\n' +
    '        readonly expression: Expression;\n' +
    '    }\n' +
    '    export interface UnaryExpression extends Expression {\n' +
    '        _unaryExpressionBrand: any;\n' +
    '    }\n' +
    '    /** Deprecated, please use UpdateExpression */\n' +
    '    export type IncrementExpression = UpdateExpression;\n' +
    '    export interface UpdateExpression extends UnaryExpression {\n' +
    '        _updateExpressionBrand: any;\n' +
    '    }\n' +
    '    export type PrefixUnaryOperator = SyntaxKind.PlusPlusToken | SyntaxKind.MinusMinusToken | SyntaxKind.PlusToken | SyntaxKind.MinusToken | SyntaxKind.TildeToken | SyntaxKind.ExclamationToken;\n' +
    '    export interface PrefixUnaryExpression extends UpdateExpression {\n' +
    '        readonly kind: SyntaxKind.PrefixUnaryExpression;\n' +
    '        readonly operator: PrefixUnaryOperator;\n' +
    '        readonly operand: UnaryExpression;\n' +
    '    }\n' +
    '    export type PostfixUnaryOperator = SyntaxKind.PlusPlusToken | SyntaxKind.MinusMinusToken;\n' +
    '    export interface PostfixUnaryExpression extends UpdateExpression {\n' +
    '        readonly kind: SyntaxKind.PostfixUnaryExpression;\n' +
    '        readonly operand: LeftHandSideExpression;\n' +
    '        readonly operator: PostfixUnaryOperator;\n' +
    '    }\n' +
    '    export interface LeftHandSideExpression extends UpdateExpression {\n' +
    '        _leftHandSideExpressionBrand: any;\n' +
    '    }\n' +
    '    export interface MemberExpression extends LeftHandSideExpression {\n' +
    '        _memberExpressionBrand: any;\n' +
    '    }\n' +
    '    export interface PrimaryExpression extends MemberExpression {\n' +
    '        _primaryExpressionBrand: any;\n' +
    '    }\n' +
    '    export interface NullLiteral extends PrimaryExpression {\n' +
    '        readonly kind: SyntaxKind.NullKeyword;\n' +
    '    }\n' +
    '    export interface TrueLiteral extends PrimaryExpression {\n' +
    '        readonly kind: SyntaxKind.TrueKeyword;\n' +
    '    }\n' +
    '    export interface FalseLiteral extends PrimaryExpression {\n' +
    '        readonly kind: SyntaxKind.FalseKeyword;\n' +
    '    }\n' +
    '    export type BooleanLiteral = TrueLiteral | FalseLiteral;\n' +
    '    export interface ThisExpression extends PrimaryExpression {\n' +
    '        readonly kind: SyntaxKind.ThisKeyword;\n' +
    '    }\n' +
    '    export interface SuperExpression extends PrimaryExpression {\n' +
    '        readonly kind: SyntaxKind.SuperKeyword;\n' +
    '    }\n' +
    '    export interface ImportExpression extends PrimaryExpression {\n' +
    '        readonly kind: SyntaxKind.ImportKeyword;\n' +
    '    }\n' +
    '    export interface DeleteExpression extends UnaryExpression {\n' +
    '        readonly kind: SyntaxKind.DeleteExpression;\n' +
    '        readonly expression: UnaryExpression;\n' +
    '    }\n' +
    '    export interface TypeOfExpression extends UnaryExpression {\n' +
    '        readonly kind: SyntaxKind.TypeOfExpression;\n' +
    '        readonly expression: UnaryExpression;\n' +
    '    }\n' +
    '    export interface VoidExpression extends UnaryExpression {\n' +
    '        readonly kind: SyntaxKind.VoidExpression;\n' +
    '        readonly expression: UnaryExpression;\n' +
    '    }\n' +
    '    export interface AwaitExpression extends UnaryExpression {\n' +
    '        readonly kind: SyntaxKind.AwaitExpression;\n' +
    '        readonly expression: UnaryExpression;\n' +
    '    }\n' +
    '    export interface YieldExpression extends Expression {\n' +
    '        readonly kind: SyntaxKind.YieldExpression;\n' +
    '        readonly asteriskToken?: AsteriskToken;\n' +
    '        readonly expression?: Expression;\n' +
    '    }\n' +
    '    export interface SyntheticExpression extends Expression {\n' +
    '        readonly kind: SyntaxKind.SyntheticExpression;\n' +
    '        readonly isSpread: boolean;\n' +
    '        readonly type: Type;\n' +
    '        readonly tupleNameSource?: ParameterDeclaration | NamedTupleMember;\n' +
    '    }\n' +
    '    export type ExponentiationOperator = SyntaxKind.AsteriskAsteriskToken;\n' +
    '    export type MultiplicativeOperator = SyntaxKind.AsteriskToken | SyntaxKind.SlashToken | SyntaxKind.PercentToken;\n' +
    '    export type MultiplicativeOperatorOrHigher = ExponentiationOperator | MultiplicativeOperator;\n' +
    '    export type AdditiveOperator = SyntaxKind.PlusToken | SyntaxKind.MinusToken;\n' +
    '    export type AdditiveOperatorOrHigher = MultiplicativeOperatorOrHigher | AdditiveOperator;\n' +
    '    export type ShiftOperator = SyntaxKind.LessThanLessThanToken | SyntaxKind.GreaterThanGreaterThanToken | SyntaxKind.GreaterThanGreaterThanGreaterThanToken;\n' +
    '    export type ShiftOperatorOrHigher = AdditiveOperatorOrHigher | ShiftOperator;\n' +
    '    export type RelationalOperator = SyntaxKind.LessThanToken | SyntaxKind.LessThanEqualsToken | SyntaxKind.GreaterThanToken | SyntaxKind.GreaterThanEqualsToken | SyntaxKind.InstanceOfKeyword | SyntaxKind.InKeyword;\n' +
    '    export type RelationalOperatorOrHigher = ShiftOperatorOrHigher | RelationalOperator;\n' +
    '    export type EqualityOperator = SyntaxKind.EqualsEqualsToken | SyntaxKind.EqualsEqualsEqualsToken | SyntaxKind.ExclamationEqualsEqualsToken | SyntaxKind.ExclamationEqualsToken;\n' +
    '    export type EqualityOperatorOrHigher = RelationalOperatorOrHigher | EqualityOperator;\n' +
    '    export type BitwiseOperator = SyntaxKind.AmpersandToken | SyntaxKind.BarToken | SyntaxKind.CaretToken;\n' +
    '    export type BitwiseOperatorOrHigher = EqualityOperatorOrHigher | BitwiseOperator;\n' +
    '    export type LogicalOperator = SyntaxKind.AmpersandAmpersandToken | SyntaxKind.BarBarToken;\n' +
    '    export type LogicalOperatorOrHigher = BitwiseOperatorOrHigher | LogicalOperator;\n' +
    '    export type CompoundAssignmentOperator = SyntaxKind.PlusEqualsToken | SyntaxKind.MinusEqualsToken | SyntaxKind.AsteriskAsteriskEqualsToken | SyntaxKind.AsteriskEqualsToken | SyntaxKind.SlashEqualsToken | SyntaxKind.PercentEqualsToken | SyntaxKind.AmpersandEqualsToken | SyntaxKind.BarEqualsToken | SyntaxKind.CaretEqualsToken | SyntaxKind.LessThanLessThanEqualsToken | SyntaxKind.GreaterThanGreaterThanGreaterThanEqualsToken | SyntaxKind.GreaterThanGreaterThanEqualsToken | SyntaxKind.BarBarEqualsToken | SyntaxKind.AmpersandAmpersandEqualsToken | SyntaxKind.QuestionQuestionEqualsToken;\n' +
    '    export type AssignmentOperator = SyntaxKind.EqualsToken | CompoundAssignmentOperator;\n' +
    '    export type AssignmentOperatorOrHigher = SyntaxKind.QuestionQuestionToken | LogicalOperatorOrHigher | AssignmentOperator;\n' +
    '    export type BinaryOperator = AssignmentOperatorOrHigher | SyntaxKind.CommaToken;\n' +
    '    export type LogicalOrCoalescingAssignmentOperator = SyntaxKind.AmpersandAmpersandEqualsToken | SyntaxKind.BarBarEqualsToken | SyntaxKind.QuestionQuestionEqualsToken;\n' +
    '    export type BinaryOperatorToken = Token<BinaryOperator>;\n' +
    '    export interface BinaryExpression extends Expression, Declaration {\n' +
    '        readonly kind: SyntaxKind.BinaryExpression;\n' +
    '        readonly left: Expression;\n' +
    '        readonly operatorToken: BinaryOperatorToken;\n' +
    '        readonly right: Expression;\n' +
    '    }\n' +
    '    export type AssignmentOperatorToken = Token<AssignmentOperator>;\n' +
    '    export interface AssignmentExpression<TOperator extends AssignmentOperatorToken> extends BinaryExpression {\n' +
    '        readonly left: LeftHandSideExpression;\n' +
    '        readonly operatorToken: TOperator;\n' +
    '    }\n' +
    '    export interface ObjectDestructuringAssignment extends AssignmentExpression<EqualsToken> {\n' +
    '        readonly left: ObjectLiteralExpression;\n' +
    '    }\n' +
    '    export interface ArrayDestructuringAssignment extends AssignmentExpression<EqualsToken> {\n' +
    '        readonly left: ArrayLiteralExpression;\n' +
    '    }\n' +
    '    export type DestructuringAssignment = ObjectDestructuringAssignment | ArrayDestructuringAssignment;\n' +
    '    export type BindingOrAssignmentElement = VariableDeclaration | ParameterDeclaration | ObjectBindingOrAssignmentElement | ArrayBindingOrAssignmentElement;\n' +
    '    export type ObjectBindingOrAssignmentElement = BindingElement | PropertyAssignment | ShorthandPropertyAssignment | SpreadAssignment;\n' +
    '    export type ArrayBindingOrAssignmentElement = BindingElement | OmittedExpression | SpreadElement | ArrayLiteralExpression | ObjectLiteralExpression | AssignmentExpression<EqualsToken> | Identifier | PropertyAccessExpression | ElementAccessExpression;\n' +
    '    export type BindingOrAssignmentElementRestIndicator = DotDotDotToken | SpreadElement | SpreadAssignment;\n' +
    '    export type BindingOrAssignmentElementTarget = BindingOrAssignmentPattern | Identifier | PropertyAccessExpression | ElementAccessExpression | OmittedExpression;\n' +
    '    export type ObjectBindingOrAssignmentPattern = ObjectBindingPattern | ObjectLiteralExpression;\n' +
    '    export type ArrayBindingOrAssignmentPattern = ArrayBindingPattern | ArrayLiteralExpression;\n' +
    '    export type AssignmentPattern = ObjectLiteralExpression | ArrayLiteralExpression;\n' +
    '    export type BindingOrAssignmentPattern = ObjectBindingOrAssignmentPattern | ArrayBindingOrAssignmentPattern;\n' +
    '    export interface ConditionalExpression extends Expression {\n' +
    '        readonly kind: SyntaxKind.ConditionalExpression;\n' +
    '        readonly condition: Expression;\n' +
    '        readonly questionToken: QuestionToken;\n' +
    '        readonly whenTrue: Expression;\n' +
    '        readonly colonToken: ColonToken;\n' +
    '        readonly whenFalse: Expression;\n' +
    '    }\n' +
    '    export type FunctionBody = Block;\n' +
    '    export type ConciseBody = FunctionBody | Expression;\n' +
    '    export interface FunctionExpression extends PrimaryExpression, FunctionLikeDeclarationBase, JSDocContainer {\n' +
    '        readonly kind: SyntaxKind.FunctionExpression;\n' +
    '        readonly name?: Identifier;\n' +
    '        readonly body: FunctionBody;\n' +
    '    }\n' +
    '    export interface ArrowFunction extends Expression, FunctionLikeDeclarationBase, JSDocContainer {\n' +
    '        readonly kind: SyntaxKind.ArrowFunction;\n' +
    '        readonly equalsGreaterThanToken: EqualsGreaterThanToken;\n' +
    '        readonly body: ConciseBody;\n' +
    '        readonly name: never;\n' +
    '    }\n' +
    '    export interface LiteralLikeNode extends Node {\n' +
    '        text: string;\n' +
    '        isUnterminated?: boolean;\n' +
    '        hasExtendedUnicodeEscape?: boolean;\n' +
    '    }\n' +
    '    export interface TemplateLiteralLikeNode extends LiteralLikeNode {\n' +
    '        rawText?: string;\n' +
    '    }\n' +
    '    export interface LiteralExpression extends LiteralLikeNode, PrimaryExpression {\n' +
    '        _literalExpressionBrand: any;\n' +
    '    }\n' +
    '    export interface RegularExpressionLiteral extends LiteralExpression {\n' +
    '        readonly kind: SyntaxKind.RegularExpressionLiteral;\n' +
    '    }\n' +
    '    export interface NoSubstitutionTemplateLiteral extends LiteralExpression, TemplateLiteralLikeNode, Declaration {\n' +
    '        readonly kind: SyntaxKind.NoSubstitutionTemplateLiteral;\n' +
    '    }\n' +
    '    export enum TokenFlags {\n' +
    '        None = 0,\n' +
    '        Scientific = 16,\n' +
    '        Octal = 32,\n' +
    '        HexSpecifier = 64,\n' +
    '        BinarySpecifier = 128,\n' +
    '        OctalSpecifier = 256,\n' +
    '    }\n' +
    '    export interface NumericLiteral extends LiteralExpression, Declaration {\n' +
    '        readonly kind: SyntaxKind.NumericLiteral;\n' +
    '    }\n' +
    '    export interface BigIntLiteral extends LiteralExpression {\n' +
    '        readonly kind: SyntaxKind.BigIntLiteral;\n' +
    '    }\n' +
    '    export type LiteralToken = NumericLiteral | BigIntLiteral | StringLiteral | JsxText | RegularExpressionLiteral | NoSubstitutionTemplateLiteral;\n' +
    '    export interface TemplateHead extends TemplateLiteralLikeNode {\n' +
    '        readonly kind: SyntaxKind.TemplateHead;\n' +
    '        readonly parent: TemplateExpression | TemplateLiteralTypeNode;\n' +
    '    }\n' +
    '    export interface TemplateMiddle extends TemplateLiteralLikeNode {\n' +
    '        readonly kind: SyntaxKind.TemplateMiddle;\n' +
    '        readonly parent: TemplateSpan | TemplateLiteralTypeSpan;\n' +
    '    }\n' +
    '    export interface TemplateTail extends TemplateLiteralLikeNode {\n' +
    '        readonly kind: SyntaxKind.TemplateTail;\n' +
    '        readonly parent: TemplateSpan | TemplateLiteralTypeSpan;\n' +
    '    }\n' +
    '    export type PseudoLiteralToken = TemplateHead | TemplateMiddle | TemplateTail;\n' +
    '    export type TemplateLiteralToken = NoSubstitutionTemplateLiteral | PseudoLiteralToken;\n' +
    '    export interface TemplateExpression extends PrimaryExpression {\n' +
    '        readonly kind: SyntaxKind.TemplateExpression;\n' +
    '        readonly head: TemplateHead;\n' +
    '        readonly templateSpans: NodeArray<TemplateSpan>;\n' +
    '    }\n' +
    '    export type TemplateLiteral = TemplateExpression | NoSubstitutionTemplateLiteral;\n' +
    '    export interface TemplateSpan extends Node {\n' +
    '        readonly kind: SyntaxKind.TemplateSpan;\n' +
    '        readonly parent: TemplateExpression;\n' +
    '        readonly expression: Expression;\n' +
    '        readonly literal: TemplateMiddle | TemplateTail;\n' +
    '    }\n' +
    '    export interface ParenthesizedExpression extends PrimaryExpression, JSDocContainer {\n' +
    '        readonly kind: SyntaxKind.ParenthesizedExpression;\n' +
    '        readonly expression: Expression;\n' +
    '    }\n' +
    '    export interface ArrayLiteralExpression extends PrimaryExpression {\n' +
    '        readonly kind: SyntaxKind.ArrayLiteralExpression;\n' +
    '        readonly elements: NodeArray<Expression>;\n' +
    '    }\n' +
    '    export interface SpreadElement extends Expression {\n' +
    '        readonly kind: SyntaxKind.SpreadElement;\n' +
    '        readonly parent: ArrayLiteralExpression | CallExpression | NewExpression;\n' +
    '        readonly expression: Expression;\n' +
    '    }\n' +
    '    /**\n' +
    '     * This interface is a base interface for ObjectLiteralExpression and JSXAttributes to extend from. JSXAttributes is similar to\n' +
    "     * ObjectLiteralExpression in that it contains array of properties; however, JSXAttributes' properties can only be\n" +
    '     * JSXAttribute or JSXSpreadAttribute. ObjectLiteralExpression, on the other hand, can only have properties of type\n' +
    '     * ObjectLiteralElement (e.g. PropertyAssignment, ShorthandPropertyAssignment etc.)\n' +
    '     */\n' +
    '    export interface ObjectLiteralExpressionBase<T extends ObjectLiteralElement> extends PrimaryExpression, Declaration {\n' +
    '        readonly properties: NodeArray<T>;\n' +
    '    }\n' +
    '    export interface ObjectLiteralExpression extends ObjectLiteralExpressionBase<ObjectLiteralElementLike> {\n' +
    '        readonly kind: SyntaxKind.ObjectLiteralExpression;\n' +
    '    }\n' +
    '    export type EntityNameExpression = Identifier | PropertyAccessEntityNameExpression;\n' +
    '    export type EntityNameOrEntityNameExpression = EntityName | EntityNameExpression;\n' +
    '    export type AccessExpression = PropertyAccessExpression | ElementAccessExpression;\n' +
    '    export interface PropertyAccessExpression extends MemberExpression, NamedDeclaration {\n' +
    '        readonly kind: SyntaxKind.PropertyAccessExpression;\n' +
    '        readonly expression: LeftHandSideExpression;\n' +
    '        readonly questionDotToken?: QuestionDotToken;\n' +
    '        readonly name: MemberName;\n' +
    '    }\n' +
    '    export interface PropertyAccessChain extends PropertyAccessExpression {\n' +
    '        _optionalChainBrand: any;\n' +
    '        readonly name: MemberName;\n' +
    '    }\n' +
    '    export interface SuperPropertyAccessExpression extends PropertyAccessExpression {\n' +
    '        readonly expression: SuperExpression;\n' +
    '    }\n' +
    '    /** Brand for a PropertyAccessExpression which, like a QualifiedName, consists of a sequence of identifiers separated by dots. */\n' +
    '    export interface PropertyAccessEntityNameExpression extends PropertyAccessExpression {\n' +
    '        _propertyAccessExpressionLikeQualifiedNameBrand?: any;\n' +
    '        readonly expression: EntityNameExpression;\n' +
    '        readonly name: Identifier;\n' +
    '    }\n' +
    '    export interface ElementAccessExpression extends MemberExpression {\n' +
    '        readonly kind: SyntaxKind.ElementAccessExpression;\n' +
    '        readonly expression: LeftHandSideExpression;\n' +
    '        readonly questionDotToken?: QuestionDotToken;\n' +
    '        readonly argumentExpression: Expression;\n' +
    '    }\n' +
    '    export interface ElementAccessChain extends ElementAccessExpression {\n' +
    '        _optionalChainBrand: any;\n' +
    '    }\n' +
    '    export interface SuperElementAccessExpression extends ElementAccessExpression {\n' +
    '        readonly expression: SuperExpression;\n' +
    '    }\n' +
    '    export type SuperProperty = SuperPropertyAccessExpression | SuperElementAccessExpression;\n' +
    '    export interface CallExpression extends LeftHandSideExpression, Declaration {\n' +
    '        readonly kind: SyntaxKind.CallExpression;\n' +
    '        readonly expression: LeftHandSideExpression;\n' +
    '        readonly questionDotToken?: QuestionDotToken;\n' +
    '        readonly typeArguments?: NodeArray<TypeNode>;\n' +
    '        readonly arguments: NodeArray<Expression>;\n' +
    '    }\n' +
    '    export interface CallChain extends CallExpression {\n' +
    '        _optionalChainBrand: any;\n' +
    '    }\n' +
    '    export type OptionalChain = PropertyAccessChain | ElementAccessChain | CallChain | NonNullChain;\n' +
    '    export interface SuperCall extends CallExpression {\n' +
    '        readonly expression: SuperExpression;\n' +
    '    }\n' +
    '    export interface ImportCall extends CallExpression {\n' +
    '        readonly expression: ImportExpression;\n' +
    '    }\n' +
    '    export interface ExpressionWithTypeArguments extends MemberExpression, NodeWithTypeArguments {\n' +
    '        readonly kind: SyntaxKind.ExpressionWithTypeArguments;\n' +
    '        readonly expression: LeftHandSideExpression;\n' +
    '    }\n' +
    '    export interface NewExpression extends PrimaryExpression, Declaration {\n' +
    '        readonly kind: SyntaxKind.NewExpression;\n' +
    '        readonly expression: LeftHandSideExpression;\n' +
    '        readonly typeArguments?: NodeArray<TypeNode>;\n' +
    '        readonly arguments?: NodeArray<Expression>;\n' +
    '    }\n' +
    '    export interface TaggedTemplateExpression extends MemberExpression {\n' +
    '        readonly kind: SyntaxKind.TaggedTemplateExpression;\n' +
    '        readonly tag: LeftHandSideExpression;\n' +
    '        readonly typeArguments?: NodeArray<TypeNode>;\n' +
    '        readonly template: TemplateLiteral;\n' +
    '    }\n' +
    '    export type CallLikeExpression = CallExpression | NewExpression | TaggedTemplateExpression | Decorator | JsxOpeningLikeElement;\n' +
    '    export interface AsExpression extends Expression {\n' +
    '        readonly kind: SyntaxKind.AsExpression;\n' +
    '        readonly expression: Expression;\n' +
    '        readonly type: TypeNode;\n' +
    '    }\n' +
    '    export interface TypeAssertion extends UnaryExpression {\n' +
    '        readonly kind: SyntaxKind.TypeAssertionExpression;\n' +
    '        readonly type: TypeNode;\n' +
    '        readonly expression: UnaryExpression;\n' +
    '    }\n' +
    '    export type AssertionExpression = TypeAssertion | AsExpression;\n' +
    '    export interface NonNullExpression extends LeftHandSideExpression {\n' +
    '        readonly kind: SyntaxKind.NonNullExpression;\n' +
    '        readonly expression: Expression;\n' +
    '    }\n' +
    '    export interface NonNullChain extends NonNullExpression {\n' +
    '        _optionalChainBrand: any;\n' +
    '    }\n' +
    '    export interface MetaProperty extends PrimaryExpression {\n' +
    '        readonly kind: SyntaxKind.MetaProperty;\n' +
    '        readonly keywordToken: SyntaxKind.NewKeyword | SyntaxKind.ImportKeyword;\n' +
    '        readonly name: Identifier;\n' +
    '    }\n' +
    '    export interface JsxElement extends PrimaryExpression {\n' +
    '        readonly kind: SyntaxKind.JsxElement;\n' +
    '        readonly openingElement: JsxOpeningElement;\n' +
    '        readonly children: NodeArray<JsxChild>;\n' +
    '        readonly closingElement: JsxClosingElement;\n' +
    '    }\n' +
    '    export type JsxOpeningLikeElement = JsxSelfClosingElement | JsxOpeningElement;\n' +
    '    export type JsxAttributeLike = JsxAttribute | JsxSpreadAttribute;\n' +
    '    export type JsxTagNameExpression = Identifier | ThisExpression | JsxTagNamePropertyAccess;\n' +
    '    export interface JsxTagNamePropertyAccess extends PropertyAccessExpression {\n' +
    '        readonly expression: JsxTagNameExpression;\n' +
    '    }\n' +
    '    export interface JsxAttributes extends ObjectLiteralExpressionBase<JsxAttributeLike> {\n' +
    '        readonly kind: SyntaxKind.JsxAttributes;\n' +
    '        readonly parent: JsxOpeningLikeElement;\n' +
    '    }\n' +
    '    export interface JsxOpeningElement extends Expression {\n' +
    '        readonly kind: SyntaxKind.JsxOpeningElement;\n' +
    '        readonly parent: JsxElement;\n' +
    '        readonly tagName: JsxTagNameExpression;\n' +
    '        readonly typeArguments?: NodeArray<TypeNode>;\n' +
    '        readonly attributes: JsxAttributes;\n' +
    '    }\n' +
    '    export interface JsxSelfClosingElement extends PrimaryExpression {\n' +
    '        readonly kind: SyntaxKind.JsxSelfClosingElement;\n' +
    '        readonly tagName: JsxTagNameExpression;\n' +
    '        readonly typeArguments?: NodeArray<TypeNode>;\n' +
    '        readonly attributes: JsxAttributes;\n' +
    '    }\n' +
    '    export interface JsxFragment extends PrimaryExpression {\n' +
    '        readonly kind: SyntaxKind.JsxFragment;\n' +
    '        readonly openingFragment: JsxOpeningFragment;\n' +
    '        readonly children: NodeArray<JsxChild>;\n' +
    '        readonly closingFragment: JsxClosingFragment;\n' +
    '    }\n' +
    '    export interface JsxOpeningFragment extends Expression {\n' +
    '        readonly kind: SyntaxKind.JsxOpeningFragment;\n' +
    '        readonly parent: JsxFragment;\n' +
    '    }\n' +
    '    export interface JsxClosingFragment extends Expression {\n' +
    '        readonly kind: SyntaxKind.JsxClosingFragment;\n' +
    '        readonly parent: JsxFragment;\n' +
    '    }\n' +
    '    export interface JsxAttribute extends ObjectLiteralElement {\n' +
    '        readonly kind: SyntaxKind.JsxAttribute;\n' +
    '        readonly parent: JsxAttributes;\n' +
    '        readonly name: Identifier;\n' +
    '        readonly initializer?: StringLiteral | JsxExpression;\n' +
    '    }\n' +
    '    export interface JsxSpreadAttribute extends ObjectLiteralElement {\n' +
    '        readonly kind: SyntaxKind.JsxSpreadAttribute;\n' +
    '        readonly parent: JsxAttributes;\n' +
    '        readonly expression: Expression;\n' +
    '    }\n' +
    '    export interface JsxClosingElement extends Node {\n' +
    '        readonly kind: SyntaxKind.JsxClosingElement;\n' +
    '        readonly parent: JsxElement;\n' +
    '        readonly tagName: JsxTagNameExpression;\n' +
    '    }\n' +
    '    export interface JsxExpression extends Expression {\n' +
    '        readonly kind: SyntaxKind.JsxExpression;\n' +
    '        readonly parent: JsxElement | JsxFragment | JsxAttributeLike;\n' +
    '        readonly dotDotDotToken?: Token<SyntaxKind.DotDotDotToken>;\n' +
    '        readonly expression?: Expression;\n' +
    '    }\n' +
    '    export interface JsxText extends LiteralLikeNode {\n' +
    '        readonly kind: SyntaxKind.JsxText;\n' +
    '        readonly parent: JsxElement | JsxFragment;\n' +
    '        readonly containsOnlyTriviaWhiteSpaces: boolean;\n' +
    '    }\n' +
    '    export type JsxChild = JsxText | JsxExpression | JsxElement | JsxSelfClosingElement | JsxFragment;\n' +
    '    export interface Statement extends Node, JSDocContainer {\n' +
    '        _statementBrand: any;\n' +
    '    }\n' +
    '    export interface NotEmittedStatement extends Statement {\n' +
    '        readonly kind: SyntaxKind.NotEmittedStatement;\n' +
    '    }\n' +
    '    /**\n' +
    '     * A list of comma-separated expressions. This node is only created by transformations.\n' +
    '     */\n' +
    '    export interface CommaListExpression extends Expression {\n' +
    '        readonly kind: SyntaxKind.CommaListExpression;\n' +
    '        readonly elements: NodeArray<Expression>;\n' +
    '    }\n' +
    '    export interface EmptyStatement extends Statement {\n' +
    '        readonly kind: SyntaxKind.EmptyStatement;\n' +
    '    }\n' +
    '    export interface DebuggerStatement extends Statement {\n' +
    '        readonly kind: SyntaxKind.DebuggerStatement;\n' +
    '    }\n' +
    '    export interface MissingDeclaration extends DeclarationStatement {\n' +
    '        readonly kind: SyntaxKind.MissingDeclaration;\n' +
    '        readonly name?: Identifier;\n' +
    '    }\n' +
    '    export type BlockLike = SourceFile | Block | ModuleBlock | CaseOrDefaultClause;\n' +
    '    export interface Block extends Statement {\n' +
    '        readonly kind: SyntaxKind.Block;\n' +
    '        readonly statements: NodeArray<Statement>;\n' +
    '    }\n' +
    '    export interface VariableStatement extends Statement {\n' +
    '        readonly kind: SyntaxKind.VariableStatement;\n' +
    '        readonly declarationList: VariableDeclarationList;\n' +
    '    }\n' +
    '    export interface ExpressionStatement extends Statement {\n' +
    '        readonly kind: SyntaxKind.ExpressionStatement;\n' +
    '        readonly expression: Expression;\n' +
    '    }\n' +
    '    export interface IfStatement extends Statement {\n' +
    '        readonly kind: SyntaxKind.IfStatement;\n' +
    '        readonly expression: Expression;\n' +
    '        readonly thenStatement: Statement;\n' +
    '        readonly elseStatement?: Statement;\n' +
    '    }\n' +
    '    export interface IterationStatement extends Statement {\n' +
    '        readonly statement: Statement;\n' +
    '    }\n' +
    '    export interface DoStatement extends IterationStatement {\n' +
    '        readonly kind: SyntaxKind.DoStatement;\n' +
    '        readonly expression: Expression;\n' +
    '    }\n' +
    '    export interface WhileStatement extends IterationStatement {\n' +
    '        readonly kind: SyntaxKind.WhileStatement;\n' +
    '        readonly expression: Expression;\n' +
    '    }\n' +
    '    export type ForInitializer = VariableDeclarationList | Expression;\n' +
    '    export interface ForStatement extends IterationStatement {\n' +
    '        readonly kind: SyntaxKind.ForStatement;\n' +
    '        readonly initializer?: ForInitializer;\n' +
    '        readonly condition?: Expression;\n' +
    '        readonly incrementor?: Expression;\n' +
    '    }\n' +
    '    export type ForInOrOfStatement = ForInStatement | ForOfStatement;\n' +
    '    export interface ForInStatement extends IterationStatement {\n' +
    '        readonly kind: SyntaxKind.ForInStatement;\n' +
    '        readonly initializer: ForInitializer;\n' +
    '        readonly expression: Expression;\n' +
    '    }\n' +
    '    export interface ForOfStatement extends IterationStatement {\n' +
    '        readonly kind: SyntaxKind.ForOfStatement;\n' +
    '        readonly awaitModifier?: AwaitKeyword;\n' +
    '        readonly initializer: ForInitializer;\n' +
    '        readonly expression: Expression;\n' +
    '    }\n' +
    '    export interface BreakStatement extends Statement {\n' +
    '        readonly kind: SyntaxKind.BreakStatement;\n' +
    '        readonly label?: Identifier;\n' +
    '    }\n' +
    '    export interface ContinueStatement extends Statement {\n' +
    '        readonly kind: SyntaxKind.ContinueStatement;\n' +
    '        readonly label?: Identifier;\n' +
    '    }\n' +
    '    export type BreakOrContinueStatement = BreakStatement | ContinueStatement;\n' +
    '    export interface ReturnStatement extends Statement {\n' +
    '        readonly kind: SyntaxKind.ReturnStatement;\n' +
    '        readonly expression?: Expression;\n' +
    '    }\n' +
    '    export interface WithStatement extends Statement {\n' +
    '        readonly kind: SyntaxKind.WithStatement;\n' +
    '        readonly expression: Expression;\n' +
    '        readonly statement: Statement;\n' +
    '    }\n' +
    '    export interface SwitchStatement extends Statement {\n' +
    '        readonly kind: SyntaxKind.SwitchStatement;\n' +
    '        readonly expression: Expression;\n' +
    '        readonly caseBlock: CaseBlock;\n' +
    '        possiblyExhaustive?: boolean;\n' +
    '    }\n' +
    '    export interface CaseBlock extends Node {\n' +
    '        readonly kind: SyntaxKind.CaseBlock;\n' +
    '        readonly parent: SwitchStatement;\n' +
    '        readonly clauses: NodeArray<CaseOrDefaultClause>;\n' +
    '    }\n' +
    '    export interface CaseClause extends Node, JSDocContainer {\n' +
    '        readonly kind: SyntaxKind.CaseClause;\n' +
    '        readonly parent: CaseBlock;\n' +
    '        readonly expression: Expression;\n' +
    '        readonly statements: NodeArray<Statement>;\n' +
    '    }\n' +
    '    export interface DefaultClause extends Node {\n' +
    '        readonly kind: SyntaxKind.DefaultClause;\n' +
    '        readonly parent: CaseBlock;\n' +
    '        readonly statements: NodeArray<Statement>;\n' +
    '    }\n' +
    '    export type CaseOrDefaultClause = CaseClause | DefaultClause;\n' +
    '    export interface LabeledStatement extends Statement {\n' +
    '        readonly kind: SyntaxKind.LabeledStatement;\n' +
    '        readonly label: Identifier;\n' +
    '        readonly statement: Statement;\n' +
    '    }\n' +
    '    export interface ThrowStatement extends Statement {\n' +
    '        readonly kind: SyntaxKind.ThrowStatement;\n' +
    '        readonly expression: Expression;\n' +
    '    }\n' +
    '    export interface TryStatement extends Statement {\n' +
    '        readonly kind: SyntaxKind.TryStatement;\n' +
    '        readonly tryBlock: Block;\n' +
    '        readonly catchClause?: CatchClause;\n' +
    '        readonly finallyBlock?: Block;\n' +
    '    }\n' +
    '    export interface CatchClause extends Node {\n' +
    '        readonly kind: SyntaxKind.CatchClause;\n' +
    '        readonly parent: TryStatement;\n' +
    '        readonly variableDeclaration?: VariableDeclaration;\n' +
    '        readonly block: Block;\n' +
    '    }\n' +
    '    export type ObjectTypeDeclaration = ClassLikeDeclaration | InterfaceDeclaration | TypeLiteralNode;\n' +
    '    export type DeclarationWithTypeParameters = DeclarationWithTypeParameterChildren | JSDocTypedefTag | JSDocCallbackTag | JSDocSignature;\n' +
    '    export type DeclarationWithTypeParameterChildren = SignatureDeclaration | ClassLikeDeclaration | InterfaceDeclaration | TypeAliasDeclaration | JSDocTemplateTag;\n' +
    '    export interface ClassLikeDeclarationBase extends NamedDeclaration, JSDocContainer {\n' +
    '        readonly kind: SyntaxKind.ClassDeclaration | SyntaxKind.ClassExpression;\n' +
    '        readonly name?: Identifier;\n' +
    '        readonly typeParameters?: NodeArray<TypeParameterDeclaration>;\n' +
    '        readonly heritageClauses?: NodeArray<HeritageClause>;\n' +
    '        readonly members: NodeArray<ClassElement>;\n' +
    '    }\n' +
    '    export interface ClassDeclaration extends ClassLikeDeclarationBase, DeclarationStatement {\n' +
    '        readonly kind: SyntaxKind.ClassDeclaration;\n' +
    '        /** May be undefined in `export default class { ... }`. */\n' +
    '        readonly name?: Identifier;\n' +
    '    }\n' +
    '    export interface ClassExpression extends ClassLikeDeclarationBase, PrimaryExpression {\n' +
    '        readonly kind: SyntaxKind.ClassExpression;\n' +
    '    }\n' +
    '    export type ClassLikeDeclaration = ClassDeclaration | ClassExpression;\n' +
    '    export interface ClassElement extends NamedDeclaration {\n' +
    '        _classElementBrand: any;\n' +
    '        readonly name?: PropertyName;\n' +
    '    }\n' +
    '    export interface TypeElement extends NamedDeclaration {\n' +
    '        _typeElementBrand: any;\n' +
    '        readonly name?: PropertyName;\n' +
    '        readonly questionToken?: QuestionToken;\n' +
    '    }\n' +
    '    export interface InterfaceDeclaration extends DeclarationStatement, JSDocContainer {\n' +
    '        readonly kind: SyntaxKind.InterfaceDeclaration;\n' +
    '        readonly name: Identifier;\n' +
    '        readonly typeParameters?: NodeArray<TypeParameterDeclaration>;\n' +
    '        readonly heritageClauses?: NodeArray<HeritageClause>;\n' +
    '        readonly members: NodeArray<TypeElement>;\n' +
    '    }\n' +
    '    export interface HeritageClause extends Node {\n' +
    '        readonly kind: SyntaxKind.HeritageClause;\n' +
    '        readonly parent: InterfaceDeclaration | ClassLikeDeclaration;\n' +
    '        readonly token: SyntaxKind.ExtendsKeyword | SyntaxKind.ImplementsKeyword;\n' +
    '        readonly types: NodeArray<ExpressionWithTypeArguments>;\n' +
    '    }\n' +
    '    export interface TypeAliasDeclaration extends DeclarationStatement, JSDocContainer {\n' +
    '        readonly kind: SyntaxKind.TypeAliasDeclaration;\n' +
    '        readonly name: Identifier;\n' +
    '        readonly typeParameters?: NodeArray<TypeParameterDeclaration>;\n' +
    '        readonly type: TypeNode;\n' +
    '    }\n' +
    '    export interface EnumMember extends NamedDeclaration, JSDocContainer {\n' +
    '        readonly kind: SyntaxKind.EnumMember;\n' +
    '        readonly parent: EnumDeclaration;\n' +
    '        readonly name: PropertyName;\n' +
    '        readonly initializer?: Expression;\n' +
    '    }\n' +
    '    export interface EnumDeclaration extends DeclarationStatement, JSDocContainer {\n' +
    '        readonly kind: SyntaxKind.EnumDeclaration;\n' +
    '        readonly name: Identifier;\n' +
    '        readonly members: NodeArray<EnumMember>;\n' +
    '    }\n' +
    '    export type ModuleName = Identifier | StringLiteral;\n' +
    '    export type ModuleBody = NamespaceBody | JSDocNamespaceBody;\n' +
    '    export interface ModuleDeclaration extends DeclarationStatement, JSDocContainer {\n' +
    '        readonly kind: SyntaxKind.ModuleDeclaration;\n' +
    '        readonly parent: ModuleBody | SourceFile;\n' +
    '        readonly name: ModuleName;\n' +
    '        readonly body?: ModuleBody | JSDocNamespaceDeclaration;\n' +
    '    }\n' +
    '    export type NamespaceBody = ModuleBlock | NamespaceDeclaration;\n' +
    '    export interface NamespaceDeclaration extends ModuleDeclaration {\n' +
    '        readonly name: Identifier;\n' +
    '        readonly body: NamespaceBody;\n' +
    '    }\n' +
    '    export type JSDocNamespaceBody = Identifier | JSDocNamespaceDeclaration;\n' +
    '    export interface JSDocNamespaceDeclaration extends ModuleDeclaration {\n' +
    '        readonly name: Identifier;\n' +
    '        readonly body?: JSDocNamespaceBody;\n' +
    '    }\n' +
    '    export interface ModuleBlock extends Node, Statement {\n' +
    '        readonly kind: SyntaxKind.ModuleBlock;\n' +
    '        readonly parent: ModuleDeclaration;\n' +
    '        readonly statements: NodeArray<Statement>;\n' +
    '    }\n' +
    '    export type ModuleReference = EntityName | ExternalModuleReference;\n' +
    '    /**\n' +
    '     * One of:\n' +
    '     * - import x = require("mod");\n' +
    '     * - import x = M.x;\n' +
    '     */\n' +
    '    export interface ImportEqualsDeclaration extends DeclarationStatement, JSDocContainer {\n' +
    '        readonly kind: SyntaxKind.ImportEqualsDeclaration;\n' +
    '        readonly parent: SourceFile | ModuleBlock;\n' +
    '        readonly name: Identifier;\n' +
    '        readonly isTypeOnly: boolean;\n' +
    '        readonly moduleReference: ModuleReference;\n' +
    '    }\n' +
    '    export interface ExternalModuleReference extends Node {\n' +
    '        readonly kind: SyntaxKind.ExternalModuleReference;\n' +
    '        readonly parent: ImportEqualsDeclaration;\n' +
    '        readonly expression: Expression;\n' +
    '    }\n' +
    '    export interface ImportDeclaration extends Statement {\n' +
    '        readonly kind: SyntaxKind.ImportDeclaration;\n' +
    '        readonly parent: SourceFile | ModuleBlock;\n' +
    '        readonly importClause?: ImportClause;\n' +
    '        /** If this is not a StringLiteral it will be a grammar error. */\n' +
    '        readonly moduleSpecifier: Expression;\n' +
    '        readonly assertClause?: AssertClause;\n' +
    '    }\n' +
    '    export type NamedImportBindings = NamespaceImport | NamedImports;\n' +
    '    export type NamedExportBindings = NamespaceExport | NamedExports;\n' +
    '    export interface ImportClause extends NamedDeclaration {\n' +
    '        readonly kind: SyntaxKind.ImportClause;\n' +
    '        readonly parent: ImportDeclaration;\n' +
    '        readonly isTypeOnly: boolean;\n' +
    '        readonly name?: Identifier;\n' +
    '        readonly namedBindings?: NamedImportBindings;\n' +
    '    }\n' +
    '    export type AssertionKey = Identifier | StringLiteral;\n' +
    '    export interface AssertEntry extends Node {\n' +
    '        readonly kind: SyntaxKind.AssertEntry;\n' +
    '        readonly parent: AssertClause;\n' +
    '        readonly name: AssertionKey;\n' +
    '        readonly value: Expression;\n' +
    '    }\n' +
    '    export interface AssertClause extends Node {\n' +
    '        readonly kind: SyntaxKind.AssertClause;\n' +
    '        readonly parent: ImportDeclaration | ExportDeclaration;\n' +
    '        readonly elements: NodeArray<AssertEntry>;\n' +
    '        readonly multiLine?: boolean;\n' +
    '    }\n' +
    '    export interface NamespaceImport extends NamedDeclaration {\n' +
    '        readonly kind: SyntaxKind.NamespaceImport;\n' +
    '        readonly parent: ImportClause;\n' +
    '        readonly name: Identifier;\n' +
    '    }\n' +
    '    export interface NamespaceExport extends NamedDeclaration {\n' +
    '        readonly kind: SyntaxKind.NamespaceExport;\n' +
    '        readonly parent: ExportDeclaration;\n' +
    '        readonly name: Identifier;\n' +
    '    }\n' +
    '    export interface NamespaceExportDeclaration extends DeclarationStatement, JSDocContainer {\n' +
    '        readonly kind: SyntaxKind.NamespaceExportDeclaration;\n' +
    '        readonly name: Identifier;\n' +
    '    }\n' +
    '    export interface ExportDeclaration extends DeclarationStatement, JSDocContainer {\n' +
    '        readonly kind: SyntaxKind.ExportDeclaration;\n' +
    '        readonly parent: SourceFile | ModuleBlock;\n' +
    '        readonly isTypeOnly: boolean;\n' +
    '        /** Will not be assigned in the case of `export * from "foo";` */\n' +
    '        readonly exportClause?: NamedExportBindings;\n' +
    '        /** If this is not a StringLiteral it will be a grammar error. */\n' +
    '        readonly moduleSpecifier?: Expression;\n' +
    '        readonly assertClause?: AssertClause;\n' +
    '    }\n' +
    '    export interface NamedImports extends Node {\n' +
    '        readonly kind: SyntaxKind.NamedImports;\n' +
    '        readonly parent: ImportClause;\n' +
    '        readonly elements: NodeArray<ImportSpecifier>;\n' +
    '    }\n' +
    '    export interface NamedExports extends Node {\n' +
    '        readonly kind: SyntaxKind.NamedExports;\n' +
    '        readonly parent: ExportDeclaration;\n' +
    '        readonly elements: NodeArray<ExportSpecifier>;\n' +
    '    }\n' +
    '    export type NamedImportsOrExports = NamedImports | NamedExports;\n' +
    '    export interface ImportSpecifier extends NamedDeclaration {\n' +
    '        readonly kind: SyntaxKind.ImportSpecifier;\n' +
    '        readonly parent: NamedImports;\n' +
    '        readonly propertyName?: Identifier;\n' +
    '        readonly name: Identifier;\n' +
    '        readonly isTypeOnly: boolean;\n' +
    '    }\n' +
    '    export interface ExportSpecifier extends NamedDeclaration, JSDocContainer {\n' +
    '        readonly kind: SyntaxKind.ExportSpecifier;\n' +
    '        readonly parent: NamedExports;\n' +
    '        readonly isTypeOnly: boolean;\n' +
    '        readonly propertyName?: Identifier;\n' +
    '        readonly name: Identifier;\n' +
    '    }\n' +
    '    export type ImportOrExportSpecifier = ImportSpecifier | ExportSpecifier;\n' +
    '    export type TypeOnlyCompatibleAliasDeclaration = ImportClause | ImportEqualsDeclaration | NamespaceImport | ImportOrExportSpecifier;\n' +
    '    export type TypeOnlyAliasDeclaration = ImportClause & {\n' +
    '        readonly isTypeOnly: true;\n' +
    '        readonly name: Identifier;\n' +
    '    } | ImportEqualsDeclaration & {\n' +
    '        readonly isTypeOnly: true;\n' +
    '    } | NamespaceImport & {\n' +
    '        readonly parent: ImportClause & {\n' +
    '            readonly isTypeOnly: true;\n' +
    '        };\n' +
    '    } | ImportSpecifier & ({\n' +
    '        readonly isTypeOnly: true;\n' +
    '    } | {\n' +
    '        readonly parent: NamedImports & {\n' +
    '            readonly parent: ImportClause & {\n' +
    '                readonly isTypeOnly: true;\n' +
    '            };\n' +
    '        };\n' +
    '    }) | ExportSpecifier & ({\n' +
    '        readonly isTypeOnly: true;\n' +
    '    } | {\n' +
    '        readonly parent: NamedExports & {\n' +
    '            readonly parent: ExportDeclaration & {\n' +
    '                readonly isTypeOnly: true;\n' +
    '            };\n' +
    '        };\n' +
    '    });\n' +
    '    /**\n' +
    '     * This is either an `export =` or an `export default` declaration.\n' +
    '     * Unless `isExportEquals` is set, this node was parsed as an `export default`.\n' +
    '     */\n' +
    '    export interface ExportAssignment extends DeclarationStatement, JSDocContainer {\n' +
    '        readonly kind: SyntaxKind.ExportAssignment;\n' +
    '        readonly parent: SourceFile;\n' +
    '        readonly isExportEquals?: boolean;\n' +
    '        readonly expression: Expression;\n' +
    '    }\n' +
    '    export interface FileReference extends TextRange {\n' +
    '        fileName: string;\n' +
    '        resolutionMode?: SourceFile["impliedNodeFormat"];\n' +
    '    }\n' +
    '    export interface CheckJsDirective extends TextRange {\n' +
    '        enabled: boolean;\n' +
    '    }\n' +
    '    export type CommentKind = SyntaxKind.SingleLineCommentTrivia | SyntaxKind.MultiLineCommentTrivia;\n' +
    '    export interface CommentRange extends TextRange {\n' +
    '        hasTrailingNewLine?: boolean;\n' +
    '        kind: CommentKind;\n' +
    '    }\n' +
    '    export interface SynthesizedComment extends CommentRange {\n' +
    '        text: string;\n' +
    '        pos: -1;\n' +
    '        end: -1;\n' +
    '        hasLeadingNewline?: boolean;\n' +
    '    }\n' +
    '    export interface JSDocTypeExpression extends TypeNode {\n' +
    '        readonly kind: SyntaxKind.JSDocTypeExpression;\n' +
    '        readonly type: TypeNode;\n' +
    '    }\n' +
    '    export interface JSDocNameReference extends Node {\n' +
    '        readonly kind: SyntaxKind.JSDocNameReference;\n' +
    '        readonly name: EntityName | JSDocMemberName;\n' +
    '    }\n' +
    '    /** Class#method reference in JSDoc */\n' +
    '    export interface JSDocMemberName extends Node {\n' +
    '        readonly kind: SyntaxKind.JSDocMemberName;\n' +
    '        readonly left: EntityName | JSDocMemberName;\n' +
    '        readonly right: Identifier;\n' +
    '    }\n' +
    '    export interface JSDocType extends TypeNode {\n' +
    '        _jsDocTypeBrand: any;\n' +
    '    }\n' +
    '    export interface JSDocAllType extends JSDocType {\n' +
    '        readonly kind: SyntaxKind.JSDocAllType;\n' +
    '    }\n' +
    '    export interface JSDocUnknownType extends JSDocType {\n' +
    '        readonly kind: SyntaxKind.JSDocUnknownType;\n' +
    '    }\n' +
    '    export interface JSDocNonNullableType extends JSDocType {\n' +
    '        readonly kind: SyntaxKind.JSDocNonNullableType;\n' +
    '        readonly type: TypeNode;\n' +
    '        readonly postfix: boolean;\n' +
    '    }\n' +
    '    export interface JSDocNullableType extends JSDocType {\n' +
    '        readonly kind: SyntaxKind.JSDocNullableType;\n' +
    '        readonly type: TypeNode;\n' +
    '        readonly postfix: boolean;\n' +
    '    }\n' +
    '    export interface JSDocOptionalType extends JSDocType {\n' +
    '        readonly kind: SyntaxKind.JSDocOptionalType;\n' +
    '        readonly type: TypeNode;\n' +
    '    }\n' +
    '    export interface JSDocFunctionType extends JSDocType, SignatureDeclarationBase {\n' +
    '        readonly kind: SyntaxKind.JSDocFunctionType;\n' +
    '    }\n' +
    '    export interface JSDocVariadicType extends JSDocType {\n' +
    '        readonly kind: SyntaxKind.JSDocVariadicType;\n' +
    '        readonly type: TypeNode;\n' +
    '    }\n' +
    '    export interface JSDocNamepathType extends JSDocType {\n' +
    '        readonly kind: SyntaxKind.JSDocNamepathType;\n' +
    '        readonly type: TypeNode;\n' +
    '    }\n' +
    '    export type JSDocTypeReferencingNode = JSDocVariadicType | JSDocOptionalType | JSDocNullableType | JSDocNonNullableType;\n' +
    '    export interface JSDoc extends Node {\n' +
    '        readonly kind: SyntaxKind.JSDoc;\n' +
    '        readonly parent: HasJSDoc;\n' +
    '        readonly tags?: NodeArray<JSDocTag>;\n' +
    '        readonly comment?: string | NodeArray<JSDocComment>;\n' +
    '    }\n' +
    '    export interface JSDocTag extends Node {\n' +
    '        readonly parent: JSDoc | JSDocTypeLiteral;\n' +
    '        readonly tagName: Identifier;\n' +
    '        readonly comment?: string | NodeArray<JSDocComment>;\n' +
    '    }\n' +
    '    export interface JSDocLink extends Node {\n' +
    '        readonly kind: SyntaxKind.JSDocLink;\n' +
    '        readonly name?: EntityName | JSDocMemberName;\n' +
    '        text: string;\n' +
    '    }\n' +
    '    export interface JSDocLinkCode extends Node {\n' +
    '        readonly kind: SyntaxKind.JSDocLinkCode;\n' +
    '        readonly name?: EntityName | JSDocMemberName;\n' +
    '        text: string;\n' +
    '    }\n' +
    '    export interface JSDocLinkPlain extends Node {\n' +
    '        readonly kind: SyntaxKind.JSDocLinkPlain;\n' +
    '        readonly name?: EntityName | JSDocMemberName;\n' +
    '        text: string;\n' +
    '    }\n' +
    '    export type JSDocComment = JSDocText | JSDocLink | JSDocLinkCode | JSDocLinkPlain;\n' +
    '    export interface JSDocText extends Node {\n' +
    '        readonly kind: SyntaxKind.JSDocText;\n' +
    '        text: string;\n' +
    '    }\n' +
    '    export interface JSDocUnknownTag extends JSDocTag {\n' +
    '        readonly kind: SyntaxKind.JSDocTag;\n' +
    '    }\n' +
    '    /**\n' +
    '     * Note that `@extends` is a synonym of `@augments`.\n' +
    '     * Both tags are represented by this interface.\n' +
    '     */\n' +
    '    export interface JSDocAugmentsTag extends JSDocTag {\n' +
    '        readonly kind: SyntaxKind.JSDocAugmentsTag;\n' +
    '        readonly class: ExpressionWithTypeArguments & {\n' +
    '            readonly expression: Identifier | PropertyAccessEntityNameExpression;\n' +
    '        };\n' +
    '    }\n' +
    '    export interface JSDocImplementsTag extends JSDocTag {\n' +
    '        readonly kind: SyntaxKind.JSDocImplementsTag;\n' +
    '        readonly class: ExpressionWithTypeArguments & {\n' +
    '            readonly expression: Identifier | PropertyAccessEntityNameExpression;\n' +
    '        };\n' +
    '    }\n' +
    '    export interface JSDocAuthorTag extends JSDocTag {\n' +
    '        readonly kind: SyntaxKind.JSDocAuthorTag;\n' +
    '    }\n' +
    '    export interface JSDocDeprecatedTag extends JSDocTag {\n' +
    '        kind: SyntaxKind.JSDocDeprecatedTag;\n' +
    '    }\n' +
    '    export interface JSDocClassTag extends JSDocTag {\n' +
    '        readonly kind: SyntaxKind.JSDocClassTag;\n' +
    '    }\n' +
    '    export interface JSDocPublicTag extends JSDocTag {\n' +
    '        readonly kind: SyntaxKind.JSDocPublicTag;\n' +
    '    }\n' +
    '    export interface JSDocPrivateTag extends JSDocTag {\n' +
    '        readonly kind: SyntaxKind.JSDocPrivateTag;\n' +
    '    }\n' +
    '    export interface JSDocProtectedTag extends JSDocTag {\n' +
    '        readonly kind: SyntaxKind.JSDocProtectedTag;\n' +
    '    }\n' +
    '    export interface JSDocReadonlyTag extends JSDocTag {\n' +
    '        readonly kind: SyntaxKind.JSDocReadonlyTag;\n' +
    '    }\n' +
    '    export interface JSDocOverrideTag extends JSDocTag {\n' +
    '        readonly kind: SyntaxKind.JSDocOverrideTag;\n' +
    '    }\n' +
    '    export interface JSDocEnumTag extends JSDocTag, Declaration {\n' +
    '        readonly kind: SyntaxKind.JSDocEnumTag;\n' +
    '        readonly parent: JSDoc;\n' +
    '        readonly typeExpression: JSDocTypeExpression;\n' +
    '    }\n' +
    '    export interface JSDocThisTag extends JSDocTag {\n' +
    '        readonly kind: SyntaxKind.JSDocThisTag;\n' +
    '        readonly typeExpression: JSDocTypeExpression;\n' +
    '    }\n' +
    '    export interface JSDocTemplateTag extends JSDocTag {\n' +
    '        readonly kind: SyntaxKind.JSDocTemplateTag;\n' +
    '        readonly constraint: JSDocTypeExpression | undefined;\n' +
    '        readonly typeParameters: NodeArray<TypeParameterDeclaration>;\n' +
    '    }\n' +
    '    export interface JSDocSeeTag extends JSDocTag {\n' +
    '        readonly kind: SyntaxKind.JSDocSeeTag;\n' +
    '        readonly name?: JSDocNameReference;\n' +
    '    }\n' +
    '    export interface JSDocReturnTag extends JSDocTag {\n' +
    '        readonly kind: SyntaxKind.JSDocReturnTag;\n' +
    '        readonly typeExpression?: JSDocTypeExpression;\n' +
    '    }\n' +
    '    export interface JSDocTypeTag extends JSDocTag {\n' +
    '        readonly kind: SyntaxKind.JSDocTypeTag;\n' +
    '        readonly typeExpression: JSDocTypeExpression;\n' +
    '    }\n' +
    '    export interface JSDocTypedefTag extends JSDocTag, NamedDeclaration {\n' +
    '        readonly kind: SyntaxKind.JSDocTypedefTag;\n' +
    '        readonly parent: JSDoc;\n' +
    '        readonly fullName?: JSDocNamespaceDeclaration | Identifier;\n' +
    '        readonly name?: Identifier;\n' +
    '        readonly typeExpression?: JSDocTypeExpression | JSDocTypeLiteral;\n' +
    '    }\n' +
    '    export interface JSDocCallbackTag extends JSDocTag, NamedDeclaration {\n' +
    '        readonly kind: SyntaxKind.JSDocCallbackTag;\n' +
    '        readonly parent: JSDoc;\n' +
    '        readonly fullName?: JSDocNamespaceDeclaration | Identifier;\n' +
    '        readonly name?: Identifier;\n' +
    '        readonly typeExpression: JSDocSignature;\n' +
    '    }\n' +
    '    export interface JSDocSignature extends JSDocType, Declaration {\n' +
    '        readonly kind: SyntaxKind.JSDocSignature;\n' +
    '        readonly typeParameters?: readonly JSDocTemplateTag[];\n' +
    '        readonly parameters: readonly JSDocParameterTag[];\n' +
    '        readonly type: JSDocReturnTag | undefined;\n' +
    '    }\n' +
    '    export interface JSDocPropertyLikeTag extends JSDocTag, Declaration {\n' +
    '        readonly parent: JSDoc;\n' +
    '        readonly name: EntityName;\n' +
    '        readonly typeExpression?: JSDocTypeExpression;\n' +
    '        /** Whether the property name came before the type -- non-standard for JSDoc, but Typescript-like */\n' +
    '        readonly isNameFirst: boolean;\n' +
    '        readonly isBracketed: boolean;\n' +
    '    }\n' +
    '    export interface JSDocPropertyTag extends JSDocPropertyLikeTag {\n' +
    '        readonly kind: SyntaxKind.JSDocPropertyTag;\n' +
    '    }\n' +
    '    export interface JSDocParameterTag extends JSDocPropertyLikeTag {\n' +
    '        readonly kind: SyntaxKind.JSDocParameterTag;\n' +
    '    }\n' +
    '    export interface JSDocTypeLiteral extends JSDocType {\n' +
    '        readonly kind: SyntaxKind.JSDocTypeLiteral;\n' +
    '        readonly jsDocPropertyTags?: readonly JSDocPropertyLikeTag[];\n' +
    '        /** If true, then this type literal represents an *array* of its type. */\n' +
    '        readonly isArrayType: boolean;\n' +
    '    }\n' +
    '    export enum FlowFlags {\n' +
    '        Unreachable = 1,\n' +
    '        Start = 2,\n' +
    '        BranchLabel = 4,\n' +
    '        LoopLabel = 8,\n' +
    '        Assignment = 16,\n' +
    '        TrueCondition = 32,\n' +
    '        FalseCondition = 64,\n' +
    '        SwitchClause = 128,\n' +
    '        ArrayMutation = 256,\n' +
    '        Call = 512,\n' +
    '        ReduceLabel = 1024,\n' +
    '        Referenced = 2048,\n' +
    '        Shared = 4096,\n' +
    '        Label = 12,\n' +
    '        Condition = 96\n' +
    '    }\n' +
    '    export type FlowNode = FlowStart | FlowLabel | FlowAssignment | FlowCondition | FlowSwitchClause | FlowArrayMutation | FlowCall | FlowReduceLabel;\n' +
    '    export interface FlowNodeBase {\n' +
    '        flags: FlowFlags;\n' +
    '        id?: number;\n' +
    '    }\n' +
    '    export interface FlowStart extends FlowNodeBase {\n' +
    '        node?: FunctionExpression | ArrowFunction | MethodDeclaration | GetAccessorDeclaration | SetAccessorDeclaration;\n' +
    '    }\n' +
    '    export interface FlowLabel extends FlowNodeBase {\n' +
    '        antecedents: FlowNode[] | undefined;\n' +
    '    }\n' +
    '    export interface FlowAssignment extends FlowNodeBase {\n' +
    '        node: Expression | VariableDeclaration | BindingElement;\n' +
    '        antecedent: FlowNode;\n' +
    '    }\n' +
    '    export interface FlowCall extends FlowNodeBase {\n' +
    '        node: CallExpression;\n' +
    '        antecedent: FlowNode;\n' +
    '    }\n' +
    '    export interface FlowCondition extends FlowNodeBase {\n' +
    '        node: Expression;\n' +
    '        antecedent: FlowNode;\n' +
    '    }\n' +
    '    export interface FlowSwitchClause extends FlowNodeBase {\n' +
    '        switchStatement: SwitchStatement;\n' +
    '        clauseStart: number;\n' +
    '        clauseEnd: number;\n' +
    '        antecedent: FlowNode;\n' +
    '    }\n' +
    '    export interface FlowArrayMutation extends FlowNodeBase {\n' +
    '        node: CallExpression | BinaryExpression;\n' +
    '        antecedent: FlowNode;\n' +
    '    }\n' +
    '    export interface FlowReduceLabel extends FlowNodeBase {\n' +
    '        target: FlowLabel;\n' +
    '        antecedents: FlowNode[];\n' +
    '        antecedent: FlowNode;\n' +
    '    }\n' +
    '    export type FlowType = Type | IncompleteType;\n' +
    '    export interface IncompleteType {\n' +
    '        flags: TypeFlags;\n' +
    '        type: Type;\n' +
    '    }\n' +
    '    export interface AmdDependency {\n' +
    '        path: string;\n' +
    '        name?: string;\n' +
    '    }\n' +
    '    /**\n' +
    '     * Subset of properties from SourceFile that are used in multiple utility functions\n' +
    '     */\n' +
    '    export interface SourceFileLike {\n' +
    '        readonly text: string;\n' +
    '    }\n' +
    '    export interface SourceFile extends Declaration {\n' +
    '        readonly kind: SyntaxKind.SourceFile;\n' +
    '        readonly statements: NodeArray<Statement>;\n' +
    '        readonly endOfFileToken: Token<SyntaxKind.EndOfFileToken>;\n' +
    '        fileName: string;\n' +
    '        text: string;\n' +
    '        amdDependencies: readonly AmdDependency[];\n' +
    '        moduleName?: string;\n' +
    '        referencedFiles: readonly FileReference[];\n' +
    '        typeReferenceDirectives: readonly FileReference[];\n' +
    '        libReferenceDirectives: readonly FileReference[];\n' +
    '        languageVariant: LanguageVariant;\n' +
    '        isDeclarationFile: boolean;\n' +
    '        /**\n' +
    '         * lib.d.ts should have a reference comment like\n' +
    '         *\n' +
    '         *  /// <reference no-default-lib="true"/>\n' +
    '         *\n' +
    '         * If any other file has this comment, it signals not to include lib.d.ts\n' +
    '         * because this containing file is intended to act as a default library.\n' +
    '         */\n' +
    '        hasNoDefaultLib: boolean;\n' +
    '        languageVersion: ScriptTarget;\n' +
    '        /**\n' +
    '         * When `module` is `Node16` or `NodeNext`, this field controls whether the\n' +
    '         * source file in question is an ESNext-output-format file, or a CommonJS-output-format\n' +
    '         * module. This is derived by the module resolver as it looks up the file, since\n' +
    '         * it is derived from either the file extension of the module, or the containing\n' +
    '         * `package.json` context, and affects both checking and emit.\n' +
    '         *\n' +
    '         * It is _public_ so that (pre)transformers can set this field,\n' +
    '         * since it switches the builtin `node` module transform. Generally speaking, if unset,\n' +
    '         * the field is treated as though it is `ModuleKind.CommonJS`.\n' +
    '         */\n' +
    '        impliedNodeFormat?: ModuleKind.ESNext | ModuleKind.CommonJS;\n' +
    '    }\n' +
    '    export interface Bundle extends Node {\n' +
    '        readonly kind: SyntaxKind.Bundle;\n' +
    '        readonly prepends: readonly (InputFiles | UnparsedSource)[];\n' +
    '        readonly sourceFiles: readonly SourceFile[];\n' +
    '    }\n' +
    '    export interface InputFiles extends Node {\n' +
    '        readonly kind: SyntaxKind.InputFiles;\n' +
    '        javascriptPath?: string;\n' +
    '        javascriptText: string;\n' +
    '        javascriptMapPath?: string;\n' +
    '        javascriptMapText?: string;\n' +
    '        declarationPath?: string;\n' +
    '        declarationText: string;\n' +
    '        declarationMapPath?: string;\n' +
    '        declarationMapText?: string;\n' +
    '    }\n' +
    '    export interface UnparsedSource extends Node {\n' +
    '        readonly kind: SyntaxKind.UnparsedSource;\n' +
    '        fileName: string;\n' +
    '        text: string;\n' +
    '        readonly prologues: readonly UnparsedPrologue[];\n' +
    '        helpers: readonly UnscopedEmitHelper[] | undefined;\n' +
    '        referencedFiles: readonly FileReference[];\n' +
    '        typeReferenceDirectives: readonly FileReference[] | undefined;\n' +
    '        libReferenceDirectives: readonly FileReference[];\n' +
    '        hasNoDefaultLib?: boolean;\n' +
    '        sourceMapPath?: string;\n' +
    '        sourceMapText?: string;\n' +
    '        readonly syntheticReferences?: readonly UnparsedSyntheticReference[];\n' +
    '        readonly texts: readonly UnparsedSourceText[];\n' +
    '    }\n' +
    '    export type UnparsedSourceText = UnparsedPrepend | UnparsedTextLike;\n' +
    '    export type UnparsedNode = UnparsedPrologue | UnparsedSourceText | UnparsedSyntheticReference;\n' +
    '    export interface UnparsedSection extends Node {\n' +
    '        readonly kind: SyntaxKind;\n' +
    '        readonly parent: UnparsedSource;\n' +
    '        readonly data?: string;\n' +
    '    }\n' +
    '    export interface UnparsedPrologue extends UnparsedSection {\n' +
    '        readonly kind: SyntaxKind.UnparsedPrologue;\n' +
    '        readonly parent: UnparsedSource;\n' +
    '        readonly data: string;\n' +
    '    }\n' +
    '    export interface UnparsedPrepend extends UnparsedSection {\n' +
    '        readonly kind: SyntaxKind.UnparsedPrepend;\n' +
    '        readonly parent: UnparsedSource;\n' +
    '        readonly data: string;\n' +
    '        readonly texts: readonly UnparsedTextLike[];\n' +
    '    }\n' +
    '    export interface UnparsedTextLike extends UnparsedSection {\n' +
    '        readonly kind: SyntaxKind.UnparsedText | SyntaxKind.UnparsedInternalText;\n' +
    '        readonly parent: UnparsedSource;\n' +
    '    }\n' +
    '    export interface UnparsedSyntheticReference extends UnparsedSection {\n' +
    '        readonly kind: SyntaxKind.UnparsedSyntheticReference;\n' +
    '        readonly parent: UnparsedSource;\n' +
    '    }\n' +
    '    export interface JsonSourceFile extends SourceFile {\n' +
    '        readonly statements: NodeArray<JsonObjectExpressionStatement>;\n' +
    '    }\n' +
    '    export interface TsConfigSourceFile extends JsonSourceFile {\n' +
    '        extendedSourceFiles?: string[];\n' +
    '    }\n' +
    '    export interface JsonMinusNumericLiteral extends PrefixUnaryExpression {\n' +
    '        readonly kind: SyntaxKind.PrefixUnaryExpression;\n' +
    '        readonly operator: SyntaxKind.MinusToken;\n' +
    '        readonly operand: NumericLiteral;\n' +
    '    }\n' +
    '    export type JsonObjectExpression = ObjectLiteralExpression | ArrayLiteralExpression | JsonMinusNumericLiteral | NumericLiteral | StringLiteral | BooleanLiteral | NullLiteral;\n' +
    '    export interface JsonObjectExpressionStatement extends ExpressionStatement {\n' +
    '        readonly expression: JsonObjectExpression;\n' +
    '    }\n' +
    '    export interface ScriptReferenceHost {\n' +
    '        getCompilerOptions(): CompilerOptions;\n' +
    '        getSourceFile(fileName: string): SourceFile | undefined;\n' +
    '        getSourceFileByPath(path: Path): SourceFile | undefined;\n' +
    '        getCurrentDirectory(): string;\n' +
    '    }\n' +
    '    export interface ParseConfigHost {\n' +
    '        useCaseSensitiveFileNames: boolean;\n' +
    '        readDirectory(rootDir: string, extensions: readonly string[], excludes: readonly string[] | undefined, includes: readonly string[], depth?: number): readonly string[];\n' +
    '        /**\n' +
    '         * Gets a value indicating whether the specified path exists and is a file.\n' +
    '         * @param path The path to test.\n' +
    '         */\n' +
    '        fileExists(path: string): boolean;\n' +
    '        readFile(path: string): string | undefined;\n' +
    '        trace?(s: string): void;\n' +
    '    }\n' +
    '    /**\n' +
    "     * Branded string for keeping track of when we've turned an ambiguous path\n" +
    '     * specified like "./blah" to an absolute path to an actual\n' +
    '     * tsconfig file, e.g. "/root/blah/tsconfig.json"\n' +
    '     */\n' +
    '    export type ResolvedConfigFileName = string & {\n' +
    '        _isResolvedConfigFileName: never;\n' +
    '    };\n' +
    '    export interface WriteFileCallbackData {\n' +
    '    }\n' +
    '    export type WriteFileCallback = (fileName: string, text: string, writeByteOrderMark: boolean, onError?: (message: string) => void, sourceFiles?: readonly SourceFile[], data?: WriteFileCallbackData) => void;\n' +
    '    export class OperationCanceledException {\n' +
    '    }\n' +
    '    export interface CancellationToken {\n' +
    '        isCancellationRequested(): boolean;\n' +
    '        /** @throws OperationCanceledException if isCancellationRequested is true */\n' +
    '        throwIfCancellationRequested(): void;\n' +
    '    }\n' +
    '    export interface Program extends ScriptReferenceHost {\n' +
    '        getCurrentDirectory(): string;\n' +
    '        /**\n' +
    "         * Get a list of root file names that were passed to a 'createProgram'\n" +
    '         */\n' +
    '        getRootFileNames(): readonly string[];\n' +
    '        /**\n' +
    '         * Get a list of files in the program\n' +
    '         */\n' +
    '        getSourceFiles(): readonly SourceFile[];\n' +
    '        /**\n' +
    '         * Emits the JavaScript and declaration files.  If targetSourceFile is not specified, then\n' +
    '         * the JavaScript and declaration files will be produced for all the files in this program.\n' +
    '         * If targetSourceFile is specified, then only the JavaScript and declaration for that\n' +
    '         * specific file will be generated.\n' +
    '         *\n' +
    '         * If writeFile is not specified then the writeFile callback from the compiler host will be\n' +
    '         * used for writing the JavaScript and declaration files.  Otherwise, the writeFile parameter\n' +
    '         * will be invoked when writing the JavaScript and declaration files.\n' +
    '         */\n' +
    '        emit(targetSourceFile?: SourceFile, writeFile?: WriteFileCallback, cancellationToken?: CancellationToken, emitOnlyDtsFiles?: boolean, customTransformers?: CustomTransformers): EmitResult;\n' +
    '        getOptionsDiagnostics(cancellationToken?: CancellationToken): readonly Diagnostic[];\n' +
    '        getGlobalDiagnostics(cancellationToken?: CancellationToken): readonly Diagnostic[];\n' +
    '        getSyntacticDiagnostics(sourceFile?: SourceFile, cancellationToken?: CancellationToken): readonly DiagnosticWithLocation[];\n' +
    '        /** The first time this is called, it will return global diagnostics (no location). */\n' +
    '        getSemanticDiagnostics(sourceFile?: SourceFile, cancellationToken?: CancellationToken): readonly Diagnostic[];\n' +
    '        getDeclarationDiagnostics(sourceFile?: SourceFile, cancellationToken?: CancellationToken): readonly DiagnosticWithLocation[];\n' +
    '        getConfigFileParsingDiagnostics(): readonly Diagnostic[];\n' +
    '        /**\n' +
    '         * Gets a type checker that can be used to semantically analyze source files in the program.\n' +
    '         */\n' +
    '        getTypeChecker(): TypeChecker;\n' +
    '        getNodeCount(): number;\n' +
    '        getIdentifierCount(): number;\n' +
    '        getSymbolCount(): number;\n' +
    '        getTypeCount(): number;\n' +
    '        getInstantiationCount(): number;\n' +
    '        getRelationCacheSizes(): {\n' +
    '            assignable: number;\n' +
    '            identity: number;\n' +
    '            subtype: number;\n' +
    '            strictSubtype: number;\n' +
    '        };\n' +
    '        isSourceFileFromExternalLibrary(file: SourceFile): boolean;\n' +
    '        isSourceFileDefaultLibrary(file: SourceFile): boolean;\n' +
    '        getProjectReferences(): readonly ProjectReference[] | undefined;\n' +
    '        getResolvedProjectReferences(): readonly (ResolvedProjectReference | undefined)[] | undefined;\n' +
    '    }\n' +
    '    export interface ResolvedProjectReference {\n' +
    '        commandLine: ParsedCommandLine;\n' +
    '        sourceFile: SourceFile;\n' +
    '        references?: readonly (ResolvedProjectReference | undefined)[];\n' +
    '    }\n' +
    '    export type CustomTransformerFactory = (context: TransformationContext) => CustomTransformer;\n' +
    '    export interface CustomTransformer {\n' +
    '        transformSourceFile(node: SourceFile): SourceFile;\n' +
    '        transformBundle(node: Bundle): Bundle;\n' +
    '    }\n' +
    '    export interface CustomTransformers {\n' +
    '        /** Custom transformers to evaluate before built-in .js transformations. */\n' +
    '        before?: (TransformerFactory<SourceFile> | CustomTransformerFactory)[];\n' +
    '        /** Custom transformers to evaluate after built-in .js transformations. */\n' +
    '        after?: (TransformerFactory<SourceFile> | CustomTransformerFactory)[];\n' +
    '        /** Custom transformers to evaluate after built-in .d.ts transformations. */\n' +
    '        afterDeclarations?: (TransformerFactory<Bundle | SourceFile> | CustomTransformerFactory)[];\n' +
    '    }\n' +
    '    export interface SourceMapSpan {\n' +
    '        /** Line number in the .js file. */\n' +
    '        emittedLine: number;\n' +
    '        /** Column number in the .js file. */\n' +
    '        emittedColumn: number;\n' +
    '        /** Line number in the .ts file. */\n' +
    '        sourceLine: number;\n' +
    '        /** Column number in the .ts file. */\n' +
    '        sourceColumn: number;\n' +
    '        /** Optional name (index into names array) associated with this span. */\n' +
    '        nameIndex?: number;\n' +
    '        /** .ts file (index into sources array) associated with this span */\n' +
    '        sourceIndex: number;\n' +
    '    }\n' +
    '    /** Return code used by getEmitOutput function to indicate status of the function */\n' +
    '    export enum ExitStatus {\n' +
    '        Success = 0,\n' +
    '        DiagnosticsPresent_OutputsSkipped = 1,\n' +
    '        DiagnosticsPresent_OutputsGenerated = 2,\n' +
    '        InvalidProject_OutputsSkipped = 3,\n' +
    '        ProjectReferenceCycle_OutputsSkipped = 4,\n' +
    '        /** @deprecated Use ProjectReferenceCycle_OutputsSkipped instead. */\n' +
    '        ProjectReferenceCycle_OutputsSkupped = 4\n' +
    '    }\n' +
    '    export interface EmitResult {\n' +
    '        emitSkipped: boolean;\n' +
    '        /** Contains declaration emit diagnostics */\n' +
    '        diagnostics: readonly Diagnostic[];\n' +
    '        emittedFiles?: string[];\n' +
    '    }\n' +
    '    export interface TypeChecker {\n' +
    '        getTypeOfSymbolAtLocation(symbol: Symbol, node: Node): Type;\n' +
    '        getDeclaredTypeOfSymbol(symbol: Symbol): Type;\n' +
    '        getPropertiesOfType(type: Type): Symbol[];\n' +
    '        getPropertyOfType(type: Type, propertyName: string): Symbol | undefined;\n' +
    '        getPrivateIdentifierPropertyOfType(leftType: Type, name: string, location: Node): Symbol | undefined;\n' +
    '        getIndexInfoOfType(type: Type, kind: IndexKind): IndexInfo | undefined;\n' +
    '        getIndexInfosOfType(type: Type): readonly IndexInfo[];\n' +
    '        getSignaturesOfType(type: Type, kind: SignatureKind): readonly Signature[];\n' +
    '        getIndexTypeOfType(type: Type, kind: IndexKind): Type | undefined;\n' +
    '        getBaseTypes(type: InterfaceType): BaseType[];\n' +
    '        getBaseTypeOfLiteralType(type: Type): Type;\n' +
    '        getWidenedType(type: Type): Type;\n' +
    '        getReturnTypeOfSignature(signature: Signature): Type;\n' +
    '        getNullableType(type: Type, flags: TypeFlags): Type;\n' +
    '        getNonNullableType(type: Type): Type;\n' +
    '        getTypeArguments(type: TypeReference): readonly Type[];\n' +
    '        /** Note that the resulting nodes cannot be checked. */\n' +
    '        typeToTypeNode(type: Type, enclosingDeclaration: Node | undefined, flags: NodeBuilderFlags | undefined): TypeNode | undefined;\n' +
    '        /** Note that the resulting nodes cannot be checked. */\n' +
    '        signatureToSignatureDeclaration(signature: Signature, kind: SyntaxKind, enclosingDeclaration: Node | undefined, flags: NodeBuilderFlags | undefined): SignatureDeclaration & {\n' +
    '            typeArguments?: NodeArray<TypeNode>;\n' +
    '        } | undefined;\n' +
    '        /** Note that the resulting nodes cannot be checked. */\n' +
    '        indexInfoToIndexSignatureDeclaration(indexInfo: IndexInfo, enclosingDeclaration: Node | undefined, flags: NodeBuilderFlags | undefined): IndexSignatureDeclaration | undefined;\n' +
    '        /** Note that the resulting nodes cannot be checked. */\n' +
    '        symbolToEntityName(symbol: Symbol, meaning: SymbolFlags, enclosingDeclaration: Node | undefined, flags: NodeBuilderFlags | undefined): EntityName | undefined;\n' +
    '        /** Note that the resulting nodes cannot be checked. */\n' +
    '        symbolToExpression(symbol: Symbol, meaning: SymbolFlags, enclosingDeclaration: Node | undefined, flags: NodeBuilderFlags | undefined): Expression | undefined;\n' +
    '        /** Note that the resulting nodes cannot be checked. */\n' +
    '        symbolToTypeParameterDeclarations(symbol: Symbol, enclosingDeclaration: Node | undefined, flags: NodeBuilderFlags | undefined): NodeArray<TypeParameterDeclaration> | undefined;\n' +
    '        /** Note that the resulting nodes cannot be checked. */\n' +
    '        symbolToParameterDeclaration(symbol: Symbol, enclosingDeclaration: Node | undefined, flags: NodeBuilderFlags | undefined): ParameterDeclaration | undefined;\n' +
    '        /** Note that the resulting nodes cannot be checked. */\n' +
    '        typeParameterToDeclaration(parameter: TypeParameter, enclosingDeclaration: Node | undefined, flags: NodeBuilderFlags | undefined): TypeParameterDeclaration | undefined;\n' +
    '        getSymbolsInScope(location: Node, meaning: SymbolFlags): Symbol[];\n' +
    '        getSymbolAtLocation(node: Node): Symbol | undefined;\n' +
    '        getSymbolsOfParameterPropertyDeclaration(parameter: ParameterDeclaration, parameterName: string): Symbol[];\n' +
    '        /**\n' +
    '         * The function returns the value (local variable) symbol of an identifier in the short-hand property assignment.\n' +
    '         * This is necessary as an identifier in short-hand property assignment can contains two meaning: property name and property value.\n' +
    '         */\n' +
    '        getShorthandAssignmentValueSymbol(location: Node | undefined): Symbol | undefined;\n' +
    '        getExportSpecifierLocalTargetSymbol(location: ExportSpecifier | Identifier): Symbol | undefined;\n' +
    '        /**\n' +
    '         * If a symbol is a local symbol with an associated exported symbol, returns the exported symbol.\n' +
    '         * Otherwise returns its input.\n' +
    '         * For example, at `export type T = number;`:\n' +
    '         *     - `getSymbolAtLocation` at the location `T` will return the exported symbol for `T`.\n' +
    '         *     - But the result of `getSymbolsInScope` will contain the *local* symbol for `T`, not the exported symbol.\n' +
    '         *     - Calling `getExportSymbolOfSymbol` on that local symbol will return the exported symbol.\n' +
    '         */\n' +
    '        getExportSymbolOfSymbol(symbol: Symbol): Symbol;\n' +
    '        getPropertySymbolOfDestructuringAssignment(location: Identifier): Symbol | undefined;\n' +
    '        getTypeOfAssignmentPattern(pattern: AssignmentPattern): Type;\n' +
    '        getTypeAtLocation(node: Node): Type;\n' +
    '        getTypeFromTypeNode(node: TypeNode): Type;\n' +
    '        signatureToString(signature: Signature, enclosingDeclaration?: Node, flags?: TypeFormatFlags, kind?: SignatureKind): string;\n' +
    '        typeToString(type: Type, enclosingDeclaration?: Node, flags?: TypeFormatFlags): string;\n' +
    '        symbolToString(symbol: Symbol, enclosingDeclaration?: Node, meaning?: SymbolFlags, flags?: SymbolFormatFlags): string;\n' +
    '        typePredicateToString(predicate: TypePredicate, enclosingDeclaration?: Node, flags?: TypeFormatFlags): string;\n' +
    '        getFullyQualifiedName(symbol: Symbol): string;\n' +
    '        getAugmentedPropertiesOfType(type: Type): Symbol[];\n' +
    '        getRootSymbols(symbol: Symbol): readonly Symbol[];\n' +
    '        getSymbolOfExpando(node: Node, allowDeclaration: boolean): Symbol | undefined;\n' +
    '        getContextualType(node: Expression): Type | undefined;\n' +
    '        /**\n' +
    '         * returns unknownSignature in the case of an error.\n' +
    '         * returns undefined if the node is not valid.\n' +
    '         * @param argumentCount Apparent number of arguments, passed in case of a possibly incomplete call. This should come from an ArgumentListInfo. See `signatureHelp.ts`.\n' +
    '         */\n' +
    '        getResolvedSignature(node: CallLikeExpression, candidatesOutArray?: Signature[], argumentCount?: number): Signature | undefined;\n' +
    '        getSignatureFromDeclaration(declaration: SignatureDeclaration): Signature | undefined;\n' +
    '        isImplementationOfOverload(node: SignatureDeclaration): boolean | undefined;\n' +
    '        isUndefinedSymbol(symbol: Symbol): boolean;\n' +
    '        isArgumentsSymbol(symbol: Symbol): boolean;\n' +
    '        isUnknownSymbol(symbol: Symbol): boolean;\n' +
    '        getConstantValue(node: EnumMember | PropertyAccessExpression | ElementAccessExpression): string | number | undefined;\n' +
    '        isValidPropertyAccess(node: PropertyAccessExpression | QualifiedName | ImportTypeNode, propertyName: string): boolean;\n' +
    '        /** Follow all aliases to get the original symbol. */\n' +
    '        getAliasedSymbol(symbol: Symbol): Symbol;\n' +
    '        /** Follow a *single* alias to get the immediately aliased symbol. */\n' +
    '        getImmediateAliasedSymbol(symbol: Symbol): Symbol | undefined;\n' +
    '        getExportsOfModule(moduleSymbol: Symbol): Symbol[];\n' +
    '        getJsxIntrinsicTagNamesAt(location: Node): Symbol[];\n' +
    '        isOptionalParameter(node: ParameterDeclaration): boolean;\n' +
    '        getAmbientModules(): Symbol[];\n' +
    '        tryGetMemberInModuleExports(memberName: string, moduleSymbol: Symbol): Symbol | undefined;\n' +
    '        getApparentType(type: Type): Type;\n' +
    '        getBaseConstraintOfType(type: Type): Type | undefined;\n' +
    '        getDefaultFromTypeParameter(type: Type): Type | undefined;\n' +
    '        getTypePredicateOfSignature(signature: Signature): TypePredicate | undefined;\n' +
    '        /**\n' +
    '         * Depending on the operation performed, it may be appropriate to throw away the checker\n' +
    '         * if the cancellation token is triggered. Typically, if it is used for error checking\n' +
    '         * and the operation is cancelled, then it should be discarded, otherwise it is safe to keep.\n' +
    '         */\n' +
    '        runWithCancellationToken<T>(token: CancellationToken, cb: (checker: TypeChecker) => T): T;\n' +
    '    }\n' +
    '    export enum NodeBuilderFlags {\n' +
    '        None = 0,\n' +
    '        NoTruncation = 1,\n' +
    '        WriteArrayAsGenericType = 2,\n' +
    '        GenerateNamesForShadowedTypeParams = 4,\n' +
    '        UseStructuralFallback = 8,\n' +
    '        ForbidIndexedAccessSymbolReferences = 16,\n' +
    '        WriteTypeArgumentsOfSignature = 32,\n' +
    '        UseFullyQualifiedType = 64,\n' +
    '        UseOnlyExternalAliasing = 128,\n' +
    '        SuppressAnyReturnType = 256,\n' +
    '        WriteTypeParametersInQualifiedName = 512,\n' +
    '        MultilineObjectLiterals = 1024,\n' +
    '        WriteClassExpressionAsTypeLiteral = 2048,\n' +
    '        UseTypeOfFunction = 4096,\n' +
    '        OmitParameterModifiers = 8192,\n' +
    '        UseAliasDefinedOutsideCurrentScope = 16384,\n' +
    '        UseSingleQuotesForStringLiteralType = 268435456,\n' +
    '        NoTypeReduction = 536870912,\n' +
    '        AllowThisInObjectLiteral = 32768,\n' +
    '        AllowQualifiedNameInPlaceOfIdentifier = 65536,\n' +
    '        /** @deprecated AllowQualifedNameInPlaceOfIdentifier. Use AllowQualifiedNameInPlaceOfIdentifier instead. */\n' +
    '        AllowQualifedNameInPlaceOfIdentifier = 65536,\n' +
    '        AllowAnonymousIdentifier = 131072,\n' +
    '        AllowEmptyUnionOrIntersection = 262144,\n' +
    '        AllowEmptyTuple = 524288,\n' +
    '        AllowUniqueESSymbolType = 1048576,\n' +
    '        AllowEmptyIndexInfoType = 2097152,\n' +
    '        AllowNodeModulesRelativePaths = 67108864,\n' +
    '        IgnoreErrors = 70221824,\n' +
    '        InObjectTypeLiteral = 4194304,\n' +
    '        InTypeAlias = 8388608,\n' +
    '        InInitialEntityName = 16777216\n' +
    '    }\n' +
    '    export enum TypeFormatFlags {\n' +
    '        None = 0,\n' +
    '        NoTruncation = 1,\n' +
    '        WriteArrayAsGenericType = 2,\n' +
    '        UseStructuralFallback = 8,\n' +
    '        WriteTypeArgumentsOfSignature = 32,\n' +
    '        UseFullyQualifiedType = 64,\n' +
    '        SuppressAnyReturnType = 256,\n' +
    '        MultilineObjectLiterals = 1024,\n' +
    '        WriteClassExpressionAsTypeLiteral = 2048,\n' +
    '        UseTypeOfFunction = 4096,\n' +
    '        OmitParameterModifiers = 8192,\n' +
    '        UseAliasDefinedOutsideCurrentScope = 16384,\n' +
    '        UseSingleQuotesForStringLiteralType = 268435456,\n' +
    '        NoTypeReduction = 536870912,\n' +
    '        AllowUniqueESSymbolType = 1048576,\n' +
    '        AddUndefined = 131072,\n' +
    '        WriteArrowStyleSignature = 262144,\n' +
    '        InArrayType = 524288,\n' +
    '        InElementType = 2097152,\n' +
    '        InFirstTypeArgument = 4194304,\n' +
    '        InTypeAlias = 8388608,\n' +
    '        /** @deprecated */ WriteOwnNameForAnyLike = 0,\n' +
    '        NodeBuilderFlagsMask = 814775659\n' +
    '    }\n' +
    '    export enum SymbolFormatFlags {\n' +
    '        None = 0,\n' +
    '        WriteTypeParametersOrArguments = 1,\n' +
    '        UseOnlyExternalAliasing = 2,\n' +
    '        AllowAnyNodeKind = 4,\n' +
    '        UseAliasDefinedOutsideCurrentScope = 8,\n' +
    '    }\n' +
    '    export enum TypePredicateKind {\n' +
    '        This = 0,\n' +
    '        Identifier = 1,\n' +
    '        AssertsThis = 2,\n' +
    '        AssertsIdentifier = 3\n' +
    '    }\n' +
    '    export interface TypePredicateBase {\n' +
    '        kind: TypePredicateKind;\n' +
    '        type: Type | undefined;\n' +
    '    }\n' +
    '    export interface ThisTypePredicate extends TypePredicateBase {\n' +
    '        kind: TypePredicateKind.This;\n' +
    '        parameterName: undefined;\n' +
    '        parameterIndex: undefined;\n' +
    '        type: Type;\n' +
    '    }\n' +
    '    export interface IdentifierTypePredicate extends TypePredicateBase {\n' +
    '        kind: TypePredicateKind.Identifier;\n' +
    '        parameterName: string;\n' +
    '        parameterIndex: number;\n' +
    '        type: Type;\n' +
    '    }\n' +
    '    export interface AssertsThisTypePredicate extends TypePredicateBase {\n' +
    '        kind: TypePredicateKind.AssertsThis;\n' +
    '        parameterName: undefined;\n' +
    '        parameterIndex: undefined;\n' +
    '        type: Type | undefined;\n' +
    '    }\n' +
    '    export interface AssertsIdentifierTypePredicate extends TypePredicateBase {\n' +
    '        kind: TypePredicateKind.AssertsIdentifier;\n' +
    '        parameterName: string;\n' +
    '        parameterIndex: number;\n' +
    '        type: Type | undefined;\n' +
    '    }\n' +
    '    export type TypePredicate = ThisTypePredicate | IdentifierTypePredicate | AssertsThisTypePredicate | AssertsIdentifierTypePredicate;\n' +
    '    export enum SymbolFlags {\n' +
    '        None = 0,\n' +
    '        FunctionScopedVariable = 1,\n' +
    '        BlockScopedVariable = 2,\n' +
    '        Property = 4,\n' +
    '        EnumMember = 8,\n' +
    '        Function = 16,\n' +
    '        Class = 32,\n' +
    '        Interface = 64,\n' +
    '        ConstEnum = 128,\n' +
    '        RegularEnum = 256,\n' +
    '        ValueModule = 512,\n' +
    '        NamespaceModule = 1024,\n' +
    '        TypeLiteral = 2048,\n' +
    '        ObjectLiteral = 4096,\n' +
    '        Method = 8192,\n' +
    '        Constructor = 16384,\n' +
    '        GetAccessor = 32768,\n' +
    '        SetAccessor = 65536,\n' +
    '        Signature = 131072,\n' +
    '        TypeParameter = 262144,\n' +
    '        TypeAlias = 524288,\n' +
    '        ExportValue = 1048576,\n' +
    '        Alias = 2097152,\n' +
    '        Prototype = 4194304,\n' +
    '        ExportStar = 8388608,\n' +
    '        Optional = 16777216,\n' +
    '        Transient = 33554432,\n' +
    '        Assignment = 67108864,\n' +
    '        ModuleExports = 134217728,\n' +
    '        Enum = 384,\n' +
    '        Variable = 3,\n' +
    '        Value = 111551,\n' +
    '        Type = 788968,\n' +
    '        Namespace = 1920,\n' +
    '        Module = 1536,\n' +
    '        Accessor = 98304,\n' +
    '        FunctionScopedVariableExcludes = 111550,\n' +
    '        BlockScopedVariableExcludes = 111551,\n' +
    '        ParameterExcludes = 111551,\n' +
    '        PropertyExcludes = 0,\n' +
    '        EnumMemberExcludes = 900095,\n' +
    '        FunctionExcludes = 110991,\n' +
    '        ClassExcludes = 899503,\n' +
    '        InterfaceExcludes = 788872,\n' +
    '        RegularEnumExcludes = 899327,\n' +
    '        ConstEnumExcludes = 899967,\n' +
    '        ValueModuleExcludes = 110735,\n' +
    '        NamespaceModuleExcludes = 0,\n' +
    '        MethodExcludes = 103359,\n' +
    '        GetAccessorExcludes = 46015,\n' +
    '        SetAccessorExcludes = 78783,\n' +
    '        TypeParameterExcludes = 526824,\n' +
    '        TypeAliasExcludes = 788968,\n' +
    '        AliasExcludes = 2097152,\n' +
    '        ModuleMember = 2623475,\n' +
    '        ExportHasLocal = 944,\n' +
    '        BlockScoped = 418,\n' +
    '        PropertyOrAccessor = 98308,\n' +
    '        ClassMember = 106500,\n' +
    '    }\n' +
    '    export interface Symbol {\n' +
    '        flags: SymbolFlags;\n' +
    '        escapedName: __String;\n' +
    '        declarations?: Declaration[];\n' +
    '        valueDeclaration?: Declaration;\n' +
    '        members?: SymbolTable;\n' +
    '        exports?: SymbolTable;\n' +
    '        globalExports?: SymbolTable;\n' +
    '    }\n' +
    '    export enum InternalSymbolName {\n' +
    '        Call = "__call",\n' +
    '        Constructor = "__constructor",\n' +
    '        New = "__new",\n' +
    '        Index = "__index",\n' +
    '        ExportStar = "__export",\n' +
    '        Global = "__global",\n' +
    '        Missing = "__missing",\n' +
    '        Type = "__type",\n' +
    '        Object = "__object",\n' +
    '        JSXAttributes = "__jsxAttributes",\n' +
    '        Class = "__class",\n' +
    '        Function = "__function",\n' +
    '        Computed = "__computed",\n' +
    '        Resolving = "__resolving__",\n' +
    '        ExportEquals = "export=",\n' +
    '        Default = "default",\n' +
    '        This = "this"\n' +
    '    }\n' +
    '    /**\n' +
    '     * This represents a string whose leading underscore have been escaped by adding extra leading underscores.\n' +
    "     * The shape of this brand is rather unique compared to others we've used.\n" +
    '     * Instead of just an intersection of a string and an object, it is that union-ed\n' +
    '     * with an intersection of void and an object. This makes it wholly incompatible\n' +
    '     * with a normal string (which is good, it cannot be misused on assignment or on usage),\n' +
    '     * while still being comparable with a normal string via === (also good) and castable from a string.\n' +
    '     */\n' +
    '    export type __String = (string & {\n' +
    '        __escapedIdentifier: void;\n' +
    '    }) | (void & {\n' +
    '        __escapedIdentifier: void;\n' +
    '    }) | InternalSymbolName;\n' +
    '    /** ReadonlyMap where keys are `__String`s. */\n' +
    '    export interface ReadonlyUnderscoreEscapedMap<T> extends ReadonlyESMap<__String, T> {\n' +
    '    }\n' +
    '    /** Map where keys are `__String`s. */\n' +
    '    export interface UnderscoreEscapedMap<T> extends ESMap<__String, T>, ReadonlyUnderscoreEscapedMap<T> {\n' +
    '    }\n' +
    '    /** SymbolTable based on ES6 Map interface. */\n' +
    '    export type SymbolTable = UnderscoreEscapedMap<Symbol>;\n' +
    '    export enum TypeFlags {\n' +
    '        Any = 1,\n' +
    '        Unknown = 2,\n' +
    '        String = 4,\n' +
    '        Number = 8,\n' +
    '        Boolean = 16,\n' +
    '        Enum = 32,\n' +
    '        BigInt = 64,\n' +
    '        StringLiteral = 128,\n' +
    '        NumberLiteral = 256,\n' +
    '        BooleanLiteral = 512,\n' +
    '        EnumLiteral = 1024,\n' +
    '        BigIntLiteral = 2048,\n' +
    '        ESSymbol = 4096,\n' +
    '        UniqueESSymbol = 8192,\n' +
    '        Void = 16384,\n' +
    '        Undefined = 32768,\n' +
    '        Null = 65536,\n' +
    '        Never = 131072,\n' +
    '        TypeParameter = 262144,\n' +
    '        Object = 524288,\n' +
    '        Union = 1048576,\n' +
    '        Intersection = 2097152,\n' +
    '        Index = 4194304,\n' +
    '        IndexedAccess = 8388608,\n' +
    '        Conditional = 16777216,\n' +
    '        Substitution = 33554432,\n' +
    '        NonPrimitive = 67108864,\n' +
    '        TemplateLiteral = 134217728,\n' +
    '        StringMapping = 268435456,\n' +
    '        Literal = 2944,\n' +
    '        Unit = 109440,\n' +
    '        StringOrNumberLiteral = 384,\n' +
    '        PossiblyFalsy = 117724,\n' +
    '        StringLike = 402653316,\n' +
    '        NumberLike = 296,\n' +
    '        BigIntLike = 2112,\n' +
    '        BooleanLike = 528,\n' +
    '        EnumLike = 1056,\n' +
    '        ESSymbolLike = 12288,\n' +
    '        VoidLike = 49152,\n' +
    '        UnionOrIntersection = 3145728,\n' +
    '        StructuredType = 3670016,\n' +
    '        TypeVariable = 8650752,\n' +
    '        InstantiableNonPrimitive = 58982400,\n' +
    '        InstantiablePrimitive = 406847488,\n' +
    '        Instantiable = 465829888,\n' +
    '        StructuredOrInstantiable = 469499904,\n' +
    '        Narrowable = 536624127,\n' +
    '    }\n' +
    '    export type DestructuringPattern = BindingPattern | ObjectLiteralExpression | ArrayLiteralExpression;\n' +
    '    export interface Type {\n' +
    '        flags: TypeFlags;\n' +
    '        symbol: Symbol;\n' +
    '        pattern?: DestructuringPattern;\n' +
    '        aliasSymbol?: Symbol;\n' +
    '        aliasTypeArguments?: readonly Type[];\n' +
    '    }\n' +
    '    export interface LiteralType extends Type {\n' +
    '        value: string | number | PseudoBigInt;\n' +
    '        freshType: LiteralType;\n' +
    '        regularType: LiteralType;\n' +
    '    }\n' +
    '    export interface UniqueESSymbolType extends Type {\n' +
    '        symbol: Symbol;\n' +
    '        escapedName: __String;\n' +
    '    }\n' +
    '    export interface StringLiteralType extends LiteralType {\n' +
    '        value: string;\n' +
    '    }\n' +
    '    export interface NumberLiteralType extends LiteralType {\n' +
    '        value: number;\n' +
    '    }\n' +
    '    export interface BigIntLiteralType extends LiteralType {\n' +
    '        value: PseudoBigInt;\n' +
    '    }\n' +
    '    export interface EnumType extends Type {\n' +
    '    }\n' +
    '    export enum ObjectFlags {\n' +
    '        Class = 1,\n' +
    '        Interface = 2,\n' +
    '        Reference = 4,\n' +
    '        Tuple = 8,\n' +
    '        Anonymous = 16,\n' +
    '        Mapped = 32,\n' +
    '        Instantiated = 64,\n' +
    '        ObjectLiteral = 128,\n' +
    '        EvolvingArray = 256,\n' +
    '        ObjectLiteralPatternWithComputedProperties = 512,\n' +
    '        ReverseMapped = 1024,\n' +
    '        JsxAttributes = 2048,\n' +
    '        JSLiteral = 4096,\n' +
    '        FreshLiteral = 8192,\n' +
    '        ArrayLiteral = 16384,\n' +
    '        ClassOrInterface = 3,\n' +
    '        ContainsSpread = 2097152,\n' +
    '        ObjectRestType = 4194304,\n' +
    '        InstantiationExpressionType = 8388608,\n' +
    '    }\n' +
    '    export interface ObjectType extends Type {\n' +
    '        objectFlags: ObjectFlags;\n' +
    '    }\n' +
    '    /** Class and interface types (ObjectFlags.Class and ObjectFlags.Interface). */\n' +
    '    export interface InterfaceType extends ObjectType {\n' +
    '        typeParameters: TypeParameter[] | undefined;\n' +
    '        outerTypeParameters: TypeParameter[] | undefined;\n' +
    '        localTypeParameters: TypeParameter[] | undefined;\n' +
    '        thisType: TypeParameter | undefined;\n' +
    '    }\n' +
    '    export type BaseType = ObjectType | IntersectionType | TypeVariable;\n' +
    '    export interface InterfaceTypeWithDeclaredMembers extends InterfaceType {\n' +
    '        declaredProperties: Symbol[];\n' +
    '        declaredCallSignatures: Signature[];\n' +
    '        declaredConstructSignatures: Signature[];\n' +
    '        declaredIndexInfos: IndexInfo[];\n' +
    '    }\n' +
    '    /**\n' +
    '     * Type references (ObjectFlags.Reference). When a class or interface has type parameters or\n' +
    '     * a "this" type, references to the class or interface are made using type references. The\n' +
    '     * typeArguments property specifies the types to substitute for the type parameters of the\n' +
    '     * class or interface and optionally includes an extra element that specifies the type to\n' +
    '     * substitute for "this" in the resulting instantiation. When no extra argument is present,\n' +
    '     * the type reference itself is substituted for "this". The typeArguments property is undefined\n' +
    "     * if the class or interface has no type parameters and the reference isn't specifying an\n" +
    '     * explicit "this" argument.\n' +
    '     */\n' +
    '    export interface TypeReference extends ObjectType {\n' +
    '        target: GenericType;\n' +
    '        node?: TypeReferenceNode | ArrayTypeNode | TupleTypeNode;\n' +
    '    }\n' +
    '    export interface DeferredTypeReference extends TypeReference {\n' +
    '    }\n' +
    '    export interface GenericType extends InterfaceType, TypeReference {\n' +
    '    }\n' +
    '    export enum ElementFlags {\n' +
    '        Required = 1,\n' +
    '        Optional = 2,\n' +
    '        Rest = 4,\n' +
    '        Variadic = 8,\n' +
    '        Fixed = 3,\n' +
    '        Variable = 12,\n' +
    '        NonRequired = 14,\n' +
    '        NonRest = 11\n' +
    '    }\n' +
    '    export interface TupleType extends GenericType {\n' +
    '        elementFlags: readonly ElementFlags[];\n' +
    '        minLength: number;\n' +
    '        fixedLength: number;\n' +
    '        hasRestElement: boolean;\n' +
    '        combinedFlags: ElementFlags;\n' +
    '        readonly: boolean;\n' +
    '        labeledElementDeclarations?: readonly (NamedTupleMember | ParameterDeclaration)[];\n' +
    '    }\n' +
    '    export interface TupleTypeReference extends TypeReference {\n' +
    '        target: TupleType;\n' +
    '    }\n' +
    '    export interface UnionOrIntersectionType extends Type {\n' +
    '        types: Type[];\n' +
    '    }\n' +
    '    export interface UnionType extends UnionOrIntersectionType {\n' +
    '    }\n' +
    '    export interface IntersectionType extends UnionOrIntersectionType {\n' +
    '    }\n' +
    '    export type StructuredType = ObjectType | UnionType | IntersectionType;\n' +
    '    export interface EvolvingArrayType extends ObjectType {\n' +
    '        elementType: Type;\n' +
    '        finalArrayType?: Type;\n' +
    '    }\n' +
    '    export interface InstantiableType extends Type {\n' +
    '    }\n' +
    '    export interface TypeParameter extends InstantiableType {\n' +
    '    }\n' +
    '    export interface IndexedAccessType extends InstantiableType {\n' +
    '        objectType: Type;\n' +
    '        indexType: Type;\n' +
    '        constraint?: Type;\n' +
    '        simplifiedForReading?: Type;\n' +
    '        simplifiedForWriting?: Type;\n' +
    '    }\n' +
    '    export type TypeVariable = TypeParameter | IndexedAccessType;\n' +
    '    export interface IndexType extends InstantiableType {\n' +
    '        type: InstantiableType | UnionOrIntersectionType;\n' +
    '    }\n' +
    '    export interface ConditionalRoot {\n' +
    '        node: ConditionalTypeNode;\n' +
    '        checkType: Type;\n' +
    '        extendsType: Type;\n' +
    '        isDistributive: boolean;\n' +
    '        inferTypeParameters?: TypeParameter[];\n' +
    '        outerTypeParameters?: TypeParameter[];\n' +
    '        instantiations?: Map<Type>;\n' +
    '        aliasSymbol?: Symbol;\n' +
    '        aliasTypeArguments?: Type[];\n' +
    '    }\n' +
    '    export interface ConditionalType extends InstantiableType {\n' +
    '        root: ConditionalRoot;\n' +
    '        checkType: Type;\n' +
    '        extendsType: Type;\n' +
    '        resolvedTrueType?: Type;\n' +
    '        resolvedFalseType?: Type;\n' +
    '    }\n' +
    '    export interface TemplateLiteralType extends InstantiableType {\n' +
    '        texts: readonly string[];\n' +
    '        types: readonly Type[];\n' +
    '    }\n' +
    '    export interface StringMappingType extends InstantiableType {\n' +
    '        symbol: Symbol;\n' +
    '        type: Type;\n' +
    '    }\n' +
    '    export interface SubstitutionType extends InstantiableType {\n' +
    '        objectFlags: ObjectFlags;\n' +
    '        baseType: Type;\n' +
    '        substitute: Type;\n' +
    '    }\n' +
    '    export enum SignatureKind {\n' +
    '        Call = 0,\n' +
    '        Construct = 1\n' +
    '    }\n' +
    '    export interface Signature {\n' +
    '        declaration?: SignatureDeclaration | JSDocSignature;\n' +
    '        typeParameters?: readonly TypeParameter[];\n' +
    '        parameters: readonly Symbol[];\n' +
    '    }\n' +
    '    export enum IndexKind {\n' +
    '        String = 0,\n' +
    '        Number = 1\n' +
    '    }\n' +
    '    export interface IndexInfo {\n' +
    '        keyType: Type;\n' +
    '        type: Type;\n' +
    '        isReadonly: boolean;\n' +
    '        declaration?: IndexSignatureDeclaration;\n' +
    '    }\n' +
    '    export enum InferencePriority {\n' +
    '        NakedTypeVariable = 1,\n' +
    '        SpeculativeTuple = 2,\n' +
    '        SubstituteSource = 4,\n' +
    '        HomomorphicMappedType = 8,\n' +
    '        PartialHomomorphicMappedType = 16,\n' +
    '        MappedTypeConstraint = 32,\n' +
    '        ContravariantConditional = 64,\n' +
    '        ReturnType = 128,\n' +
    '        LiteralKeyof = 256,\n' +
    '        NoConstraints = 512,\n' +
    '        AlwaysStrict = 1024,\n' +
    '        MaxValue = 2048,\n' +
    '        PriorityImpliesCombination = 416,\n' +
    '        Circularity = -1\n' +
    '    }\n' +
    '    /** @deprecated Use FileExtensionInfo instead. */\n' +
    '    export type JsFileExtensionInfo = FileExtensionInfo;\n' +
    '    export interface FileExtensionInfo {\n' +
    '        extension: string;\n' +
    '        isMixedContent: boolean;\n' +
    '        scriptKind?: ScriptKind;\n' +
    '    }\n' +
    '    export interface DiagnosticMessage {\n' +
    '        key: string;\n' +
    '        category: DiagnosticCategory;\n' +
    '        code: number;\n' +
    '        message: string;\n' +
    '        reportsUnnecessary?: {};\n' +
    '        reportsDeprecated?: {};\n' +
    '    }\n' +
    '    /**\n' +
    '     * A linked list of formatted diagnostic messages to be used as part of a multiline message.\n' +
    '     * It is built from the bottom up, leaving the head to be the "main" diagnostic.\n' +
    '     * While it seems that DiagnosticMessageChain is structurally similar to DiagnosticMessage,\n' +
    '     * the difference is that messages are all preformatted in DMC.\n' +
    '     */\n' +
    '    export interface DiagnosticMessageChain {\n' +
    '        messageText: string;\n' +
    '        category: DiagnosticCategory;\n' +
    '        code: number;\n' +
    '        next?: DiagnosticMessageChain[];\n' +
    '    }\n' +
    '    export interface Diagnostic extends DiagnosticRelatedInformation {\n' +
    '        /** May store more in future. For now, this will simply be `true` to indicate when a diagnostic is an unused-identifier diagnostic. */\n' +
    '        reportsUnnecessary?: {};\n' +
    '        reportsDeprecated?: {};\n' +
    '        source?: string;\n' +
    '        relatedInformation?: DiagnosticRelatedInformation[];\n' +
    '    }\n' +
    '    export interface DiagnosticRelatedInformation {\n' +
    '        category: DiagnosticCategory;\n' +
    '        code: number;\n' +
    '        file: SourceFile | undefined;\n' +
    '        start: number | undefined;\n' +
    '        length: number | undefined;\n' +
    '        messageText: string | DiagnosticMessageChain;\n' +
    '    }\n' +
    '    export interface DiagnosticWithLocation extends Diagnostic {\n' +
    '        file: SourceFile;\n' +
    '        start: number;\n' +
    '        length: number;\n' +
    '    }\n' +
    '    export enum DiagnosticCategory {\n' +
    '        Warning = 0,\n' +
    '        Error = 1,\n' +
    '        Suggestion = 2,\n' +
    '        Message = 3\n' +
    '    }\n' +
    '    export enum ModuleResolutionKind {\n' +
    '        Classic = 1,\n' +
    '        NodeJs = 2,\n' +
    '        Node16 = 3,\n' +
    '        NodeNext = 99\n' +
    '    }\n' +
    '    export enum ModuleDetectionKind {\n' +
    '        /**\n' +
    '         * Files with imports, exports and/or import.meta are considered modules\n' +
    '         */\n' +
    '        Legacy = 1,\n' +
    '        /**\n' +
    '         * Legacy, but also files with jsx under react-jsx or react-jsxdev and esm mode files under moduleResolution: node16+\n' +
    '         */\n' +
    '        Auto = 2,\n' +
    '        /**\n' +
    '         * Consider all non-declaration files modules, regardless of present syntax\n' +
    '         */\n' +
    '        Force = 3\n' +
    '    }\n' +
    '    export interface PluginImport {\n' +
    '        name: string;\n' +
    '    }\n' +
    '    export interface ProjectReference {\n' +
    '        /** A normalized path on disk */\n' +
    '        path: string;\n' +
    '        /** The path as the user originally wrote it */\n' +
    '        originalPath?: string;\n' +
    '        /** True if the output of this reference should be prepended to the output of this project. Only valid for --outFile compilations */\n' +
    '        prepend?: boolean;\n' +
    '        /** True if it is intended that this reference form a circularity */\n' +
    '        circular?: boolean;\n' +
    '    }\n' +
    '    export enum WatchFileKind {\n' +
    '        FixedPollingInterval = 0,\n' +
    '        PriorityPollingInterval = 1,\n' +
    '        DynamicPriorityPolling = 2,\n' +
    '        FixedChunkSizePolling = 3,\n' +
    '        UseFsEvents = 4,\n' +
    '        UseFsEventsOnParentDirectory = 5\n' +
    '    }\n' +
    '    export enum WatchDirectoryKind {\n' +
    '        UseFsEvents = 0,\n' +
    '        FixedPollingInterval = 1,\n' +
    '        DynamicPriorityPolling = 2,\n' +
    '        FixedChunkSizePolling = 3\n' +
    '    }\n' +
    '    export enum PollingWatchKind {\n' +
    '        FixedInterval = 0,\n' +
    '        PriorityInterval = 1,\n' +
    '        DynamicPriority = 2,\n' +
    '        FixedChunkSize = 3\n' +
    '    }\n' +
    '    export type CompilerOptionsValue = string | number | boolean | (string | number)[] | string[] | MapLike<string[]> | PluginImport[] | ProjectReference[] | null | undefined;\n' +
    '    export interface CompilerOptions {\n' +
    '        allowJs?: boolean;\n' +
    '        allowSyntheticDefaultImports?: boolean;\n' +
    '        allowUmdGlobalAccess?: boolean;\n' +
    '        allowUnreachableCode?: boolean;\n' +
    '        allowUnusedLabels?: boolean;\n' +
    '        alwaysStrict?: boolean;\n' +
    '        baseUrl?: string;\n' +
    '        charset?: string;\n' +
    '        checkJs?: boolean;\n' +
    '        declaration?: boolean;\n' +
    '        declarationMap?: boolean;\n' +
    '        emitDeclarationOnly?: boolean;\n' +
    '        declarationDir?: string;\n' +
    '        disableSizeLimit?: boolean;\n' +
    '        disableSourceOfProjectReferenceRedirect?: boolean;\n' +
    '        disableSolutionSearching?: boolean;\n' +
    '        disableReferencedProjectLoad?: boolean;\n' +
    '        downlevelIteration?: boolean;\n' +
    '        emitBOM?: boolean;\n' +
    '        emitDecoratorMetadata?: boolean;\n' +
    '        exactOptionalPropertyTypes?: boolean;\n' +
    '        experimentalDecorators?: boolean;\n' +
    '        forceConsistentCasingInFileNames?: boolean;\n' +
    '        importHelpers?: boolean;\n' +
    '        importsNotUsedAsValues?: ImportsNotUsedAsValues;\n' +
    '        inlineSourceMap?: boolean;\n' +
    '        inlineSources?: boolean;\n' +
    '        isolatedModules?: boolean;\n' +
    '        jsx?: JsxEmit;\n' +
    '        keyofStringsOnly?: boolean;\n' +
    '        lib?: string[];\n' +
    '        locale?: string;\n' +
    '        mapRoot?: string;\n' +
    '        maxNodeModuleJsDepth?: number;\n' +
    '        module?: ModuleKind;\n' +
    '        moduleResolution?: ModuleResolutionKind;\n' +
    '        moduleSuffixes?: string[];\n' +
    '        moduleDetection?: ModuleDetectionKind;\n' +
    '        newLine?: NewLineKind;\n' +
    '        noEmit?: boolean;\n' +
    '        noEmitHelpers?: boolean;\n' +
    '        noEmitOnError?: boolean;\n' +
    '        noErrorTruncation?: boolean;\n' +
    '        noFallthroughCasesInSwitch?: boolean;\n' +
    '        noImplicitAny?: boolean;\n' +
    '        noImplicitReturns?: boolean;\n' +
    '        noImplicitThis?: boolean;\n' +
    '        noStrictGenericChecks?: boolean;\n' +
    '        noUnusedLocals?: boolean;\n' +
    '        noUnusedParameters?: boolean;\n' +
    '        noImplicitUseStrict?: boolean;\n' +
    '        noPropertyAccessFromIndexSignature?: boolean;\n' +
    '        assumeChangesOnlyAffectDirectDependencies?: boolean;\n' +
    '        noLib?: boolean;\n' +
    '        noResolve?: boolean;\n' +
    '        noUncheckedIndexedAccess?: boolean;\n' +
    '        out?: string;\n' +
    '        outDir?: string;\n' +
    '        outFile?: string;\n' +
    '        paths?: MapLike<string[]>;\n' +
    '        preserveConstEnums?: boolean;\n' +
    '        noImplicitOverride?: boolean;\n' +
    '        preserveSymlinks?: boolean;\n' +
    '        preserveValueImports?: boolean;\n' +
    '        project?: string;\n' +
    '        reactNamespace?: string;\n' +
    '        jsxFactory?: string;\n' +
    '        jsxFragmentFactory?: string;\n' +
    '        jsxImportSource?: string;\n' +
    '        composite?: boolean;\n' +
    '        incremental?: boolean;\n' +
    '        tsBuildInfoFile?: string;\n' +
    '        removeComments?: boolean;\n' +
    '        rootDir?: string;\n' +
    '        rootDirs?: string[];\n' +
    '        skipLibCheck?: boolean;\n' +
    '        skipDefaultLibCheck?: boolean;\n' +
    '        sourceMap?: boolean;\n' +
    '        sourceRoot?: string;\n' +
    '        strict?: boolean;\n' +
    '        strictFunctionTypes?: boolean;\n' +
    '        strictBindCallApply?: boolean;\n' +
    '        strictNullChecks?: boolean;\n' +
    '        strictPropertyInitialization?: boolean;\n' +
    '        stripInternal?: boolean;\n' +
    '        suppressExcessPropertyErrors?: boolean;\n' +
    '        suppressImplicitAnyIndexErrors?: boolean;\n' +
    '        target?: ScriptTarget;\n' +
    '        traceResolution?: boolean;\n' +
    '        useUnknownInCatchVariables?: boolean;\n' +
    '        resolveJsonModule?: boolean;\n' +
    '        types?: string[];\n' +
    '        /** Paths used to compute primary types search locations */\n' +
    '        typeRoots?: string[];\n' +
    '        esModuleInterop?: boolean;\n' +
    '        useDefineForClassFields?: boolean;\n' +
    '        [option: string]: CompilerOptionsValue | TsConfigSourceFile | undefined;\n' +
    '    }\n' +
    '    export interface WatchOptions {\n' +
    '        watchFile?: WatchFileKind;\n' +
    '        watchDirectory?: WatchDirectoryKind;\n' +
    '        fallbackPolling?: PollingWatchKind;\n' +
    '        synchronousWatchDirectory?: boolean;\n' +
    '        excludeDirectories?: string[];\n' +
    '        excludeFiles?: string[];\n' +
    '        [option: string]: CompilerOptionsValue | undefined;\n' +
    '    }\n' +
    '    export interface TypeAcquisition {\n' +
    '        /**\n' +
    '         * @deprecated typingOptions.enableAutoDiscovery\n' +
    '         * Use typeAcquisition.enable instead.\n' +
    '         */\n' +
    '        enableAutoDiscovery?: boolean;\n' +
    '        enable?: boolean;\n' +
    '        include?: string[];\n' +
    '        exclude?: string[];\n' +
    '        disableFilenameBasedTypeAcquisition?: boolean;\n' +
    '        [option: string]: CompilerOptionsValue | undefined;\n' +
    '    }\n' +
    '    export enum ModuleKind {\n' +
    '        None = 0,\n' +
    '        CommonJS = 1,\n' +
    '        AMD = 2,\n' +
    '        UMD = 3,\n' +
    '        System = 4,\n' +
    '        ES2015 = 5,\n' +
    '        ES2020 = 6,\n' +
    '        ES2022 = 7,\n' +
    '        ESNext = 99,\n' +
    '        Node16 = 100,\n' +
    '        NodeNext = 199\n' +
    '    }\n' +
    '    export enum JsxEmit {\n' +
    '        None = 0,\n' +
    '        Preserve = 1,\n' +
    '        React = 2,\n' +
    '        ReactNative = 3,\n' +
    '        ReactJSX = 4,\n' +
    '        ReactJSXDev = 5\n' +
    '    }\n' +
    '    export enum ImportsNotUsedAsValues {\n' +
    '        Remove = 0,\n' +
    '        Preserve = 1,\n' +
    '        Error = 2\n' +
    '    }\n' +
    '    export enum NewLineKind {\n' +
    '        CarriageReturnLineFeed = 0,\n' +
    '        LineFeed = 1\n' +
    '    }\n' +
    '    export interface LineAndCharacter {\n' +
    '        /** 0-based. */\n' +
    '        line: number;\n' +
    '        character: number;\n' +
    '    }\n' +
    '    export enum ScriptKind {\n' +
    '        Unknown = 0,\n' +
    '        JS = 1,\n' +
    '        JSX = 2,\n' +
    '        TS = 3,\n' +
    '        TSX = 4,\n' +
    '        External = 5,\n' +
    '        JSON = 6,\n' +
    '        /**\n' +
    "         * Used on extensions that doesn't define the ScriptKind but the content defines it.\n" +
    '         * Deferred extensions are going to be included in all project contexts.\n' +
    '         */\n' +
    '        Deferred = 7\n' +
    '    }\n' +
    '    export enum ScriptTarget {\n' +
    '        ES3 = 0,\n' +
    '        ES5 = 1,\n' +
    '        ES2015 = 2,\n' +
    '        ES2016 = 3,\n' +
    '        ES2017 = 4,\n' +
    '        ES2018 = 5,\n' +
    '        ES2019 = 6,\n' +
    '        ES2020 = 7,\n' +
    '        ES2021 = 8,\n' +
    '        ES2022 = 9,\n' +
    '        ESNext = 99,\n' +
    '        JSON = 100,\n' +
    '        Latest = 99\n' +
    '    }\n' +
    '    export enum LanguageVariant {\n' +
    '        Standard = 0,\n' +
    '        JSX = 1\n' +
    '    }\n' +
    '    /** Either a parsed command line or a parsed tsconfig.json */\n' +
    '    export interface ParsedCommandLine {\n' +
    '        options: CompilerOptions;\n' +
    '        typeAcquisition?: TypeAcquisition;\n' +
    '        fileNames: string[];\n' +
    '        projectReferences?: readonly ProjectReference[];\n' +
    '        watchOptions?: WatchOptions;\n' +
    '        raw?: any;\n' +
    '        errors: Diagnostic[];\n' +
    '        wildcardDirectories?: MapLike<WatchDirectoryFlags>;\n' +
    '        compileOnSave?: boolean;\n' +
    '    }\n' +
    '    export enum WatchDirectoryFlags {\n' +
    '        None = 0,\n' +
    '        Recursive = 1\n' +
    '    }\n' +
    '    export interface CreateProgramOptions {\n' +
    '        rootNames: readonly string[];\n' +
    '        options: CompilerOptions;\n' +
    '        projectReferences?: readonly ProjectReference[];\n' +
    '        host?: CompilerHost;\n' +
    '        oldProgram?: Program;\n' +
    '        configFileParsingDiagnostics?: readonly Diagnostic[];\n' +
    '    }\n' +
    '    export interface ModuleResolutionHost {\n' +
    '        fileExists(fileName: string): boolean;\n' +
    '        readFile(fileName: string): string | undefined;\n' +
    '        trace?(s: string): void;\n' +
    '        directoryExists?(directoryName: string): boolean;\n' +
    '        /**\n' +
    '         * Resolve a symbolic link.\n' +
    '         * @see https://nodejs.org/api/fs.html#fs_fs_realpathsync_path_options\n' +
    '         */\n' +
    '        realpath?(path: string): string;\n' +
    '        getCurrentDirectory?(): string;\n' +
    '        getDirectories?(path: string): string[];\n' +
    '        useCaseSensitiveFileNames?: boolean | (() => boolean) | undefined;\n' +
    '    }\n' +
    '    /**\n' +
    '     * Used by services to specify the minimum host area required to set up source files under any compilation settings\n' +
    '     */\n' +
    '    export interface MinimalResolutionCacheHost extends ModuleResolutionHost {\n' +
    '        getCompilationSettings(): CompilerOptions;\n' +
    '        getCompilerHost?(): CompilerHost | undefined;\n' +
    '    }\n' +
    '    /**\n' +
    '     * Represents the result of module resolution.\n' +
    "     * Module resolution will pick up tsx/jsx/js files even if '--jsx' and '--allowJs' are turned off.\n" +
    '     * The Program will then filter results based on these flags.\n' +
    '     *\n' +
    '     * Prefer to return a `ResolvedModuleFull` so that the file type does not have to be inferred.\n' +
    '     */\n' +
    '    export interface ResolvedModule {\n' +
    '        /** Path of the file the module was resolved to. */\n' +
    '        resolvedFileName: string;\n' +
    '        /** True if `resolvedFileName` comes from `node_modules`. */\n' +
    '        isExternalLibraryImport?: boolean;\n' +
    '    }\n' +
    '    /**\n' +
    '     * ResolvedModule with an explicitly provided `extension` property.\n' +
    '     * Prefer this over `ResolvedModule`.\n' +
    '     * If changing this, remember to change `moduleResolutionIsEqualTo`.\n' +
    '     */\n' +
    '    export interface ResolvedModuleFull extends ResolvedModule {\n' +
    '        /**\n' +
    "         * Extension of resolvedFileName. This must match what's at the end of resolvedFileName.\n" +
    '         * This is optional for backwards-compatibility, but will be added if not provided.\n' +
    '         */\n' +
    '        extension: Extension;\n' +
    '        packageId?: PackageId;\n' +
    '    }\n' +
    '    /**\n' +
    '     * Unique identifier with a package name and version.\n' +
    '     * If changing this, remember to change `packageIdIsEqual`.\n' +
    '     */\n' +
    '    export interface PackageId {\n' +
    '        /**\n' +
    '         * Name of the package.\n' +
    '         * Should not include `@types`.\n' +
    '         * If accessing a non-index file, this should include its name e.g. "foo/bar".\n' +
    '         */\n' +
    '        name: string;\n' +
    '        /**\n' +
    '         * Name of a submodule within this package.\n' +
    '         * May be "".\n' +
    '         */\n' +
    '        subModuleName: string;\n' +
    '        /** Version of the package, e.g. "1.2.3" */\n' +
    '        version: string;\n' +
    '    }\n' +
    '    export enum Extension {\n' +
    '        Ts = ".ts",\n' +
    '        Tsx = ".tsx",\n' +
    '        Dts = ".d.ts",\n' +
    '        Js = ".js",\n' +
    '        Jsx = ".jsx",\n' +
    '        Json = ".json",\n' +
    '        TsBuildInfo = ".tsbuildinfo",\n' +
    '        Mjs = ".mjs",\n' +
    '        Mts = ".mts",\n' +
    '        Dmts = ".d.mts",\n' +
    '        Cjs = ".cjs",\n' +
    '        Cts = ".cts",\n' +
    '        Dcts = ".d.cts"\n' +
    '    }\n' +
    '    export interface ResolvedModuleWithFailedLookupLocations {\n' +
    '        readonly resolvedModule: ResolvedModuleFull | undefined;\n' +
    '    }\n' +
    '    export interface ResolvedTypeReferenceDirective {\n' +
    '        primary: boolean;\n' +
    '        resolvedFileName: string | undefined;\n' +
    '        packageId?: PackageId;\n' +
    '        /** True if `resolvedFileName` comes from `node_modules`. */\n' +
    '        isExternalLibraryImport?: boolean;\n' +
    '    }\n' +
    '    export interface ResolvedTypeReferenceDirectiveWithFailedLookupLocations {\n' +
    '        readonly resolvedTypeReferenceDirective: ResolvedTypeReferenceDirective | undefined;\n' +
    '        readonly failedLookupLocations: string[];\n' +
    '    }\n' +
    '    export interface CompilerHost extends ModuleResolutionHost {\n' +
    '        getSourceFile(fileName: string, languageVersionOrOptions: ScriptTarget | CreateSourceFileOptions, onError?: (message: string) => void, shouldCreateNewSourceFile?: boolean): SourceFile | undefined;\n' +
    '        getSourceFileByPath?(fileName: string, path: Path, languageVersionOrOptions: ScriptTarget | CreateSourceFileOptions, onError?: (message: string) => void, shouldCreateNewSourceFile?: boolean): SourceFile | undefined;\n' +
    '        getCancellationToken?(): CancellationToken;\n' +
    '        getDefaultLibFileName(options: CompilerOptions): string;\n' +
    '        getDefaultLibLocation?(): string;\n' +
    '        writeFile: WriteFileCallback;\n' +
    '        getCurrentDirectory(): string;\n' +
    '        getCanonicalFileName(fileName: string): string;\n' +
    '        useCaseSensitiveFileNames(): boolean;\n' +
    '        getNewLine(): string;\n' +
    '        readDirectory?(rootDir: string, extensions: readonly string[], excludes: readonly string[] | undefined, includes: readonly string[], depth?: number): string[];\n' +
    '        resolveModuleNames?(moduleNames: string[], containingFile: string, reusedNames: string[] | undefined, redirectedReference: ResolvedProjectReference | undefined, options: CompilerOptions, containingSourceFile?: SourceFile): (ResolvedModule | undefined)[];\n' +
    '        /**\n' +
    '         * Returns the module resolution cache used by a provided `resolveModuleNames` implementation so that any non-name module resolution operations (eg, package.json lookup) can reuse it\n' +
    '         */\n' +
    '        getModuleResolutionCache?(): ModuleResolutionCache | undefined;\n' +
    '        /**\n' +
    "         * This method is a companion for 'resolveModuleNames' and is used to resolve 'types' references to actual type declaration files\n" +
    '         */\n' +
    '        resolveTypeReferenceDirectives?(typeReferenceDirectiveNames: string[] | readonly FileReference[], containingFile: string, redirectedReference: ResolvedProjectReference | undefined, options: CompilerOptions, containingFileMode?: SourceFile["impliedNodeFormat"] | undefined): (ResolvedTypeReferenceDirective | undefined)[];\n' +
    '        getEnvironmentVariable?(name: string): string | undefined;\n' +
    '        createHash?(data: string): string;\n' +
    '        getParsedCommandLine?(fileName: string): ParsedCommandLine | undefined;\n' +
    '    }\n' +
    '    export interface SourceMapRange extends TextRange {\n' +
    '        source?: SourceMapSource;\n' +
    '    }\n' +
    '    export interface SourceMapSource {\n' +
    '        fileName: string;\n' +
    '        text: string;\n' +
    '        skipTrivia?: (pos: number) => number;\n' +
    '    }\n' +
    '    export enum EmitFlags {\n' +
    '        None = 0,\n' +
    '        SingleLine = 1,\n' +
    '        AdviseOnEmitNode = 2,\n' +
    '        NoSubstitution = 4,\n' +
    '        CapturesThis = 8,\n' +
    '        NoLeadingSourceMap = 16,\n' +
    '        NoTrailingSourceMap = 32,\n' +
    '        NoSourceMap = 48,\n' +
    '        NoNestedSourceMaps = 64,\n' +
    '        NoTokenLeadingSourceMaps = 128,\n' +
    '        NoTokenTrailingSourceMaps = 256,\n' +
    '        NoTokenSourceMaps = 384,\n' +
    '        NoLeadingComments = 512,\n' +
    '        NoTrailingComments = 1024,\n' +
    '        NoComments = 1536,\n' +
    '        NoNestedComments = 2048,\n' +
    '        HelperName = 4096,\n' +
    '        ExportName = 8192,\n' +
    '        LocalName = 16384,\n' +
    '        InternalName = 32768,\n' +
    '        Indented = 65536,\n' +
    '        NoIndentation = 131072,\n' +
    '        AsyncFunctionBody = 262144,\n' +
    '        ReuseTempVariableScope = 524288,\n' +
    '        CustomPrologue = 1048576,\n' +
    '        NoHoisting = 2097152,\n' +
    '        HasEndOfDeclarationMarker = 4194304,\n' +
    '        Iterator = 8388608,\n' +
    '        NoAsciiEscaping = 16777216,\n' +
    '    }\n' +
    '    export interface EmitHelperBase {\n' +
    '        readonly name: string;\n' +
    '        readonly scoped: boolean;\n' +
    '        readonly text: string | ((node: EmitHelperUniqueNameCallback) => string);\n' +
    '        readonly priority?: number;\n' +
    '        readonly dependencies?: EmitHelper[];\n' +
    '    }\n' +
    '    export interface ScopedEmitHelper extends EmitHelperBase {\n' +
    '        readonly scoped: true;\n' +
    '    }\n' +
    '    export interface UnscopedEmitHelper extends EmitHelperBase {\n' +
    '        readonly scoped: false;\n' +
    '        readonly text: string;\n' +
    '    }\n' +
    '    export type EmitHelper = ScopedEmitHelper | UnscopedEmitHelper;\n' +
    '    export type EmitHelperUniqueNameCallback = (name: string) => string;\n' +
    '    export enum EmitHint {\n' +
    '        SourceFile = 0,\n' +
    '        Expression = 1,\n' +
    '        IdentifierName = 2,\n' +
    '        MappedTypeParameter = 3,\n' +
    '        Unspecified = 4,\n' +
    '        EmbeddedStatement = 5,\n' +
    '        JsxAttributeValue = 6\n' +
    '    }\n' +
    '    export enum OuterExpressionKinds {\n' +
    '        Parentheses = 1,\n' +
    '        TypeAssertions = 2,\n' +
    '        NonNullAssertions = 4,\n' +
    '        PartiallyEmittedExpressions = 8,\n' +
    '        Assertions = 6,\n' +
    '        All = 15,\n' +
    '        ExcludeJSDocTypeAssertion = 16\n' +
    '    }\n' +
    '    export type TypeOfTag = "undefined" | "number" | "bigint" | "boolean" | "string" | "symbol" | "object" | "function";\n' +
    '    export interface NodeFactory {\n' +
    '        createNodeArray<T extends Node>(elements?: readonly T[], hasTrailingComma?: boolean): NodeArray<T>;\n' +
    '        createNumericLiteral(value: string | number, numericLiteralFlags?: TokenFlags): NumericLiteral;\n' +
    '        createBigIntLiteral(value: string | PseudoBigInt): BigIntLiteral;\n' +
    '        createStringLiteral(text: string, isSingleQuote?: boolean): StringLiteral;\n' +
    '        createStringLiteralFromNode(sourceNode: PropertyNameLiteral, isSingleQuote?: boolean): StringLiteral;\n' +
    '        createRegularExpressionLiteral(text: string): RegularExpressionLiteral;\n' +
    '        createIdentifier(text: string): Identifier;\n' +
    '        /**\n' +
    '         * Create a unique temporary variable.\n' +
    '         * @param recordTempVariable An optional callback used to record the temporary variable name. This\n' +
    '         * should usually be a reference to `hoistVariableDeclaration` from a `TransformationContext`, but\n' +
    '         * can be `undefined` if you plan to record the temporary variable manually.\n' +
    '         * @param reservedInNestedScopes When `true`, reserves the temporary variable name in all nested scopes\n' +
    '         * during emit so that the variable can be referenced in a nested function body. This is an alternative to\n' +
    '         * setting `EmitFlags.ReuseTempVariableScope` on the nested function itself.\n' +
    '         */\n' +
    '        createTempVariable(recordTempVariable: ((node: Identifier) => void) | undefined, reservedInNestedScopes?: boolean): Identifier;\n' +
    '        /**\n' +
    '         * Create a unique temporary variable for use in a loop.\n' +
    '         * @param reservedInNestedScopes When `true`, reserves the temporary variable name in all nested scopes\n' +
    '         * during emit so that the variable can be referenced in a nested function body. This is an alternative to\n' +
    '         * setting `EmitFlags.ReuseTempVariableScope` on the nested function itself.\n' +
    '         */\n' +
    '        createLoopVariable(reservedInNestedScopes?: boolean): Identifier;\n' +
    '        /** Create a unique name based on the supplied text. */\n' +
    '        createUniqueName(text: string, flags?: GeneratedIdentifierFlags): Identifier;\n' +
    '        /** Create a unique name generated for a node. */\n' +
    '        getGeneratedNameForNode(node: Node | undefined, flags?: GeneratedIdentifierFlags): Identifier;\n' +
    '        createPrivateIdentifier(text: string): PrivateIdentifier;\n' +
    '        createToken(token: SyntaxKind.SuperKeyword): SuperExpression;\n' +
    '        createToken(token: SyntaxKind.ThisKeyword): ThisExpression;\n' +
    '        createToken(token: SyntaxKind.NullKeyword): NullLiteral;\n' +
    '        createToken(token: SyntaxKind.TrueKeyword): TrueLiteral;\n' +
    '        createToken(token: SyntaxKind.FalseKeyword): FalseLiteral;\n' +
    '        createToken<TKind extends PunctuationSyntaxKind>(token: TKind): PunctuationToken<TKind>;\n' +
    '        createToken<TKind extends KeywordTypeSyntaxKind>(token: TKind): KeywordTypeNode<TKind>;\n' +
    '        createToken<TKind extends ModifierSyntaxKind>(token: TKind): ModifierToken<TKind>;\n' +
    '        createToken<TKind extends KeywordSyntaxKind>(token: TKind): KeywordToken<TKind>;\n' +
    '        createToken<TKind extends SyntaxKind.Unknown | SyntaxKind.EndOfFileToken>(token: TKind): Token<TKind>;\n' +
    '        createSuper(): SuperExpression;\n' +
    '        createThis(): ThisExpression;\n' +
    '        createNull(): NullLiteral;\n' +
    '        createTrue(): TrueLiteral;\n' +
    '        createFalse(): FalseLiteral;\n' +
    '        createModifier<T extends ModifierSyntaxKind>(kind: T): ModifierToken<T>;\n' +
    '        createModifiersFromModifierFlags(flags: ModifierFlags): Modifier[] | undefined;\n' +
    '        createQualifiedName(left: EntityName, right: string | Identifier): QualifiedName;\n' +
    '        updateQualifiedName(node: QualifiedName, left: EntityName, right: Identifier): QualifiedName;\n' +
    '        createComputedPropertyName(expression: Expression): ComputedPropertyName;\n' +
    '        updateComputedPropertyName(node: ComputedPropertyName, expression: Expression): ComputedPropertyName;\n' +
    '        createTypeParameterDeclaration(modifiers: readonly Modifier[] | undefined, name: string | Identifier, constraint?: TypeNode, defaultType?: TypeNode): TypeParameterDeclaration;\n' +
    '        /** @deprecated */\n' +
    '        createTypeParameterDeclaration(name: string | Identifier, constraint?: TypeNode, defaultType?: TypeNode): TypeParameterDeclaration;\n' +
    '        updateTypeParameterDeclaration(node: TypeParameterDeclaration, modifiers: readonly Modifier[] | undefined, name: Identifier, constraint: TypeNode | undefined, defaultType: TypeNode | undefined): TypeParameterDeclaration;\n' +
    '        /** @deprecated */\n' +
    '        updateTypeParameterDeclaration(node: TypeParameterDeclaration, name: Identifier, constraint: TypeNode | undefined, defaultType: TypeNode | undefined): TypeParameterDeclaration;\n' +
    '        createParameterDeclaration(decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, dotDotDotToken: DotDotDotToken | undefined, name: string | BindingName, questionToken?: QuestionToken, type?: TypeNode, initializer?: Expression): ParameterDeclaration;\n' +
    '        updateParameterDeclaration(node: ParameterDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, dotDotDotToken: DotDotDotToken | undefined, name: string | BindingName, questionToken: QuestionToken | undefined, type: TypeNode | undefined, initializer: Expression | undefined): ParameterDeclaration;\n' +
    '        createDecorator(expression: Expression): Decorator;\n' +
    '        updateDecorator(node: Decorator, expression: Expression): Decorator;\n' +
    '        createPropertySignature(modifiers: readonly Modifier[] | undefined, name: PropertyName | string, questionToken: QuestionToken | undefined, type: TypeNode | undefined): PropertySignature;\n' +
    '        updatePropertySignature(node: PropertySignature, modifiers: readonly Modifier[] | undefined, name: PropertyName, questionToken: QuestionToken | undefined, type: TypeNode | undefined): PropertySignature;\n' +
    '        createPropertyDeclaration(decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: string | PropertyName, questionOrExclamationToken: QuestionToken | ExclamationToken | undefined, type: TypeNode | undefined, initializer: Expression | undefined): PropertyDeclaration;\n' +
    '        updatePropertyDeclaration(node: PropertyDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: string | PropertyName, questionOrExclamationToken: QuestionToken | ExclamationToken | undefined, type: TypeNode | undefined, initializer: Expression | undefined): PropertyDeclaration;\n' +
    '        createMethodSignature(modifiers: readonly Modifier[] | undefined, name: string | PropertyName, questionToken: QuestionToken | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined): MethodSignature;\n' +
    '        updateMethodSignature(node: MethodSignature, modifiers: readonly Modifier[] | undefined, name: PropertyName, questionToken: QuestionToken | undefined, typeParameters: NodeArray<TypeParameterDeclaration> | undefined, parameters: NodeArray<ParameterDeclaration>, type: TypeNode | undefined): MethodSignature;\n' +
    '        createMethodDeclaration(decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, asteriskToken: AsteriskToken | undefined, name: string | PropertyName, questionToken: QuestionToken | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, body: Block | undefined): MethodDeclaration;\n' +
    '        updateMethodDeclaration(node: MethodDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, asteriskToken: AsteriskToken | undefined, name: PropertyName, questionToken: QuestionToken | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, body: Block | undefined): MethodDeclaration;\n' +
    '        createConstructorDeclaration(decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, parameters: readonly ParameterDeclaration[], body: Block | undefined): ConstructorDeclaration;\n' +
    '        updateConstructorDeclaration(node: ConstructorDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, parameters: readonly ParameterDeclaration[], body: Block | undefined): ConstructorDeclaration;\n' +
    '        createGetAccessorDeclaration(decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: string | PropertyName, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, body: Block | undefined): GetAccessorDeclaration;\n' +
    '        updateGetAccessorDeclaration(node: GetAccessorDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: PropertyName, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, body: Block | undefined): GetAccessorDeclaration;\n' +
    '        createSetAccessorDeclaration(decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: string | PropertyName, parameters: readonly ParameterDeclaration[], body: Block | undefined): SetAccessorDeclaration;\n' +
    '        updateSetAccessorDeclaration(node: SetAccessorDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: PropertyName, parameters: readonly ParameterDeclaration[], body: Block | undefined): SetAccessorDeclaration;\n' +
    '        createCallSignature(typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined): CallSignatureDeclaration;\n' +
    '        updateCallSignature(node: CallSignatureDeclaration, typeParameters: NodeArray<TypeParameterDeclaration> | undefined, parameters: NodeArray<ParameterDeclaration>, type: TypeNode | undefined): CallSignatureDeclaration;\n' +
    '        createConstructSignature(typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined): ConstructSignatureDeclaration;\n' +
    '        updateConstructSignature(node: ConstructSignatureDeclaration, typeParameters: NodeArray<TypeParameterDeclaration> | undefined, parameters: NodeArray<ParameterDeclaration>, type: TypeNode | undefined): ConstructSignatureDeclaration;\n' +
    '        createIndexSignature(decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode): IndexSignatureDeclaration;\n' +
    '        updateIndexSignature(node: IndexSignatureDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode): IndexSignatureDeclaration;\n' +
    '        createTemplateLiteralTypeSpan(type: TypeNode, literal: TemplateMiddle | TemplateTail): TemplateLiteralTypeSpan;\n' +
    '        updateTemplateLiteralTypeSpan(node: TemplateLiteralTypeSpan, type: TypeNode, literal: TemplateMiddle | TemplateTail): TemplateLiteralTypeSpan;\n' +
    '        createClassStaticBlockDeclaration(decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, body: Block): ClassStaticBlockDeclaration;\n' +
    '        updateClassStaticBlockDeclaration(node: ClassStaticBlockDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, body: Block): ClassStaticBlockDeclaration;\n' +
    '        createKeywordTypeNode<TKind extends KeywordTypeSyntaxKind>(kind: TKind): KeywordTypeNode<TKind>;\n' +
    '        createTypePredicateNode(assertsModifier: AssertsKeyword | undefined, parameterName: Identifier | ThisTypeNode | string, type: TypeNode | undefined): TypePredicateNode;\n' +
    '        updateTypePredicateNode(node: TypePredicateNode, assertsModifier: AssertsKeyword | undefined, parameterName: Identifier | ThisTypeNode, type: TypeNode | undefined): TypePredicateNode;\n' +
    '        createTypeReferenceNode(typeName: string | EntityName, typeArguments?: readonly TypeNode[]): TypeReferenceNode;\n' +
    '        updateTypeReferenceNode(node: TypeReferenceNode, typeName: EntityName, typeArguments: NodeArray<TypeNode> | undefined): TypeReferenceNode;\n' +
    '        createFunctionTypeNode(typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode): FunctionTypeNode;\n' +
    '        updateFunctionTypeNode(node: FunctionTypeNode, typeParameters: NodeArray<TypeParameterDeclaration> | undefined, parameters: NodeArray<ParameterDeclaration>, type: TypeNode): FunctionTypeNode;\n' +
    '        createConstructorTypeNode(modifiers: readonly Modifier[] | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode): ConstructorTypeNode;\n' +
    '        /** @deprecated */\n' +
    '        createConstructorTypeNode(typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode): ConstructorTypeNode;\n' +
    '        updateConstructorTypeNode(node: ConstructorTypeNode, modifiers: readonly Modifier[] | undefined, typeParameters: NodeArray<TypeParameterDeclaration> | undefined, parameters: NodeArray<ParameterDeclaration>, type: TypeNode): ConstructorTypeNode;\n' +
    '        /** @deprecated */\n' +
    '        updateConstructorTypeNode(node: ConstructorTypeNode, typeParameters: NodeArray<TypeParameterDeclaration> | undefined, parameters: NodeArray<ParameterDeclaration>, type: TypeNode): ConstructorTypeNode;\n' +
    '        createTypeQueryNode(exprName: EntityName, typeArguments?: readonly TypeNode[]): TypeQueryNode;\n' +
    '        updateTypeQueryNode(node: TypeQueryNode, exprName: EntityName, typeArguments?: readonly TypeNode[]): TypeQueryNode;\n' +
    '        createTypeLiteralNode(members: readonly TypeElement[] | undefined): TypeLiteralNode;\n' +
    '        updateTypeLiteralNode(node: TypeLiteralNode, members: NodeArray<TypeElement>): TypeLiteralNode;\n' +
    '        createArrayTypeNode(elementType: TypeNode): ArrayTypeNode;\n' +
    '        updateArrayTypeNode(node: ArrayTypeNode, elementType: TypeNode): ArrayTypeNode;\n' +
    '        createTupleTypeNode(elements: readonly (TypeNode | NamedTupleMember)[]): TupleTypeNode;\n' +
    '        updateTupleTypeNode(node: TupleTypeNode, elements: readonly (TypeNode | NamedTupleMember)[]): TupleTypeNode;\n' +
    '        createNamedTupleMember(dotDotDotToken: DotDotDotToken | undefined, name: Identifier, questionToken: QuestionToken | undefined, type: TypeNode): NamedTupleMember;\n' +
    '        updateNamedTupleMember(node: NamedTupleMember, dotDotDotToken: DotDotDotToken | undefined, name: Identifier, questionToken: QuestionToken | undefined, type: TypeNode): NamedTupleMember;\n' +
    '        createOptionalTypeNode(type: TypeNode): OptionalTypeNode;\n' +
    '        updateOptionalTypeNode(node: OptionalTypeNode, type: TypeNode): OptionalTypeNode;\n' +
    '        createRestTypeNode(type: TypeNode): RestTypeNode;\n' +
    '        updateRestTypeNode(node: RestTypeNode, type: TypeNode): RestTypeNode;\n' +
    '        createUnionTypeNode(types: readonly TypeNode[]): UnionTypeNode;\n' +
    '        updateUnionTypeNode(node: UnionTypeNode, types: NodeArray<TypeNode>): UnionTypeNode;\n' +
    '        createIntersectionTypeNode(types: readonly TypeNode[]): IntersectionTypeNode;\n' +
    '        updateIntersectionTypeNode(node: IntersectionTypeNode, types: NodeArray<TypeNode>): IntersectionTypeNode;\n' +
    '        createConditionalTypeNode(checkType: TypeNode, extendsType: TypeNode, trueType: TypeNode, falseType: TypeNode): ConditionalTypeNode;\n' +
    '        updateConditionalTypeNode(node: ConditionalTypeNode, checkType: TypeNode, extendsType: TypeNode, trueType: TypeNode, falseType: TypeNode): ConditionalTypeNode;\n' +
    '        createInferTypeNode(typeParameter: TypeParameterDeclaration): InferTypeNode;\n' +
    '        updateInferTypeNode(node: InferTypeNode, typeParameter: TypeParameterDeclaration): InferTypeNode;\n' +
    '        createImportTypeNode(argument: TypeNode, qualifier?: EntityName, typeArguments?: readonly TypeNode[], isTypeOf?: boolean): ImportTypeNode;\n' +
    '        createImportTypeNode(argument: TypeNode, assertions?: ImportTypeAssertionContainer, qualifier?: EntityName, typeArguments?: readonly TypeNode[], isTypeOf?: boolean): ImportTypeNode;\n' +
    '        updateImportTypeNode(node: ImportTypeNode, argument: TypeNode, qualifier: EntityName | undefined, typeArguments: readonly TypeNode[] | undefined, isTypeOf?: boolean): ImportTypeNode;\n' +
    '        updateImportTypeNode(node: ImportTypeNode, argument: TypeNode, assertions: ImportTypeAssertionContainer | undefined, qualifier: EntityName | undefined, typeArguments: readonly TypeNode[] | undefined, isTypeOf?: boolean): ImportTypeNode;\n' +
    '        createParenthesizedType(type: TypeNode): ParenthesizedTypeNode;\n' +
    '        updateParenthesizedType(node: ParenthesizedTypeNode, type: TypeNode): ParenthesizedTypeNode;\n' +
    '        createThisTypeNode(): ThisTypeNode;\n' +
    '        createTypeOperatorNode(operator: SyntaxKind.KeyOfKeyword | SyntaxKind.UniqueKeyword | SyntaxKind.ReadonlyKeyword, type: TypeNode): TypeOperatorNode;\n' +
    '        updateTypeOperatorNode(node: TypeOperatorNode, type: TypeNode): TypeOperatorNode;\n' +
    '        createIndexedAccessTypeNode(objectType: TypeNode, indexType: TypeNode): IndexedAccessTypeNode;\n' +
    '        updateIndexedAccessTypeNode(node: IndexedAccessTypeNode, objectType: TypeNode, indexType: TypeNode): IndexedAccessTypeNode;\n' +
    '        createMappedTypeNode(readonlyToken: ReadonlyKeyword | PlusToken | MinusToken | undefined, typeParameter: TypeParameterDeclaration, nameType: TypeNode | undefined, questionToken: QuestionToken | PlusToken | MinusToken | undefined, type: TypeNode | undefined, members: NodeArray<TypeElement> | undefined): MappedTypeNode;\n' +
    '        updateMappedTypeNode(node: MappedTypeNode, readonlyToken: ReadonlyKeyword | PlusToken | MinusToken | undefined, typeParameter: TypeParameterDeclaration, nameType: TypeNode | undefined, questionToken: QuestionToken | PlusToken | MinusToken | undefined, type: TypeNode | undefined, members: NodeArray<TypeElement> | undefined): MappedTypeNode;\n' +
    '        createLiteralTypeNode(literal: LiteralTypeNode["literal"]): LiteralTypeNode;\n' +
    '        updateLiteralTypeNode(node: LiteralTypeNode, literal: LiteralTypeNode["literal"]): LiteralTypeNode;\n' +
    '        createTemplateLiteralType(head: TemplateHead, templateSpans: readonly TemplateLiteralTypeSpan[]): TemplateLiteralTypeNode;\n' +
    '        updateTemplateLiteralType(node: TemplateLiteralTypeNode, head: TemplateHead, templateSpans: readonly TemplateLiteralTypeSpan[]): TemplateLiteralTypeNode;\n' +
    '        createObjectBindingPattern(elements: readonly BindingElement[]): ObjectBindingPattern;\n' +
    '        updateObjectBindingPattern(node: ObjectBindingPattern, elements: readonly BindingElement[]): ObjectBindingPattern;\n' +
    '        createArrayBindingPattern(elements: readonly ArrayBindingElement[]): ArrayBindingPattern;\n' +
    '        updateArrayBindingPattern(node: ArrayBindingPattern, elements: readonly ArrayBindingElement[]): ArrayBindingPattern;\n' +
    '        createBindingElement(dotDotDotToken: DotDotDotToken | undefined, propertyName: string | PropertyName | undefined, name: string | BindingName, initializer?: Expression): BindingElement;\n' +
    '        updateBindingElement(node: BindingElement, dotDotDotToken: DotDotDotToken | undefined, propertyName: PropertyName | undefined, name: BindingName, initializer: Expression | undefined): BindingElement;\n' +
    '        createArrayLiteralExpression(elements?: readonly Expression[], multiLine?: boolean): ArrayLiteralExpression;\n' +
    '        updateArrayLiteralExpression(node: ArrayLiteralExpression, elements: readonly Expression[]): ArrayLiteralExpression;\n' +
    '        createObjectLiteralExpression(properties?: readonly ObjectLiteralElementLike[], multiLine?: boolean): ObjectLiteralExpression;\n' +
    '        updateObjectLiteralExpression(node: ObjectLiteralExpression, properties: readonly ObjectLiteralElementLike[]): ObjectLiteralExpression;\n' +
    '        createPropertyAccessExpression(expression: Expression, name: string | MemberName): PropertyAccessExpression;\n' +
    '        updatePropertyAccessExpression(node: PropertyAccessExpression, expression: Expression, name: MemberName): PropertyAccessExpression;\n' +
    '        createPropertyAccessChain(expression: Expression, questionDotToken: QuestionDotToken | undefined, name: string | MemberName): PropertyAccessChain;\n' +
    '        updatePropertyAccessChain(node: PropertyAccessChain, expression: Expression, questionDotToken: QuestionDotToken | undefined, name: MemberName): PropertyAccessChain;\n' +
    '        createElementAccessExpression(expression: Expression, index: number | Expression): ElementAccessExpression;\n' +
    '        updateElementAccessExpression(node: ElementAccessExpression, expression: Expression, argumentExpression: Expression): ElementAccessExpression;\n' +
    '        createElementAccessChain(expression: Expression, questionDotToken: QuestionDotToken | undefined, index: number | Expression): ElementAccessChain;\n' +
    '        updateElementAccessChain(node: ElementAccessChain, expression: Expression, questionDotToken: QuestionDotToken | undefined, argumentExpression: Expression): ElementAccessChain;\n' +
    '        createCallExpression(expression: Expression, typeArguments: readonly TypeNode[] | undefined, argumentsArray: readonly Expression[] | undefined): CallExpression;\n' +
    '        updateCallExpression(node: CallExpression, expression: Expression, typeArguments: readonly TypeNode[] | undefined, argumentsArray: readonly Expression[]): CallExpression;\n' +
    '        createCallChain(expression: Expression, questionDotToken: QuestionDotToken | undefined, typeArguments: readonly TypeNode[] | undefined, argumentsArray: readonly Expression[] | undefined): CallChain;\n' +
    '        updateCallChain(node: CallChain, expression: Expression, questionDotToken: QuestionDotToken | undefined, typeArguments: readonly TypeNode[] | undefined, argumentsArray: readonly Expression[]): CallChain;\n' +
    '        createNewExpression(expression: Expression, typeArguments: readonly TypeNode[] | undefined, argumentsArray: readonly Expression[] | undefined): NewExpression;\n' +
    '        updateNewExpression(node: NewExpression, expression: Expression, typeArguments: readonly TypeNode[] | undefined, argumentsArray: readonly Expression[] | undefined): NewExpression;\n' +
    '        createTaggedTemplateExpression(tag: Expression, typeArguments: readonly TypeNode[] | undefined, template: TemplateLiteral): TaggedTemplateExpression;\n' +
    '        updateTaggedTemplateExpression(node: TaggedTemplateExpression, tag: Expression, typeArguments: readonly TypeNode[] | undefined, template: TemplateLiteral): TaggedTemplateExpression;\n' +
    '        createTypeAssertion(type: TypeNode, expression: Expression): TypeAssertion;\n' +
    '        updateTypeAssertion(node: TypeAssertion, type: TypeNode, expression: Expression): TypeAssertion;\n' +
    '        createParenthesizedExpression(expression: Expression): ParenthesizedExpression;\n' +
    '        updateParenthesizedExpression(node: ParenthesizedExpression, expression: Expression): ParenthesizedExpression;\n' +
    '        createFunctionExpression(modifiers: readonly Modifier[] | undefined, asteriskToken: AsteriskToken | undefined, name: string | Identifier | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[] | undefined, type: TypeNode | undefined, body: Block): FunctionExpression;\n' +
    '        updateFunctionExpression(node: FunctionExpression, modifiers: readonly Modifier[] | undefined, asteriskToken: AsteriskToken | undefined, name: Identifier | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, body: Block): FunctionExpression;\n' +
    '        createArrowFunction(modifiers: readonly Modifier[] | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, equalsGreaterThanToken: EqualsGreaterThanToken | undefined, body: ConciseBody): ArrowFunction;\n' +
    '        updateArrowFunction(node: ArrowFunction, modifiers: readonly Modifier[] | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, equalsGreaterThanToken: EqualsGreaterThanToken, body: ConciseBody): ArrowFunction;\n' +
    '        createDeleteExpression(expression: Expression): DeleteExpression;\n' +
    '        updateDeleteExpression(node: DeleteExpression, expression: Expression): DeleteExpression;\n' +
    '        createTypeOfExpression(expression: Expression): TypeOfExpression;\n' +
    '        updateTypeOfExpression(node: TypeOfExpression, expression: Expression): TypeOfExpression;\n' +
    '        createVoidExpression(expression: Expression): VoidExpression;\n' +
    '        updateVoidExpression(node: VoidExpression, expression: Expression): VoidExpression;\n' +
    '        createAwaitExpression(expression: Expression): AwaitExpression;\n' +
    '        updateAwaitExpression(node: AwaitExpression, expression: Expression): AwaitExpression;\n' +
    '        createPrefixUnaryExpression(operator: PrefixUnaryOperator, operand: Expression): PrefixUnaryExpression;\n' +
    '        updatePrefixUnaryExpression(node: PrefixUnaryExpression, operand: Expression): PrefixUnaryExpression;\n' +
    '        createPostfixUnaryExpression(operand: Expression, operator: PostfixUnaryOperator): PostfixUnaryExpression;\n' +
    '        updatePostfixUnaryExpression(node: PostfixUnaryExpression, operand: Expression): PostfixUnaryExpression;\n' +
    '        createBinaryExpression(left: Expression, operator: BinaryOperator | BinaryOperatorToken, right: Expression): BinaryExpression;\n' +
    '        updateBinaryExpression(node: BinaryExpression, left: Expression, operator: BinaryOperator | BinaryOperatorToken, right: Expression): BinaryExpression;\n' +
    '        createConditionalExpression(condition: Expression, questionToken: QuestionToken | undefined, whenTrue: Expression, colonToken: ColonToken | undefined, whenFalse: Expression): ConditionalExpression;\n' +
    '        updateConditionalExpression(node: ConditionalExpression, condition: Expression, questionToken: QuestionToken, whenTrue: Expression, colonToken: ColonToken, whenFalse: Expression): ConditionalExpression;\n' +
    '        createTemplateExpression(head: TemplateHead, templateSpans: readonly TemplateSpan[]): TemplateExpression;\n' +
    '        updateTemplateExpression(node: TemplateExpression, head: TemplateHead, templateSpans: readonly TemplateSpan[]): TemplateExpression;\n' +
    '        createTemplateHead(text: string, rawText?: string, templateFlags?: TokenFlags): TemplateHead;\n' +
    '        createTemplateHead(text: string | undefined, rawText: string, templateFlags?: TokenFlags): TemplateHead;\n' +
    '        createTemplateMiddle(text: string, rawText?: string, templateFlags?: TokenFlags): TemplateMiddle;\n' +
    '        createTemplateMiddle(text: string | undefined, rawText: string, templateFlags?: TokenFlags): TemplateMiddle;\n' +
    '        createTemplateTail(text: string, rawText?: string, templateFlags?: TokenFlags): TemplateTail;\n' +
    '        createTemplateTail(text: string | undefined, rawText: string, templateFlags?: TokenFlags): TemplateTail;\n' +
    '        createNoSubstitutionTemplateLiteral(text: string, rawText?: string): NoSubstitutionTemplateLiteral;\n' +
    '        createNoSubstitutionTemplateLiteral(text: string | undefined, rawText: string): NoSubstitutionTemplateLiteral;\n' +
    '        createYieldExpression(asteriskToken: AsteriskToken, expression: Expression): YieldExpression;\n' +
    '        createYieldExpression(asteriskToken: undefined, expression: Expression | undefined): YieldExpression;\n' +
    '        updateYieldExpression(node: YieldExpression, asteriskToken: AsteriskToken | undefined, expression: Expression | undefined): YieldExpression;\n' +
    '        createSpreadElement(expression: Expression): SpreadElement;\n' +
    '        updateSpreadElement(node: SpreadElement, expression: Expression): SpreadElement;\n' +
    '        createClassExpression(decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: string | Identifier | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, heritageClauses: readonly HeritageClause[] | undefined, members: readonly ClassElement[]): ClassExpression;\n' +
    '        updateClassExpression(node: ClassExpression, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: Identifier | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, heritageClauses: readonly HeritageClause[] | undefined, members: readonly ClassElement[]): ClassExpression;\n' +
    '        createOmittedExpression(): OmittedExpression;\n' +
    '        createExpressionWithTypeArguments(expression: Expression, typeArguments: readonly TypeNode[] | undefined): ExpressionWithTypeArguments;\n' +
    '        updateExpressionWithTypeArguments(node: ExpressionWithTypeArguments, expression: Expression, typeArguments: readonly TypeNode[] | undefined): ExpressionWithTypeArguments;\n' +
    '        createAsExpression(expression: Expression, type: TypeNode): AsExpression;\n' +
    '        updateAsExpression(node: AsExpression, expression: Expression, type: TypeNode): AsExpression;\n' +
    '        createNonNullExpression(expression: Expression): NonNullExpression;\n' +
    '        updateNonNullExpression(node: NonNullExpression, expression: Expression): NonNullExpression;\n' +
    '        createNonNullChain(expression: Expression): NonNullChain;\n' +
    '        updateNonNullChain(node: NonNullChain, expression: Expression): NonNullChain;\n' +
    '        createMetaProperty(keywordToken: MetaProperty["keywordToken"], name: Identifier): MetaProperty;\n' +
    '        updateMetaProperty(node: MetaProperty, name: Identifier): MetaProperty;\n' +
    '        createTemplateSpan(expression: Expression, literal: TemplateMiddle | TemplateTail): TemplateSpan;\n' +
    '        updateTemplateSpan(node: TemplateSpan, expression: Expression, literal: TemplateMiddle | TemplateTail): TemplateSpan;\n' +
    '        createSemicolonClassElement(): SemicolonClassElement;\n' +
    '        createBlock(statements: readonly Statement[], multiLine?: boolean): Block;\n' +
    '        updateBlock(node: Block, statements: readonly Statement[]): Block;\n' +
    '        createVariableStatement(modifiers: readonly Modifier[] | undefined, declarationList: VariableDeclarationList | readonly VariableDeclaration[]): VariableStatement;\n' +
    '        updateVariableStatement(node: VariableStatement, modifiers: readonly Modifier[] | undefined, declarationList: VariableDeclarationList): VariableStatement;\n' +
    '        createEmptyStatement(): EmptyStatement;\n' +
    '        createExpressionStatement(expression: Expression): ExpressionStatement;\n' +
    '        updateExpressionStatement(node: ExpressionStatement, expression: Expression): ExpressionStatement;\n' +
    '        createIfStatement(expression: Expression, thenStatement: Statement, elseStatement?: Statement): IfStatement;\n' +
    '        updateIfStatement(node: IfStatement, expression: Expression, thenStatement: Statement, elseStatement: Statement | undefined): IfStatement;\n' +
    '        createDoStatement(statement: Statement, expression: Expression): DoStatement;\n' +
    '        updateDoStatement(node: DoStatement, statement: Statement, expression: Expression): DoStatement;\n' +
    '        createWhileStatement(expression: Expression, statement: Statement): WhileStatement;\n' +
    '        updateWhileStatement(node: WhileStatement, expression: Expression, statement: Statement): WhileStatement;\n' +
    '        createForStatement(initializer: ForInitializer | undefined, condition: Expression | undefined, incrementor: Expression | undefined, statement: Statement): ForStatement;\n' +
    '        updateForStatement(node: ForStatement, initializer: ForInitializer | undefined, condition: Expression | undefined, incrementor: Expression | undefined, statement: Statement): ForStatement;\n' +
    '        createForInStatement(initializer: ForInitializer, expression: Expression, statement: Statement): ForInStatement;\n' +
    '        updateForInStatement(node: ForInStatement, initializer: ForInitializer, expression: Expression, statement: Statement): ForInStatement;\n' +
    '        createForOfStatement(awaitModifier: AwaitKeyword | undefined, initializer: ForInitializer, expression: Expression, statement: Statement): ForOfStatement;\n' +
    '        updateForOfStatement(node: ForOfStatement, awaitModifier: AwaitKeyword | undefined, initializer: ForInitializer, expression: Expression, statement: Statement): ForOfStatement;\n' +
    '        createContinueStatement(label?: string | Identifier): ContinueStatement;\n' +
    '        updateContinueStatement(node: ContinueStatement, label: Identifier | undefined): ContinueStatement;\n' +
    '        createBreakStatement(label?: string | Identifier): BreakStatement;\n' +
    '        updateBreakStatement(node: BreakStatement, label: Identifier | undefined): BreakStatement;\n' +
    '        createReturnStatement(expression?: Expression): ReturnStatement;\n' +
    '        updateReturnStatement(node: ReturnStatement, expression: Expression | undefined): ReturnStatement;\n' +
    '        createWithStatement(expression: Expression, statement: Statement): WithStatement;\n' +
    '        updateWithStatement(node: WithStatement, expression: Expression, statement: Statement): WithStatement;\n' +
    '        createSwitchStatement(expression: Expression, caseBlock: CaseBlock): SwitchStatement;\n' +
    '        updateSwitchStatement(node: SwitchStatement, expression: Expression, caseBlock: CaseBlock): SwitchStatement;\n' +
    '        createLabeledStatement(label: string | Identifier, statement: Statement): LabeledStatement;\n' +
    '        updateLabeledStatement(node: LabeledStatement, label: Identifier, statement: Statement): LabeledStatement;\n' +
    '        createThrowStatement(expression: Expression): ThrowStatement;\n' +
    '        updateThrowStatement(node: ThrowStatement, expression: Expression): ThrowStatement;\n' +
    '        createTryStatement(tryBlock: Block, catchClause: CatchClause | undefined, finallyBlock: Block | undefined): TryStatement;\n' +
    '        updateTryStatement(node: TryStatement, tryBlock: Block, catchClause: CatchClause | undefined, finallyBlock: Block | undefined): TryStatement;\n' +
    '        createDebuggerStatement(): DebuggerStatement;\n' +
    '        createVariableDeclaration(name: string | BindingName, exclamationToken?: ExclamationToken, type?: TypeNode, initializer?: Expression): VariableDeclaration;\n' +
    '        updateVariableDeclaration(node: VariableDeclaration, name: BindingName, exclamationToken: ExclamationToken | undefined, type: TypeNode | undefined, initializer: Expression | undefined): VariableDeclaration;\n' +
    '        createVariableDeclarationList(declarations: readonly VariableDeclaration[], flags?: NodeFlags): VariableDeclarationList;\n' +
    '        updateVariableDeclarationList(node: VariableDeclarationList, declarations: readonly VariableDeclaration[]): VariableDeclarationList;\n' +
    '        createFunctionDeclaration(decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, asteriskToken: AsteriskToken | undefined, name: string | Identifier | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, body: Block | undefined): FunctionDeclaration;\n' +
    '        updateFunctionDeclaration(node: FunctionDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, asteriskToken: AsteriskToken | undefined, name: Identifier | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, body: Block | undefined): FunctionDeclaration;\n' +
    '        createClassDeclaration(decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: string | Identifier | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, heritageClauses: readonly HeritageClause[] | undefined, members: readonly ClassElement[]): ClassDeclaration;\n' +
    '        updateClassDeclaration(node: ClassDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: Identifier | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, heritageClauses: readonly HeritageClause[] | undefined, members: readonly ClassElement[]): ClassDeclaration;\n' +
    '        createInterfaceDeclaration(decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: string | Identifier, typeParameters: readonly TypeParameterDeclaration[] | undefined, heritageClauses: readonly HeritageClause[] | undefined, members: readonly TypeElement[]): InterfaceDeclaration;\n' +
    '        updateInterfaceDeclaration(node: InterfaceDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: Identifier, typeParameters: readonly TypeParameterDeclaration[] | undefined, heritageClauses: readonly HeritageClause[] | undefined, members: readonly TypeElement[]): InterfaceDeclaration;\n' +
    '        createTypeAliasDeclaration(decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: string | Identifier, typeParameters: readonly TypeParameterDeclaration[] | undefined, type: TypeNode): TypeAliasDeclaration;\n' +
    '        updateTypeAliasDeclaration(node: TypeAliasDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: Identifier, typeParameters: readonly TypeParameterDeclaration[] | undefined, type: TypeNode): TypeAliasDeclaration;\n' +
    '        createEnumDeclaration(decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: string | Identifier, members: readonly EnumMember[]): EnumDeclaration;\n' +
    '        updateEnumDeclaration(node: EnumDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: Identifier, members: readonly EnumMember[]): EnumDeclaration;\n' +
    '        createModuleDeclaration(decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: ModuleName, body: ModuleBody | undefined, flags?: NodeFlags): ModuleDeclaration;\n' +
    '        updateModuleDeclaration(node: ModuleDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: ModuleName, body: ModuleBody | undefined): ModuleDeclaration;\n' +
    '        createModuleBlock(statements: readonly Statement[]): ModuleBlock;\n' +
    '        updateModuleBlock(node: ModuleBlock, statements: readonly Statement[]): ModuleBlock;\n' +
    '        createCaseBlock(clauses: readonly CaseOrDefaultClause[]): CaseBlock;\n' +
    '        updateCaseBlock(node: CaseBlock, clauses: readonly CaseOrDefaultClause[]): CaseBlock;\n' +
    '        createNamespaceExportDeclaration(name: string | Identifier): NamespaceExportDeclaration;\n' +
    '        updateNamespaceExportDeclaration(node: NamespaceExportDeclaration, name: Identifier): NamespaceExportDeclaration;\n' +
    '        createImportEqualsDeclaration(decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, isTypeOnly: boolean, name: string | Identifier, moduleReference: ModuleReference): ImportEqualsDeclaration;\n' +
    '        updateImportEqualsDeclaration(node: ImportEqualsDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, isTypeOnly: boolean, name: Identifier, moduleReference: ModuleReference): ImportEqualsDeclaration;\n' +
    '        createImportDeclaration(decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, importClause: ImportClause | undefined, moduleSpecifier: Expression, assertClause?: AssertClause): ImportDeclaration;\n' +
    '        updateImportDeclaration(node: ImportDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, importClause: ImportClause | undefined, moduleSpecifier: Expression, assertClause: AssertClause | undefined): ImportDeclaration;\n' +
    '        createImportClause(isTypeOnly: boolean, name: Identifier | undefined, namedBindings: NamedImportBindings | undefined): ImportClause;\n' +
    '        updateImportClause(node: ImportClause, isTypeOnly: boolean, name: Identifier | undefined, namedBindings: NamedImportBindings | undefined): ImportClause;\n' +
    '        createAssertClause(elements: NodeArray<AssertEntry>, multiLine?: boolean): AssertClause;\n' +
    '        updateAssertClause(node: AssertClause, elements: NodeArray<AssertEntry>, multiLine?: boolean): AssertClause;\n' +
    '        createAssertEntry(name: AssertionKey, value: Expression): AssertEntry;\n' +
    '        updateAssertEntry(node: AssertEntry, name: AssertionKey, value: Expression): AssertEntry;\n' +
    '        createImportTypeAssertionContainer(clause: AssertClause, multiLine?: boolean): ImportTypeAssertionContainer;\n' +
    '        updateImportTypeAssertionContainer(node: ImportTypeAssertionContainer, clause: AssertClause, multiLine?: boolean): ImportTypeAssertionContainer;\n' +
    '        createNamespaceImport(name: Identifier): NamespaceImport;\n' +
    '        updateNamespaceImport(node: NamespaceImport, name: Identifier): NamespaceImport;\n' +
    '        createNamespaceExport(name: Identifier): NamespaceExport;\n' +
    '        updateNamespaceExport(node: NamespaceExport, name: Identifier): NamespaceExport;\n' +
    '        createNamedImports(elements: readonly ImportSpecifier[]): NamedImports;\n' +
    '        updateNamedImports(node: NamedImports, elements: readonly ImportSpecifier[]): NamedImports;\n' +
    '        createImportSpecifier(isTypeOnly: boolean, propertyName: Identifier | undefined, name: Identifier): ImportSpecifier;\n' +
    '        updateImportSpecifier(node: ImportSpecifier, isTypeOnly: boolean, propertyName: Identifier | undefined, name: Identifier): ImportSpecifier;\n' +
    '        createExportAssignment(decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, isExportEquals: boolean | undefined, expression: Expression): ExportAssignment;\n' +
    '        updateExportAssignment(node: ExportAssignment, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, expression: Expression): ExportAssignment;\n' +
    '        createExportDeclaration(decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, isTypeOnly: boolean, exportClause: NamedExportBindings | undefined, moduleSpecifier?: Expression, assertClause?: AssertClause): ExportDeclaration;\n' +
    '        updateExportDeclaration(node: ExportDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, isTypeOnly: boolean, exportClause: NamedExportBindings | undefined, moduleSpecifier: Expression | undefined, assertClause: AssertClause | undefined): ExportDeclaration;\n' +
    '        createNamedExports(elements: readonly ExportSpecifier[]): NamedExports;\n' +
    '        updateNamedExports(node: NamedExports, elements: readonly ExportSpecifier[]): NamedExports;\n' +
    '        createExportSpecifier(isTypeOnly: boolean, propertyName: string | Identifier | undefined, name: string | Identifier): ExportSpecifier;\n' +
    '        updateExportSpecifier(node: ExportSpecifier, isTypeOnly: boolean, propertyName: Identifier | undefined, name: Identifier): ExportSpecifier;\n' +
    '        createExternalModuleReference(expression: Expression): ExternalModuleReference;\n' +
    '        updateExternalModuleReference(node: ExternalModuleReference, expression: Expression): ExternalModuleReference;\n' +
    '        createJSDocAllType(): JSDocAllType;\n' +
    '        createJSDocUnknownType(): JSDocUnknownType;\n' +
    '        createJSDocNonNullableType(type: TypeNode, postfix?: boolean): JSDocNonNullableType;\n' +
    '        updateJSDocNonNullableType(node: JSDocNonNullableType, type: TypeNode): JSDocNonNullableType;\n' +
    '        createJSDocNullableType(type: TypeNode, postfix?: boolean): JSDocNullableType;\n' +
    '        updateJSDocNullableType(node: JSDocNullableType, type: TypeNode): JSDocNullableType;\n' +
    '        createJSDocOptionalType(type: TypeNode): JSDocOptionalType;\n' +
    '        updateJSDocOptionalType(node: JSDocOptionalType, type: TypeNode): JSDocOptionalType;\n' +
    '        createJSDocFunctionType(parameters: readonly ParameterDeclaration[], type: TypeNode | undefined): JSDocFunctionType;\n' +
    '        updateJSDocFunctionType(node: JSDocFunctionType, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined): JSDocFunctionType;\n' +
    '        createJSDocVariadicType(type: TypeNode): JSDocVariadicType;\n' +
    '        updateJSDocVariadicType(node: JSDocVariadicType, type: TypeNode): JSDocVariadicType;\n' +
    '        createJSDocNamepathType(type: TypeNode): JSDocNamepathType;\n' +
    '        updateJSDocNamepathType(node: JSDocNamepathType, type: TypeNode): JSDocNamepathType;\n' +
    '        createJSDocTypeExpression(type: TypeNode): JSDocTypeExpression;\n' +
    '        updateJSDocTypeExpression(node: JSDocTypeExpression, type: TypeNode): JSDocTypeExpression;\n' +
    '        createJSDocNameReference(name: EntityName | JSDocMemberName): JSDocNameReference;\n' +
    '        updateJSDocNameReference(node: JSDocNameReference, name: EntityName | JSDocMemberName): JSDocNameReference;\n' +
    '        createJSDocMemberName(left: EntityName | JSDocMemberName, right: Identifier): JSDocMemberName;\n' +
    '        updateJSDocMemberName(node: JSDocMemberName, left: EntityName | JSDocMemberName, right: Identifier): JSDocMemberName;\n' +
    '        createJSDocLink(name: EntityName | JSDocMemberName | undefined, text: string): JSDocLink;\n' +
    '        updateJSDocLink(node: JSDocLink, name: EntityName | JSDocMemberName | undefined, text: string): JSDocLink;\n' +
    '        createJSDocLinkCode(name: EntityName | JSDocMemberName | undefined, text: string): JSDocLinkCode;\n' +
    '        updateJSDocLinkCode(node: JSDocLinkCode, name: EntityName | JSDocMemberName | undefined, text: string): JSDocLinkCode;\n' +
    '        createJSDocLinkPlain(name: EntityName | JSDocMemberName | undefined, text: string): JSDocLinkPlain;\n' +
    '        updateJSDocLinkPlain(node: JSDocLinkPlain, name: EntityName | JSDocMemberName | undefined, text: string): JSDocLinkPlain;\n' +
    '        createJSDocTypeLiteral(jsDocPropertyTags?: readonly JSDocPropertyLikeTag[], isArrayType?: boolean): JSDocTypeLiteral;\n' +
    '        updateJSDocTypeLiteral(node: JSDocTypeLiteral, jsDocPropertyTags: readonly JSDocPropertyLikeTag[] | undefined, isArrayType: boolean | undefined): JSDocTypeLiteral;\n' +
    '        createJSDocSignature(typeParameters: readonly JSDocTemplateTag[] | undefined, parameters: readonly JSDocParameterTag[], type?: JSDocReturnTag): JSDocSignature;\n' +
    '        updateJSDocSignature(node: JSDocSignature, typeParameters: readonly JSDocTemplateTag[] | undefined, parameters: readonly JSDocParameterTag[], type: JSDocReturnTag | undefined): JSDocSignature;\n' +
    '        createJSDocTemplateTag(tagName: Identifier | undefined, constraint: JSDocTypeExpression | undefined, typeParameters: readonly TypeParameterDeclaration[], comment?: string | NodeArray<JSDocComment>): JSDocTemplateTag;\n' +
    '        updateJSDocTemplateTag(node: JSDocTemplateTag, tagName: Identifier | undefined, constraint: JSDocTypeExpression | undefined, typeParameters: readonly TypeParameterDeclaration[], comment: string | NodeArray<JSDocComment> | undefined): JSDocTemplateTag;\n' +
    '        createJSDocTypedefTag(tagName: Identifier | undefined, typeExpression?: JSDocTypeExpression | JSDocTypeLiteral, fullName?: Identifier | JSDocNamespaceDeclaration, comment?: string | NodeArray<JSDocComment>): JSDocTypedefTag;\n' +
    '        updateJSDocTypedefTag(node: JSDocTypedefTag, tagName: Identifier | undefined, typeExpression: JSDocTypeExpression | JSDocTypeLiteral | undefined, fullName: Identifier | JSDocNamespaceDeclaration | undefined, comment: string | NodeArray<JSDocComment> | undefined): JSDocTypedefTag;\n' +
    '        createJSDocParameterTag(tagName: Identifier | undefined, name: EntityName, isBracketed: boolean, typeExpression?: JSDocTypeExpression, isNameFirst?: boolean, comment?: string | NodeArray<JSDocComment>): JSDocParameterTag;\n' +
    '        updateJSDocParameterTag(node: JSDocParameterTag, tagName: Identifier | undefined, name: EntityName, isBracketed: boolean, typeExpression: JSDocTypeExpression | undefined, isNameFirst: boolean, comment: string | NodeArray<JSDocComment> | undefined): JSDocParameterTag;\n' +
    '        createJSDocPropertyTag(tagName: Identifier | undefined, name: EntityName, isBracketed: boolean, typeExpression?: JSDocTypeExpression, isNameFirst?: boolean, comment?: string | NodeArray<JSDocComment>): JSDocPropertyTag;\n' +
    '        updateJSDocPropertyTag(node: JSDocPropertyTag, tagName: Identifier | undefined, name: EntityName, isBracketed: boolean, typeExpression: JSDocTypeExpression | undefined, isNameFirst: boolean, comment: string | NodeArray<JSDocComment> | undefined): JSDocPropertyTag;\n' +
    '        createJSDocTypeTag(tagName: Identifier | undefined, typeExpression: JSDocTypeExpression, comment?: string | NodeArray<JSDocComment>): JSDocTypeTag;\n' +
    '        updateJSDocTypeTag(node: JSDocTypeTag, tagName: Identifier | undefined, typeExpression: JSDocTypeExpression, comment: string | NodeArray<JSDocComment> | undefined): JSDocTypeTag;\n' +
    '        createJSDocSeeTag(tagName: Identifier | undefined, nameExpression: JSDocNameReference | undefined, comment?: string | NodeArray<JSDocComment>): JSDocSeeTag;\n' +
    '        updateJSDocSeeTag(node: JSDocSeeTag, tagName: Identifier | undefined, nameExpression: JSDocNameReference | undefined, comment?: string | NodeArray<JSDocComment>): JSDocSeeTag;\n' +
    '        createJSDocReturnTag(tagName: Identifier | undefined, typeExpression?: JSDocTypeExpression, comment?: string | NodeArray<JSDocComment>): JSDocReturnTag;\n' +
    '        updateJSDocReturnTag(node: JSDocReturnTag, tagName: Identifier | undefined, typeExpression: JSDocTypeExpression | undefined, comment: string | NodeArray<JSDocComment> | undefined): JSDocReturnTag;\n' +
    '        createJSDocThisTag(tagName: Identifier | undefined, typeExpression: JSDocTypeExpression, comment?: string | NodeArray<JSDocComment>): JSDocThisTag;\n' +
    '        updateJSDocThisTag(node: JSDocThisTag, tagName: Identifier | undefined, typeExpression: JSDocTypeExpression | undefined, comment: string | NodeArray<JSDocComment> | undefined): JSDocThisTag;\n' +
    '        createJSDocEnumTag(tagName: Identifier | undefined, typeExpression: JSDocTypeExpression, comment?: string | NodeArray<JSDocComment>): JSDocEnumTag;\n' +
    '        updateJSDocEnumTag(node: JSDocEnumTag, tagName: Identifier | undefined, typeExpression: JSDocTypeExpression, comment: string | NodeArray<JSDocComment> | undefined): JSDocEnumTag;\n' +
    '        createJSDocCallbackTag(tagName: Identifier | undefined, typeExpression: JSDocSignature, fullName?: Identifier | JSDocNamespaceDeclaration, comment?: string | NodeArray<JSDocComment>): JSDocCallbackTag;\n' +
    '        updateJSDocCallbackTag(node: JSDocCallbackTag, tagName: Identifier | undefined, typeExpression: JSDocSignature, fullName: Identifier | JSDocNamespaceDeclaration | undefined, comment: string | NodeArray<JSDocComment> | undefined): JSDocCallbackTag;\n' +
    '        createJSDocAugmentsTag(tagName: Identifier | undefined, className: JSDocAugmentsTag["class"], comment?: string | NodeArray<JSDocComment>): JSDocAugmentsTag;\n' +
    '        updateJSDocAugmentsTag(node: JSDocAugmentsTag, tagName: Identifier | undefined, className: JSDocAugmentsTag["class"], comment: string | NodeArray<JSDocComment> | undefined): JSDocAugmentsTag;\n' +
    '        createJSDocImplementsTag(tagName: Identifier | undefined, className: JSDocImplementsTag["class"], comment?: string | NodeArray<JSDocComment>): JSDocImplementsTag;\n' +
    '        updateJSDocImplementsTag(node: JSDocImplementsTag, tagName: Identifier | undefined, className: JSDocImplementsTag["class"], comment: string | NodeArray<JSDocComment> | undefined): JSDocImplementsTag;\n' +
    '        createJSDocAuthorTag(tagName: Identifier | undefined, comment?: string | NodeArray<JSDocComment>): JSDocAuthorTag;\n' +
    '        updateJSDocAuthorTag(node: JSDocAuthorTag, tagName: Identifier | undefined, comment: string | NodeArray<JSDocComment> | undefined): JSDocAuthorTag;\n' +
    '        createJSDocClassTag(tagName: Identifier | undefined, comment?: string | NodeArray<JSDocComment>): JSDocClassTag;\n' +
    '        updateJSDocClassTag(node: JSDocClassTag, tagName: Identifier | undefined, comment: string | NodeArray<JSDocComment> | undefined): JSDocClassTag;\n' +
    '        createJSDocPublicTag(tagName: Identifier | undefined, comment?: string | NodeArray<JSDocComment>): JSDocPublicTag;\n' +
    '        updateJSDocPublicTag(node: JSDocPublicTag, tagName: Identifier | undefined, comment: string | NodeArray<JSDocComment> | undefined): JSDocPublicTag;\n' +
    '        createJSDocPrivateTag(tagName: Identifier | undefined, comment?: string | NodeArray<JSDocComment>): JSDocPrivateTag;\n' +
    '        updateJSDocPrivateTag(node: JSDocPrivateTag, tagName: Identifier | undefined, comment: string | NodeArray<JSDocComment> | undefined): JSDocPrivateTag;\n' +
    '        createJSDocProtectedTag(tagName: Identifier | undefined, comment?: string | NodeArray<JSDocComment>): JSDocProtectedTag;\n' +
    '        updateJSDocProtectedTag(node: JSDocProtectedTag, tagName: Identifier | undefined, comment: string | NodeArray<JSDocComment> | undefined): JSDocProtectedTag;\n' +
    '        createJSDocReadonlyTag(tagName: Identifier | undefined, comment?: string | NodeArray<JSDocComment>): JSDocReadonlyTag;\n' +
    '        updateJSDocReadonlyTag(node: JSDocReadonlyTag, tagName: Identifier | undefined, comment: string | NodeArray<JSDocComment> | undefined): JSDocReadonlyTag;\n' +
    '        createJSDocUnknownTag(tagName: Identifier, comment?: string | NodeArray<JSDocComment>): JSDocUnknownTag;\n' +
    '        updateJSDocUnknownTag(node: JSDocUnknownTag, tagName: Identifier, comment: string | NodeArray<JSDocComment> | undefined): JSDocUnknownTag;\n' +
    '        createJSDocDeprecatedTag(tagName: Identifier, comment?: string | NodeArray<JSDocComment>): JSDocDeprecatedTag;\n' +
    '        updateJSDocDeprecatedTag(node: JSDocDeprecatedTag, tagName: Identifier, comment?: string | NodeArray<JSDocComment>): JSDocDeprecatedTag;\n' +
    '        createJSDocOverrideTag(tagName: Identifier, comment?: string | NodeArray<JSDocComment>): JSDocOverrideTag;\n' +
    '        updateJSDocOverrideTag(node: JSDocOverrideTag, tagName: Identifier, comment?: string | NodeArray<JSDocComment>): JSDocOverrideTag;\n' +
    '        createJSDocText(text: string): JSDocText;\n' +
    '        updateJSDocText(node: JSDocText, text: string): JSDocText;\n' +
    '        createJSDocComment(comment?: string | NodeArray<JSDocComment> | undefined, tags?: readonly JSDocTag[] | undefined): JSDoc;\n' +
    '        updateJSDocComment(node: JSDoc, comment: string | NodeArray<JSDocComment> | undefined, tags: readonly JSDocTag[] | undefined): JSDoc;\n' +
    '        createJsxElement(openingElement: JsxOpeningElement, children: readonly JsxChild[], closingElement: JsxClosingElement): JsxElement;\n' +
    '        updateJsxElement(node: JsxElement, openingElement: JsxOpeningElement, children: readonly JsxChild[], closingElement: JsxClosingElement): JsxElement;\n' +
    '        createJsxSelfClosingElement(tagName: JsxTagNameExpression, typeArguments: readonly TypeNode[] | undefined, attributes: JsxAttributes): JsxSelfClosingElement;\n' +
    '        updateJsxSelfClosingElement(node: JsxSelfClosingElement, tagName: JsxTagNameExpression, typeArguments: readonly TypeNode[] | undefined, attributes: JsxAttributes): JsxSelfClosingElement;\n' +
    '        createJsxOpeningElement(tagName: JsxTagNameExpression, typeArguments: readonly TypeNode[] | undefined, attributes: JsxAttributes): JsxOpeningElement;\n' +
    '        updateJsxOpeningElement(node: JsxOpeningElement, tagName: JsxTagNameExpression, typeArguments: readonly TypeNode[] | undefined, attributes: JsxAttributes): JsxOpeningElement;\n' +
    '        createJsxClosingElement(tagName: JsxTagNameExpression): JsxClosingElement;\n' +
    '        updateJsxClosingElement(node: JsxClosingElement, tagName: JsxTagNameExpression): JsxClosingElement;\n' +
    '        createJsxFragment(openingFragment: JsxOpeningFragment, children: readonly JsxChild[], closingFragment: JsxClosingFragment): JsxFragment;\n' +
    '        createJsxText(text: string, containsOnlyTriviaWhiteSpaces?: boolean): JsxText;\n' +
    '        updateJsxText(node: JsxText, text: string, containsOnlyTriviaWhiteSpaces?: boolean): JsxText;\n' +
    '        createJsxOpeningFragment(): JsxOpeningFragment;\n' +
    '        createJsxJsxClosingFragment(): JsxClosingFragment;\n' +
    '        updateJsxFragment(node: JsxFragment, openingFragment: JsxOpeningFragment, children: readonly JsxChild[], closingFragment: JsxClosingFragment): JsxFragment;\n' +
    '        createJsxAttribute(name: Identifier, initializer: StringLiteral | JsxExpression | undefined): JsxAttribute;\n' +
    '        updateJsxAttribute(node: JsxAttribute, name: Identifier, initializer: StringLiteral | JsxExpression | undefined): JsxAttribute;\n' +
    '        createJsxAttributes(properties: readonly JsxAttributeLike[]): JsxAttributes;\n' +
    '        updateJsxAttributes(node: JsxAttributes, properties: readonly JsxAttributeLike[]): JsxAttributes;\n' +
    '        createJsxSpreadAttribute(expression: Expression): JsxSpreadAttribute;\n' +
    '        updateJsxSpreadAttribute(node: JsxSpreadAttribute, expression: Expression): JsxSpreadAttribute;\n' +
    '        createJsxExpression(dotDotDotToken: DotDotDotToken | undefined, expression: Expression | undefined): JsxExpression;\n' +
    '        updateJsxExpression(node: JsxExpression, expression: Expression | undefined): JsxExpression;\n' +
    '        createCaseClause(expression: Expression, statements: readonly Statement[]): CaseClause;\n' +
    '        updateCaseClause(node: CaseClause, expression: Expression, statements: readonly Statement[]): CaseClause;\n' +
    '        createDefaultClause(statements: readonly Statement[]): DefaultClause;\n' +
    '        updateDefaultClause(node: DefaultClause, statements: readonly Statement[]): DefaultClause;\n' +
    '        createHeritageClause(token: HeritageClause["token"], types: readonly ExpressionWithTypeArguments[]): HeritageClause;\n' +
    '        updateHeritageClause(node: HeritageClause, types: readonly ExpressionWithTypeArguments[]): HeritageClause;\n' +
    '        createCatchClause(variableDeclaration: string | BindingName | VariableDeclaration | undefined, block: Block): CatchClause;\n' +
    '        updateCatchClause(node: CatchClause, variableDeclaration: VariableDeclaration | undefined, block: Block): CatchClause;\n' +
    '        createPropertyAssignment(name: string | PropertyName, initializer: Expression): PropertyAssignment;\n' +
    '        updatePropertyAssignment(node: PropertyAssignment, name: PropertyName, initializer: Expression): PropertyAssignment;\n' +
    '        createShorthandPropertyAssignment(name: string | Identifier, objectAssignmentInitializer?: Expression): ShorthandPropertyAssignment;\n' +
    '        updateShorthandPropertyAssignment(node: ShorthandPropertyAssignment, name: Identifier, objectAssignmentInitializer: Expression | undefined): ShorthandPropertyAssignment;\n' +
    '        createSpreadAssignment(expression: Expression): SpreadAssignment;\n' +
    '        updateSpreadAssignment(node: SpreadAssignment, expression: Expression): SpreadAssignment;\n' +
    '        createEnumMember(name: string | PropertyName, initializer?: Expression): EnumMember;\n' +
    '        updateEnumMember(node: EnumMember, name: PropertyName, initializer: Expression | undefined): EnumMember;\n' +
    '        createSourceFile(statements: readonly Statement[], endOfFileToken: EndOfFileToken, flags: NodeFlags): SourceFile;\n' +
    '        updateSourceFile(node: SourceFile, statements: readonly Statement[], isDeclarationFile?: boolean, referencedFiles?: readonly FileReference[], typeReferences?: readonly FileReference[], hasNoDefaultLib?: boolean, libReferences?: readonly FileReference[]): SourceFile;\n' +
    '        createNotEmittedStatement(original: Node): NotEmittedStatement;\n' +
    '        createPartiallyEmittedExpression(expression: Expression, original?: Node): PartiallyEmittedExpression;\n' +
    '        updatePartiallyEmittedExpression(node: PartiallyEmittedExpression, expression: Expression): PartiallyEmittedExpression;\n' +
    '        createCommaListExpression(elements: readonly Expression[]): CommaListExpression;\n' +
    '        updateCommaListExpression(node: CommaListExpression, elements: readonly Expression[]): CommaListExpression;\n' +
    '        createBundle(sourceFiles: readonly SourceFile[], prepends?: readonly (UnparsedSource | InputFiles)[]): Bundle;\n' +
    '        updateBundle(node: Bundle, sourceFiles: readonly SourceFile[], prepends?: readonly (UnparsedSource | InputFiles)[]): Bundle;\n' +
    '        createComma(left: Expression, right: Expression): BinaryExpression;\n' +
    '        createAssignment(left: ObjectLiteralExpression | ArrayLiteralExpression, right: Expression): DestructuringAssignment;\n' +
    '        createAssignment(left: Expression, right: Expression): AssignmentExpression<EqualsToken>;\n' +
    '        createLogicalOr(left: Expression, right: Expression): BinaryExpression;\n' +
    '        createLogicalAnd(left: Expression, right: Expression): BinaryExpression;\n' +
    '        createBitwiseOr(left: Expression, right: Expression): BinaryExpression;\n' +
    '        createBitwiseXor(left: Expression, right: Expression): BinaryExpression;\n' +
    '        createBitwiseAnd(left: Expression, right: Expression): BinaryExpression;\n' +
    '        createStrictEquality(left: Expression, right: Expression): BinaryExpression;\n' +
    '        createStrictInequality(left: Expression, right: Expression): BinaryExpression;\n' +
    '        createEquality(left: Expression, right: Expression): BinaryExpression;\n' +
    '        createInequality(left: Expression, right: Expression): BinaryExpression;\n' +
    '        createLessThan(left: Expression, right: Expression): BinaryExpression;\n' +
    '        createLessThanEquals(left: Expression, right: Expression): BinaryExpression;\n' +
    '        createGreaterThan(left: Expression, right: Expression): BinaryExpression;\n' +
    '        createGreaterThanEquals(left: Expression, right: Expression): BinaryExpression;\n' +
    '        createLeftShift(left: Expression, right: Expression): BinaryExpression;\n' +
    '        createRightShift(left: Expression, right: Expression): BinaryExpression;\n' +
    '        createUnsignedRightShift(left: Expression, right: Expression): BinaryExpression;\n' +
    '        createAdd(left: Expression, right: Expression): BinaryExpression;\n' +
    '        createSubtract(left: Expression, right: Expression): BinaryExpression;\n' +
    '        createMultiply(left: Expression, right: Expression): BinaryExpression;\n' +
    '        createDivide(left: Expression, right: Expression): BinaryExpression;\n' +
    '        createModulo(left: Expression, right: Expression): BinaryExpression;\n' +
    '        createExponent(left: Expression, right: Expression): BinaryExpression;\n' +
    '        createPrefixPlus(operand: Expression): PrefixUnaryExpression;\n' +
    '        createPrefixMinus(operand: Expression): PrefixUnaryExpression;\n' +
    '        createPrefixIncrement(operand: Expression): PrefixUnaryExpression;\n' +
    '        createPrefixDecrement(operand: Expression): PrefixUnaryExpression;\n' +
    '        createBitwiseNot(operand: Expression): PrefixUnaryExpression;\n' +
    '        createLogicalNot(operand: Expression): PrefixUnaryExpression;\n' +
    '        createPostfixIncrement(operand: Expression): PostfixUnaryExpression;\n' +
    '        createPostfixDecrement(operand: Expression): PostfixUnaryExpression;\n' +
    '        createImmediatelyInvokedFunctionExpression(statements: readonly Statement[]): CallExpression;\n' +
    '        createImmediatelyInvokedFunctionExpression(statements: readonly Statement[], param: ParameterDeclaration, paramValue: Expression): CallExpression;\n' +
    '        createImmediatelyInvokedArrowFunction(statements: readonly Statement[]): CallExpression;\n' +
    '        createImmediatelyInvokedArrowFunction(statements: readonly Statement[], param: ParameterDeclaration, paramValue: Expression): CallExpression;\n' +
    '        createVoidZero(): VoidExpression;\n' +
    '        createExportDefault(expression: Expression): ExportAssignment;\n' +
    '        createExternalModuleExport(exportName: Identifier): ExportDeclaration;\n' +
    '        restoreOuterExpressions(outerExpression: Expression | undefined, innerExpression: Expression, kinds?: OuterExpressionKinds): Expression;\n' +
    '    }\n' +
    '    export interface CoreTransformationContext {\n' +
    '        readonly factory: NodeFactory;\n' +
    '        /** Gets the compiler options supplied to the transformer. */\n' +
    '        getCompilerOptions(): CompilerOptions;\n' +
    '        /** Starts a new lexical environment. */\n' +
    '        startLexicalEnvironment(): void;\n' +
    '        /** Suspends the current lexical environment, usually after visiting a parameter list. */\n' +
    '        suspendLexicalEnvironment(): void;\n' +
    '        /** Resumes a suspended lexical environment, usually before visiting a function body. */\n' +
    '        resumeLexicalEnvironment(): void;\n' +
    '        /** Ends a lexical environment, returning any declarations. */\n' +
    '        endLexicalEnvironment(): Statement[] | undefined;\n' +
    '        /** Hoists a function declaration to the containing scope. */\n' +
    '        hoistFunctionDeclaration(node: FunctionDeclaration): void;\n' +
    '        /** Hoists a variable declaration to the containing scope. */\n' +
    '        hoistVariableDeclaration(node: Identifier): void;\n' +
    '    }\n' +
    '    export interface TransformationContext extends CoreTransformationContext {\n' +
    '        /** Records a request for a non-scoped emit helper in the current context. */\n' +
    '        requestEmitHelper(helper: EmitHelper): void;\n' +
    '        /** Gets and resets the requested non-scoped emit helpers. */\n' +
    '        readEmitHelpers(): EmitHelper[] | undefined;\n' +
    '        /** Enables expression substitutions in the pretty printer for the provided SyntaxKind. */\n' +
    '        enableSubstitution(kind: SyntaxKind): void;\n' +
    '        /** Determines whether expression substitutions are enabled for the provided node. */\n' +
    '        isSubstitutionEnabled(node: Node): boolean;\n' +
    '        /**\n' +
    '         * Hook used by transformers to substitute expressions just before they\n' +
    '         * are emitted by the pretty printer.\n' +
    '         *\n' +
    '         * NOTE: Transformation hooks should only be modified during `Transformer` initialization,\n' +
    '         * before returning the `NodeTransformer` callback.\n' +
    '         */\n' +
    '        onSubstituteNode: (hint: EmitHint, node: Node) => Node;\n' +
    '        /**\n' +
    '         * Enables before/after emit notifications in the pretty printer for the provided\n' +
    '         * SyntaxKind.\n' +
    '         */\n' +
    '        enableEmitNotification(kind: SyntaxKind): void;\n' +
    '        /**\n' +
    '         * Determines whether before/after emit notifications should be raised in the pretty\n' +
    '         * printer when it emits a node.\n' +
    '         */\n' +
    '        isEmitNotificationEnabled(node: Node): boolean;\n' +
    '        /**\n' +
    '         * Hook used to allow transformers to capture state before or after\n' +
    '         * the printer emits a node.\n' +
    '         *\n' +
    '         * NOTE: Transformation hooks should only be modified during `Transformer` initialization,\n' +
    '         * before returning the `NodeTransformer` callback.\n' +
    '         */\n' +
    '        onEmitNode: (hint: EmitHint, node: Node, emitCallback: (hint: EmitHint, node: Node) => void) => void;\n' +
    '    }\n' +
    '    export interface TransformationResult<T extends Node> {\n' +
    '        /** Gets the transformed source files. */\n' +
    '        transformed: T[];\n' +
    '        /** Gets diagnostics for the transformation. */\n' +
    '        diagnostics?: DiagnosticWithLocation[];\n' +
    '        /**\n' +
    '         * Gets a substitute for a node, if one is available; otherwise, returns the original node.\n' +
    '         *\n' +
    '         * @param hint A hint as to the intended usage of the node.\n' +
    '         * @param node The node to substitute.\n' +
    '         */\n' +
    '        substituteNode(hint: EmitHint, node: Node): Node;\n' +
    '        /**\n' +
    '         * Emits a node with possible notification.\n' +
    '         *\n' +
    '         * @param hint A hint as to the intended usage of the node.\n' +
    '         * @param node The node to emit.\n' +
    '         * @param emitCallback A callback used to emit the node.\n' +
    '         */\n' +
    '        emitNodeWithNotification(hint: EmitHint, node: Node, emitCallback: (hint: EmitHint, node: Node) => void): void;\n' +
    '        /**\n' +
    '         * Indicates if a given node needs an emit notification\n' +
    '         *\n' +
    '         * @param node The node to emit.\n' +
    '         */\n' +
    '        isEmitNotificationEnabled?(node: Node): boolean;\n' +
    '        /**\n' +
    '         * Clean up EmitNode entries on any parse-tree nodes.\n' +
    '         */\n' +
    '        dispose(): void;\n' +
    '    }\n' +
    '    /**\n' +
    '     * A function that is used to initialize and return a `Transformer` callback, which in turn\n' +
    '     * will be used to transform one or more nodes.\n' +
    '     */\n' +
    '    export type TransformerFactory<T extends Node> = (context: TransformationContext) => Transformer<T>;\n' +
    '    /**\n' +
    '     * A function that transforms a node.\n' +
    '     */\n' +
    '    export type Transformer<T extends Node> = (node: T) => T;\n' +
    '    /**\n' +
    '     * A function that accepts and possibly transforms a node.\n' +
    '     */\n' +
    '    export type Visitor = (node: Node) => VisitResult<Node>;\n' +
    '    export interface NodeVisitor {\n' +
    '        <T extends Node>(nodes: T, visitor: Visitor | undefined, test?: (node: Node) => boolean, lift?: (node: readonly Node[]) => T): T;\n' +
    '        <T extends Node>(nodes: T | undefined, visitor: Visitor | undefined, test?: (node: Node) => boolean, lift?: (node: readonly Node[]) => T): T | undefined;\n' +
    '    }\n' +
    '    export interface NodesVisitor {\n' +
    '        <T extends Node>(nodes: NodeArray<T>, visitor: Visitor | undefined, test?: (node: Node) => boolean, start?: number, count?: number): NodeArray<T>;\n' +
    '        <T extends Node>(nodes: NodeArray<T> | undefined, visitor: Visitor | undefined, test?: (node: Node) => boolean, start?: number, count?: number): NodeArray<T> | undefined;\n' +
    '    }\n' +
    '    export type VisitResult<T extends Node> = T | T[] | undefined;\n' +
    '    export interface Printer {\n' +
    '        /**\n' +
    '         * Print a node and its subtree as-is, without any emit transformations.\n' +
    '         * @param hint A value indicating the purpose of a node. This is primarily used to\n' +
    '         * distinguish between an `Identifier` used in an expression position, versus an\n' +
    '         * `Identifier` used as an `IdentifierName` as part of a declaration. For most nodes you\n' +
    '         * should just pass `Unspecified`.\n' +
    '         * @param node The node to print. The node and its subtree are printed as-is, without any\n' +
    '         * emit transformations.\n' +
    '         * @param sourceFile A source file that provides context for the node. The source text of\n' +
    '         * the file is used to emit the original source content for literals and identifiers, while\n' +
    '         * the identifiers of the source file are used when generating unique names to avoid\n' +
    '         * collisions.\n' +
    '         */\n' +
    '        printNode(hint: EmitHint, node: Node, sourceFile: SourceFile): string;\n' +
    '        /**\n' +
    '         * Prints a list of nodes using the given format flags\n' +
    '         */\n' +
    '        printList<T extends Node>(format: ListFormat, list: NodeArray<T>, sourceFile: SourceFile): string;\n' +
    '        /**\n' +
    '         * Prints a source file as-is, without any emit transformations.\n' +
    '         */\n' +
    '        printFile(sourceFile: SourceFile): string;\n' +
    '        /**\n' +
    '         * Prints a bundle of source files as-is, without any emit transformations.\n' +
    '         */\n' +
    '        printBundle(bundle: Bundle): string;\n' +
    '    }\n' +
    '    export interface PrintHandlers {\n' +
    '        /**\n' +
    '         * A hook used by the Printer when generating unique names to avoid collisions with\n' +
    '         * globally defined names that exist outside of the current source file.\n' +
    '         */\n' +
    '        hasGlobalName?(name: string): boolean;\n' +
    '        /**\n' +
    '         * A hook used by the Printer to provide notifications prior to emitting a node. A\n' +
    '         * compatible implementation **must** invoke `emitCallback` with the provided `hint` and\n' +
    '         * `node` values.\n' +
    '         * @param hint A hint indicating the intended purpose of the node.\n' +
    '         * @param node The node to emit.\n' +
    '         * @param emitCallback A callback that, when invoked, will emit the node.\n' +
    '         * @example\n' +
    '         * ```ts\n' +
    '         * var printer = createPrinter(printerOptions, {\n' +
    '         *   onEmitNode(hint, node, emitCallback) {\n' +
    '         *     // set up or track state prior to emitting the node...\n' +
    '         *     emitCallback(hint, node);\n' +
    '         *     // restore state after emitting the node...\n' +
    '         *   }\n' +
    '         * });\n' +
    '         * ```\n' +
    '         */\n' +
    '        onEmitNode?(hint: EmitHint, node: Node, emitCallback: (hint: EmitHint, node: Node) => void): void;\n' +
    '        /**\n' +
    '         * A hook used to check if an emit notification is required for a node.\n' +
    '         * @param node The node to emit.\n' +
    '         */\n' +
    '        isEmitNotificationEnabled?(node: Node): boolean;\n' +
    '        /**\n' +
    '         * A hook used by the Printer to perform just-in-time substitution of a node. This is\n' +
    '         * primarily used by node transformations that need to substitute one node for another,\n' +
    '         * such as replacing `myExportedVar` with `exports.myExportedVar`.\n' +
    '         * @param hint A hint indicating the intended purpose of the node.\n' +
    '         * @param node The node to emit.\n' +
    '         * @example\n' +
    '         * ```ts\n' +
    '         * var printer = createPrinter(printerOptions, {\n' +
    '         *   substituteNode(hint, node) {\n' +
    '         *     // perform substitution if necessary...\n' +
    '         *     return node;\n' +
    '         *   }\n' +
    '         * });\n' +
    '         * ```\n' +
    '         */\n' +
    '        substituteNode?(hint: EmitHint, node: Node): Node;\n' +
    '    }\n' +
    '    export interface PrinterOptions {\n' +
    '        removeComments?: boolean;\n' +
    '        newLine?: NewLineKind;\n' +
    '        omitTrailingSemicolon?: boolean;\n' +
    '        noEmitHelpers?: boolean;\n' +
    '    }\n' +
    '    export interface GetEffectiveTypeRootsHost {\n' +
    '        directoryExists?(directoryName: string): boolean;\n' +
    '        getCurrentDirectory?(): string;\n' +
    '    }\n' +
    '    export interface TextSpan {\n' +
    '        start: number;\n' +
    '        length: number;\n' +
    '    }\n' +
    '    export interface TextChangeRange {\n' +
    '        span: TextSpan;\n' +
    '        newLength: number;\n' +
    '    }\n' +
    '    export interface SyntaxList extends Node {\n' +
    '        kind: SyntaxKind.SyntaxList;\n' +
    '        _children: Node[];\n' +
    '    }\n' +
    '    export enum ListFormat {\n' +
    '        None = 0,\n' +
    '        SingleLine = 0,\n' +
    '        MultiLine = 1,\n' +
    '        PreserveLines = 2,\n' +
    '        LinesMask = 3,\n' +
    '        NotDelimited = 0,\n' +
    '        BarDelimited = 4,\n' +
    '        AmpersandDelimited = 8,\n' +
    '        CommaDelimited = 16,\n' +
    '        AsteriskDelimited = 32,\n' +
    '        DelimitersMask = 60,\n' +
    '        AllowTrailingComma = 64,\n' +
    '        Indented = 128,\n' +
    '        SpaceBetweenBraces = 256,\n' +
    '        SpaceBetweenSiblings = 512,\n' +
    '        Braces = 1024,\n' +
    '        Parenthesis = 2048,\n' +
    '        AngleBrackets = 4096,\n' +
    '        SquareBrackets = 8192,\n' +
    '        BracketsMask = 15360,\n' +
    '        OptionalIfUndefined = 16384,\n' +
    '        OptionalIfEmpty = 32768,\n' +
    '        Optional = 49152,\n' +
    '        PreferNewLine = 65536,\n' +
    '        NoTrailingNewLine = 131072,\n' +
    '        NoInterveningComments = 262144,\n' +
    '        NoSpaceIfEmpty = 524288,\n' +
    '        SingleElement = 1048576,\n' +
    '        SpaceAfterList = 2097152,\n' +
    '        Modifiers = 262656,\n' +
    '        HeritageClauses = 512,\n' +
    '        SingleLineTypeLiteralMembers = 768,\n' +
    '        MultiLineTypeLiteralMembers = 32897,\n' +
    '        SingleLineTupleTypeElements = 528,\n' +
    '        MultiLineTupleTypeElements = 657,\n' +
    '        UnionTypeConstituents = 516,\n' +
    '        IntersectionTypeConstituents = 520,\n' +
    '        ObjectBindingPatternElements = 525136,\n' +
    '        ArrayBindingPatternElements = 524880,\n' +
    '        ObjectLiteralExpressionProperties = 526226,\n' +
    '        ImportClauseEntries = 526226,\n' +
    '        ArrayLiteralExpressionElements = 8914,\n' +
    '        CommaListElements = 528,\n' +
    '        CallExpressionArguments = 2576,\n' +
    '        NewExpressionArguments = 18960,\n' +
    '        TemplateExpressionSpans = 262144,\n' +
    '        SingleLineBlockStatements = 768,\n' +
    '        MultiLineBlockStatements = 129,\n' +
    '        VariableDeclarationList = 528,\n' +
    '        SingleLineFunctionBodyStatements = 768,\n' +
    '        MultiLineFunctionBodyStatements = 1,\n' +
    '        ClassHeritageClauses = 0,\n' +
    '        ClassMembers = 129,\n' +
    '        InterfaceMembers = 129,\n' +
    '        EnumMembers = 145,\n' +
    '        CaseBlockClauses = 129,\n' +
    '        NamedImportsOrExportsElements = 525136,\n' +
    '        JsxElementOrFragmentChildren = 262144,\n' +
    '        JsxElementAttributes = 262656,\n' +
    '        CaseOrDefaultClauseStatements = 163969,\n' +
    '        HeritageClauseTypes = 528,\n' +
    '        SourceFileStatements = 131073,\n' +
    '        Decorators = 2146305,\n' +
    '        TypeArguments = 53776,\n' +
    '        TypeParameters = 53776,\n' +
    '        Parameters = 2576,\n' +
    '        IndexSignatureParameters = 8848,\n' +
    '        JSDocComment = 33\n' +
    '    }\n' +
    '    export interface UserPreferences {\n' +
    '        readonly disableSuggestions?: boolean;\n' +
    '        readonly quotePreference?: "auto" | "double" | "single";\n' +
    '        readonly includeCompletionsForModuleExports?: boolean;\n' +
    '        readonly includeCompletionsForImportStatements?: boolean;\n' +
    '        readonly includeCompletionsWithSnippetText?: boolean;\n' +
    '        readonly includeAutomaticOptionalChainCompletions?: boolean;\n' +
    '        readonly includeCompletionsWithInsertText?: boolean;\n' +
    '        readonly includeCompletionsWithClassMemberSnippets?: boolean;\n' +
    '        readonly includeCompletionsWithObjectLiteralMethodSnippets?: boolean;\n' +
    '        readonly useLabelDetailsInCompletionEntries?: boolean;\n' +
    '        readonly allowIncompleteCompletions?: boolean;\n' +
    '        readonly importModuleSpecifierPreference?: "shortest" | "project-relative" | "relative" | "non-relative";\n' +
    '        /** Determines whether we import `foo/index.ts` as "foo", "foo/index", or "foo/index.js" */\n' +
    '        readonly importModuleSpecifierEnding?: "auto" | "minimal" | "index" | "js";\n' +
    '        readonly allowTextChangesInNewFiles?: boolean;\n' +
    '        readonly providePrefixAndSuffixTextForRename?: boolean;\n' +
    '        readonly includePackageJsonAutoImports?: "auto" | "on" | "off";\n' +
    '        readonly provideRefactorNotApplicableReason?: boolean;\n' +
    '        readonly jsxAttributeCompletionStyle?: "auto" | "braces" | "none";\n' +
    '        readonly includeInlayParameterNameHints?: "none" | "literals" | "all";\n' +
    '        readonly includeInlayParameterNameHintsWhenArgumentMatchesName?: boolean;\n' +
    '        readonly includeInlayFunctionParameterTypeHints?: boolean;\n' +
    '        readonly includeInlayVariableTypeHints?: boolean;\n' +
    '        readonly includeInlayPropertyDeclarationTypeHints?: boolean;\n' +
    '        readonly includeInlayFunctionLikeReturnTypeHints?: boolean;\n' +
    '        readonly includeInlayEnumMemberValueHints?: boolean;\n' +
    '    }\n' +
    '    /** Represents a bigint literal value without requiring bigint support */\n' +
    '    export interface PseudoBigInt {\n' +
    '        negative: boolean;\n' +
    '        base10Value: string;\n' +
    '    }\n' +
    '    export {};\n' +
    '}\n' +
    'declare function setTimeout(handler: (...args: any[]) => void, timeout: number): any;\n' +
    'declare function clearTimeout(handle: any): void;\n' +
    'declare namespace ts {\n' +
    '    export enum FileWatcherEventKind {\n' +
    '        Created = 0,\n' +
    '        Changed = 1,\n' +
    '        Deleted = 2\n' +
    '    }\n' +
    '    export type FileWatcherCallback = (fileName: string, eventKind: FileWatcherEventKind) => void;\n' +
    '    export type DirectoryWatcherCallback = (fileName: string) => void;\n' +
    '    export interface System {\n' +
    '        args: string[];\n' +
    '        newLine: string;\n' +
    '        useCaseSensitiveFileNames: boolean;\n' +
    '        write(s: string): void;\n' +
    '        writeOutputIsTTY?(): boolean;\n' +
    '        getWidthOfTerminal?(): number;\n' +
    '        readFile(path: string, encoding?: string): string | undefined;\n' +
    '        getFileSize?(path: string): number;\n' +
    '        writeFile(path: string, data: string, writeByteOrderMark?: boolean): void;\n' +
    '        /**\n' +
    '         * @pollingInterval - this parameter is used in polling-based watchers and ignored in watchers that\n' +
    '         * use native OS file watching\n' +
    '         */\n' +
    '        watchFile?(path: string, callback: FileWatcherCallback, pollingInterval?: number, options?: WatchOptions): FileWatcher;\n' +
    '        watchDirectory?(path: string, callback: DirectoryWatcherCallback, recursive?: boolean, options?: WatchOptions): FileWatcher;\n' +
    '        resolvePath(path: string): string;\n' +
    '        fileExists(path: string): boolean;\n' +
    '        directoryExists(path: string): boolean;\n' +
    '        createDirectory(path: string): void;\n' +
    '        getExecutingFilePath(): string;\n' +
    '        getCurrentDirectory(): string;\n' +
    '        getDirectories(path: string): string[];\n' +
    '        readDirectory(path: string, extensions?: readonly string[], exclude?: readonly string[], include?: readonly string[], depth?: number): string[];\n' +
    '        getModifiedTime?(path: string): Date | undefined;\n' +
    '        setModifiedTime?(path: string, time: Date): void;\n' +
    '        deleteFile?(path: string): void;\n' +
    '        /**\n' +
    "         * A good implementation is node.js' `crypto.createHash`. (https://nodejs.org/api/crypto.html#crypto_crypto_createhash_algorithm)\n" +
    '         */\n' +
    '        createHash?(data: string): string;\n' +
    '        /** This must be cryptographically secure. Only implement this method using `crypto.createHash("sha256")`. */\n' +
    '        createSHA256Hash?(data: string): string;\n' +
    '        getMemoryUsage?(): number;\n' +
    '        exit(exitCode?: number): void;\n' +
    '        realpath?(path: string): string;\n' +
    '        setTimeout?(callback: (...args: any[]) => void, ms: number, ...args: any[]): any;\n' +
    '        clearTimeout?(timeoutId: any): void;\n' +
    '        clearScreen?(): void;\n' +
    '        base64decode?(input: string): string;\n' +
    '        base64encode?(input: string): string;\n' +
    '    }\n' +
    '    export interface FileWatcher {\n' +
    '        close(): void;\n' +
    '    }\n' +
    '    export function getNodeMajorVersion(): number | undefined;\n' +
    '    export let sys: System;\n' +
    '    export {};\n' +
    '}\n' +
    'declare namespace ts {\n' +
    '    type ErrorCallback = (message: DiagnosticMessage, length: number) => void;\n' +
    '    interface Scanner {\n' +
    '        getStartPos(): number;\n' +
    '        getToken(): SyntaxKind;\n' +
    '        getTextPos(): number;\n' +
    '        getTokenPos(): number;\n' +
    '        getTokenText(): string;\n' +
    '        getTokenValue(): string;\n' +
    '        hasUnicodeEscape(): boolean;\n' +
    '        hasExtendedUnicodeEscape(): boolean;\n' +
    '        hasPrecedingLineBreak(): boolean;\n' +
    '        isIdentifier(): boolean;\n' +
    '        isReservedWord(): boolean;\n' +
    '        isUnterminated(): boolean;\n' +
    '        reScanGreaterToken(): SyntaxKind;\n' +
    '        reScanSlashToken(): SyntaxKind;\n' +
    '        reScanAsteriskEqualsToken(): SyntaxKind;\n' +
    '        reScanTemplateToken(isTaggedTemplate: boolean): SyntaxKind;\n' +
    '        reScanTemplateHeadOrNoSubstitutionTemplate(): SyntaxKind;\n' +
    '        scanJsxIdentifier(): SyntaxKind;\n' +
    '        scanJsxAttributeValue(): SyntaxKind;\n' +
    '        reScanJsxAttributeValue(): SyntaxKind;\n' +
    '        reScanJsxToken(allowMultilineJsxText?: boolean): JsxTokenSyntaxKind;\n' +
    '        reScanLessThanToken(): SyntaxKind;\n' +
    '        reScanHashToken(): SyntaxKind;\n' +
    '        reScanQuestionToken(): SyntaxKind;\n' +
    '        reScanInvalidIdentifier(): SyntaxKind;\n' +
    '        scanJsxToken(): JsxTokenSyntaxKind;\n' +
    '        scanJsDocToken(): JSDocSyntaxKind;\n' +
    '        scan(): SyntaxKind;\n' +
    '        getText(): string;\n' +
    '        setText(text: string | undefined, start?: number, length?: number): void;\n' +
    '        setOnError(onError: ErrorCallback | undefined): void;\n' +
    '        setScriptTarget(scriptTarget: ScriptTarget): void;\n' +
    '        setLanguageVariant(variant: LanguageVariant): void;\n' +
    '        setTextPos(textPos: number): void;\n' +
    '        lookAhead<T>(callback: () => T): T;\n' +
    '        scanRange<T>(start: number, length: number, callback: () => T): T;\n' +
    '        tryScan<T>(callback: () => T): T;\n' +
    '    }\n' +
    '    function tokenToString(t: SyntaxKind): string | undefined;\n' +
    '    function getPositionOfLineAndCharacter(sourceFile: SourceFileLike, line: number, character: number): number;\n' +
    '    function getLineAndCharacterOfPosition(sourceFile: SourceFileLike, position: number): LineAndCharacter;\n' +
    '    function isWhiteSpaceLike(ch: number): boolean;\n' +
    '    /** Does not include line breaks. For that, see isWhiteSpaceLike. */\n' +
    '    function isWhiteSpaceSingleLine(ch: number): boolean;\n' +
    '    function isLineBreak(ch: number): boolean;\n' +
    '    function couldStartTrivia(text: string, pos: number): boolean;\n' +
    '    function forEachLeadingCommentRange<U>(text: string, pos: number, cb: (pos: number, end: number, kind: CommentKind, hasTrailingNewLine: boolean) => U): U | undefined;\n' +
    '    function forEachLeadingCommentRange<T, U>(text: string, pos: number, cb: (pos: number, end: number, kind: CommentKind, hasTrailingNewLine: boolean, state: T) => U, state: T): U | undefined;\n' +
    '    function forEachTrailingCommentRange<U>(text: string, pos: number, cb: (pos: number, end: number, kind: CommentKind, hasTrailingNewLine: boolean) => U): U | undefined;\n' +
    '    function forEachTrailingCommentRange<T, U>(text: string, pos: number, cb: (pos: number, end: number, kind: CommentKind, hasTrailingNewLine: boolean, state: T) => U, state: T): U | undefined;\n' +
    '    function reduceEachLeadingCommentRange<T, U>(text: string, pos: number, cb: (pos: number, end: number, kind: CommentKind, hasTrailingNewLine: boolean, state: T, memo: U) => U, state: T, initial: U): U | undefined;\n' +
    '    function reduceEachTrailingCommentRange<T, U>(text: string, pos: number, cb: (pos: number, end: number, kind: CommentKind, hasTrailingNewLine: boolean, state: T, memo: U) => U, state: T, initial: U): U | undefined;\n' +
    '    function getLeadingCommentRanges(text: string, pos: number): CommentRange[] | undefined;\n' +
    '    function getTrailingCommentRanges(text: string, pos: number): CommentRange[] | undefined;\n' +
    '    /** Optionally, get the shebang */\n' +
    '    function getShebang(text: string): string | undefined;\n' +
    '    function isIdentifierStart(ch: number, languageVersion: ScriptTarget | undefined): boolean;\n' +
    '    function isIdentifierPart(ch: number, languageVersion: ScriptTarget | undefined, identifierVariant?: LanguageVariant): boolean;\n' +
    '    function createScanner(languageVersion: ScriptTarget, skipTrivia: boolean, languageVariant?: LanguageVariant, textInitial?: string, onError?: ErrorCallback, start?: number, length?: number): Scanner;\n' +
    '}\n' +
    'declare namespace ts {\n' +
    '    function isExternalModuleNameRelative(moduleName: string): boolean;\n' +
    '    function sortAndDeduplicateDiagnostics<T extends Diagnostic>(diagnostics: readonly T[]): SortedReadonlyArray<T>;\n' +
    '    function getDefaultLibFileName(options: CompilerOptions): string;\n' +
    '    function textSpanEnd(span: TextSpan): number;\n' +
    '    function textSpanIsEmpty(span: TextSpan): boolean;\n' +
    '    function textSpanContainsPosition(span: TextSpan, position: number): boolean;\n' +
    '    function textSpanContainsTextSpan(span: TextSpan, other: TextSpan): boolean;\n' +
    '    function textSpanOverlapsWith(span: TextSpan, other: TextSpan): boolean;\n' +
    '    function textSpanOverlap(span1: TextSpan, span2: TextSpan): TextSpan | undefined;\n' +
    '    function textSpanIntersectsWithTextSpan(span: TextSpan, other: TextSpan): boolean;\n' +
    '    function textSpanIntersectsWith(span: TextSpan, start: number, length: number): boolean;\n' +
    '    function decodedTextSpanIntersectsWith(start1: number, length1: number, start2: number, length2: number): boolean;\n' +
    '    function textSpanIntersectsWithPosition(span: TextSpan, position: number): boolean;\n' +
    '    function textSpanIntersection(span1: TextSpan, span2: TextSpan): TextSpan | undefined;\n' +
    '    function createTextSpan(start: number, length: number): TextSpan;\n' +
    '    function createTextSpanFromBounds(start: number, end: number): TextSpan;\n' +
    '    function textChangeRangeNewSpan(range: TextChangeRange): TextSpan;\n' +
    '    function textChangeRangeIsUnchanged(range: TextChangeRange): boolean;\n' +
    '    function createTextChangeRange(span: TextSpan, newLength: number): TextChangeRange;\n' +
    '    let unchangedTextChangeRange: TextChangeRange;\n' +
    '    /**\n' +
    '     * Called to merge all the changes that occurred across several versions of a script snapshot\n' +
    '     * into a single change.  i.e. if a user keeps making successive edits to a script we will\n' +
    '     * have a text change from V1 to V2, V2 to V3, ..., Vn.\n' +
    '     *\n' +
    '     * This function will then merge those changes into a single change range valid between V1 and\n' +
    '     * Vn.\n' +
    '     */\n' +
    '    function collapseTextChangeRangesAcrossMultipleVersions(changes: readonly TextChangeRange[]): TextChangeRange;\n' +
    '    function getTypeParameterOwner(d: Declaration): Declaration | undefined;\n' +
    '    type ParameterPropertyDeclaration = ParameterDeclaration & {\n' +
    '        parent: ConstructorDeclaration;\n' +
    '        name: Identifier;\n' +
    '    };\n' +
    '    function isParameterPropertyDeclaration(node: Node, parent: Node): node is ParameterPropertyDeclaration;\n' +
    '    function isEmptyBindingPattern(node: BindingName): node is BindingPattern;\n' +
    '    function isEmptyBindingElement(node: BindingElement): boolean;\n' +
    '    function walkUpBindingElementsAndPatterns(binding: BindingElement): VariableDeclaration | ParameterDeclaration;\n' +
    '    function getCombinedModifierFlags(node: Declaration): ModifierFlags;\n' +
    '    function getCombinedNodeFlags(node: Node): NodeFlags;\n' +
    '    /**\n' +
    '     * Checks to see if the locale is in the appropriate format,\n' +
    '     * and if it is, attempts to set the appropriate language.\n' +
    '     */\n' +
    '    function validateLocaleAndSetLanguage(locale: string, sys: {\n' +
    '        getExecutingFilePath(): string;\n' +
    '        resolvePath(path: string): string;\n' +
    '        fileExists(fileName: string): boolean;\n' +
    '        readFile(fileName: string): string | undefined;\n' +
    '    }, errors?: Push<Diagnostic>): void;\n' +
    '    function getOriginalNode(node: Node): Node;\n' +
    '    function getOriginalNode<T extends Node>(node: Node, nodeTest: (node: Node) => node is T): T;\n' +
    '    function getOriginalNode(node: Node | undefined): Node | undefined;\n' +
    '    function getOriginalNode<T extends Node>(node: Node | undefined, nodeTest: (node: Node | undefined) => node is T): T | undefined;\n' +
    '    /**\n' +
    '     * Iterates through the parent chain of a node and performs the callback on each parent until the callback\n' +
    '     * returns a truthy value, then returns that value.\n' +
    '     * If no such value is found, it applies the callback until the parent pointer is undefined or the callback returns "quit"\n' +
    '     * At that point findAncestor returns undefined.\n' +
    '     */\n' +
    '    function findAncestor<T extends Node>(node: Node | undefined, callback: (element: Node) => element is T): T | undefined;\n' +
    '    function findAncestor(node: Node | undefined, callback: (element: Node) => boolean | "quit"): Node | undefined;\n' +
    '    /**\n' +
    '     * Gets a value indicating whether a node originated in the parse tree.\n' +
    '     *\n' +
    '     * @param node The node to test.\n' +
    '     */\n' +
    '    function isParseTreeNode(node: Node): boolean;\n' +
    '    /**\n' +
    '     * Gets the original parse tree node for a node.\n' +
    '     *\n' +
    '     * @param node The original node.\n' +
    '     * @returns The original parse tree node if found; otherwise, undefined.\n' +
    '     */\n' +
    '    function getParseTreeNode(node: Node | undefined): Node | undefined;\n' +
    '    /**\n' +
    '     * Gets the original parse tree node for a node.\n' +
    '     *\n' +
    '     * @param node The original node.\n' +
    '     * @param nodeTest A callback used to ensure the correct type of parse tree node is returned.\n' +
    '     * @returns The original parse tree node if found; otherwise, undefined.\n' +
    '     */\n' +
    '    function getParseTreeNode<T extends Node>(node: T | undefined, nodeTest?: (node: Node) => node is T): T | undefined;\n' +
    "    /** Add an extra underscore to identifiers that start with two underscores to avoid issues with magic names like '__proto__' */\n" +
    '    function escapeLeadingUnderscores(identifier: string): __String;\n' +
    '    /**\n' +
    '     * Remove extra underscore from escaped identifier text content.\n' +
    '     *\n' +
    '     * @param identifier The escaped identifier text.\n' +
    '     * @returns The unescaped identifier text.\n' +
    '     */\n' +
    '    function unescapeLeadingUnderscores(identifier: __String): string;\n' +
    '    function idText(identifierOrPrivateName: Identifier | PrivateIdentifier): string;\n' +
    '    function symbolName(symbol: Symbol): string;\n' +
    '    function getNameOfJSDocTypedef(declaration: JSDocTypedefTag): Identifier | PrivateIdentifier | undefined;\n' +
    '    function getNameOfDeclaration(declaration: Declaration | Expression | undefined): DeclarationName | undefined;\n' +
    '    /**\n' +
    '     * Gets the JSDoc parameter tags for the node if present.\n' +
    '     *\n' +
    '     * @remarks Returns any JSDoc param tag whose name matches the provided\n' +
    '     * parameter, whether a param tag on a containing function\n' +
    '     * expression, or a param tag on a variable declaration whose\n' +
    '     * initializer is the containing function. The tags closest to the\n' +
    '     * node are returned first, so in the previous example, the param\n' +
    '     * tag on the containing function expression would be first.\n' +
    '     *\n' +
    '     * For binding patterns, parameter tags are matched by position.\n' +
    '     */\n' +
    '    function getJSDocParameterTags(param: ParameterDeclaration): readonly JSDocParameterTag[];\n' +
    '    /**\n' +
    '     * Gets the JSDoc type parameter tags for the node if present.\n' +
    '     *\n' +
    '     * @remarks Returns any JSDoc template tag whose names match the provided\n' +
    '     * parameter, whether a template tag on a containing function\n' +
    '     * expression, or a template tag on a variable declaration whose\n' +
    '     * initializer is the containing function. The tags closest to the\n' +
    '     * node are returned first, so in the previous example, the template\n' +
    '     * tag on the containing function expression would be first.\n' +
    '     */\n' +
    '    function getJSDocTypeParameterTags(param: TypeParameterDeclaration): readonly JSDocTemplateTag[];\n' +
    '    /**\n' +
    '     * Return true if the node has JSDoc parameter tags.\n' +
    '     *\n' +
    '     * @remarks Includes parameter tags that are not directly on the node,\n' +
    '     * for example on a variable declaration whose initializer is a function expression.\n' +
    '     */\n' +
    '    function hasJSDocParameterTags(node: FunctionLikeDeclaration | SignatureDeclaration): boolean;\n' +
    '    /** Gets the JSDoc augments tag for the node if present */\n' +
    '    function getJSDocAugmentsTag(node: Node): JSDocAugmentsTag | undefined;\n' +
    '    /** Gets the JSDoc implements tags for the node if present */\n' +
    '    function getJSDocImplementsTags(node: Node): readonly JSDocImplementsTag[];\n' +
    '    /** Gets the JSDoc class tag for the node if present */\n' +
    '    function getJSDocClassTag(node: Node): JSDocClassTag | undefined;\n' +
    '    /** Gets the JSDoc public tag for the node if present */\n' +
    '    function getJSDocPublicTag(node: Node): JSDocPublicTag | undefined;\n' +
    '    /** Gets the JSDoc private tag for the node if present */\n' +
    '    function getJSDocPrivateTag(node: Node): JSDocPrivateTag | undefined;\n' +
    '    /** Gets the JSDoc protected tag for the node if present */\n' +
    '    function getJSDocProtectedTag(node: Node): JSDocProtectedTag | undefined;\n' +
    '    /** Gets the JSDoc protected tag for the node if present */\n' +
    '    function getJSDocReadonlyTag(node: Node): JSDocReadonlyTag | undefined;\n' +
    '    function getJSDocOverrideTagNoCache(node: Node): JSDocOverrideTag | undefined;\n' +
    '    /** Gets the JSDoc deprecated tag for the node if present */\n' +
    '    function getJSDocDeprecatedTag(node: Node): JSDocDeprecatedTag | undefined;\n' +
    '    /** Gets the JSDoc enum tag for the node if present */\n' +
    '    function getJSDocEnumTag(node: Node): JSDocEnumTag | undefined;\n' +
    '    /** Gets the JSDoc this tag for the node if present */\n' +
    '    function getJSDocThisTag(node: Node): JSDocThisTag | undefined;\n' +
    '    /** Gets the JSDoc return tag for the node if present */\n' +
    '    function getJSDocReturnTag(node: Node): JSDocReturnTag | undefined;\n' +
    '    /** Gets the JSDoc template tag for the node if present */\n' +
    '    function getJSDocTemplateTag(node: Node): JSDocTemplateTag | undefined;\n' +
    '    /** Gets the JSDoc type tag for the node if present and valid */\n' +
    '    function getJSDocTypeTag(node: Node): JSDocTypeTag | undefined;\n' +
    '    /**\n' +
    '     * Gets the type node for the node if provided via JSDoc.\n' +
    '     *\n' +
    '     * @remarks The search includes any JSDoc param tag that relates\n' +
    '     * to the provided parameter, for example a type tag on the\n' +
    '     * parameter itself, or a param tag on a containing function\n' +
    '     * expression, or a param tag on a variable declaration whose\n' +
    '     * initializer is the containing function. The tags closest to the\n' +
    '     * node are examined first, so in the previous example, the type\n' +
    '     * tag directly on the node would be returned.\n' +
    '     */\n' +
    '    function getJSDocType(node: Node): TypeNode | undefined;\n' +
    '    /**\n' +
    '     * Gets the return type node for the node if provided via JSDoc return tag or type tag.\n' +
    '     *\n' +
    '     * @remarks `getJSDocReturnTag` just gets the whole JSDoc tag. This function\n' +
    '     * gets the type from inside the braces, after the fat arrow, etc.\n' +
    '     */\n' +
    '    function getJSDocReturnType(node: Node): TypeNode | undefined;\n' +
    '    /** Get all JSDoc tags related to a node, including those on parent nodes. */\n' +
    '    function getJSDocTags(node: Node): readonly JSDocTag[];\n' +
    '    /** Gets all JSDoc tags that match a specified predicate */\n' +
    '    function getAllJSDocTags<T extends JSDocTag>(node: Node, predicate: (tag: JSDocTag) => tag is T): readonly T[];\n' +
    '    /** Gets all JSDoc tags of a specified kind */\n' +
    '    function getAllJSDocTagsOfKind(node: Node, kind: SyntaxKind): readonly JSDocTag[];\n' +
    '    /** Gets the text of a jsdoc comment, flattening links to their text. */\n' +
    '    function getTextOfJSDocComment(comment?: string | NodeArray<JSDocComment>): string | undefined;\n' +
    '    /**\n' +
    '     * Gets the effective type parameters. If the node was parsed in a\n' +
    '     * JavaScript file, gets the type parameters from the `@template` tag from JSDoc.\n' +
    '     */\n' +
    '    function getEffectiveTypeParameterDeclarations(node: DeclarationWithTypeParameters): readonly TypeParameterDeclaration[];\n' +
    '    function getEffectiveConstraintOfTypeParameter(node: TypeParameterDeclaration): TypeNode | undefined;\n' +
    '    function isMemberName(node: Node): node is MemberName;\n' +
    '    function isPropertyAccessChain(node: Node): node is PropertyAccessChain;\n' +
    '    function isElementAccessChain(node: Node): node is ElementAccessChain;\n' +
    '    function isCallChain(node: Node): node is CallChain;\n' +
    '    function isOptionalChain(node: Node): node is PropertyAccessChain | ElementAccessChain | CallChain | NonNullChain;\n' +
    '    function isNullishCoalesce(node: Node): boolean;\n' +
    '    function isConstTypeReference(node: Node): boolean;\n' +
    '    function skipPartiallyEmittedExpressions(node: Expression): Expression;\n' +
    '    function skipPartiallyEmittedExpressions(node: Node): Node;\n' +
    '    function isNonNullChain(node: Node): node is NonNullChain;\n' +
    '    function isBreakOrContinueStatement(node: Node): node is BreakOrContinueStatement;\n' +
    '    function isNamedExportBindings(node: Node): node is NamedExportBindings;\n' +
    '    function isUnparsedTextLike(node: Node): node is UnparsedTextLike;\n' +
    '    function isUnparsedNode(node: Node): node is UnparsedNode;\n' +
    '    function isJSDocPropertyLikeTag(node: Node): node is JSDocPropertyLikeTag;\n' +
    '    /**\n' +
    '     * True if kind is of some token syntax kind.\n' +
    '     * For example, this is true for an IfKeyword but not for an IfStatement.\n' +
    '     * Literals are considered tokens, except TemplateLiteral, but does include TemplateHead/Middle/Tail.\n' +
    '     */\n' +
    '    function isTokenKind(kind: SyntaxKind): boolean;\n' +
    '    /**\n' +
    '     * True if node is of some token syntax kind.\n' +
    '     * For example, this is true for an IfKeyword but not for an IfStatement.\n' +
    '     * Literals are considered tokens, except TemplateLiteral, but does include TemplateHead/Middle/Tail.\n' +
    '     */\n' +
    '    function isToken(n: Node): boolean;\n' +
    '    function isLiteralExpression(node: Node): node is LiteralExpression;\n' +
    '    function isTemplateLiteralToken(node: Node): node is TemplateLiteralToken;\n' +
    '    function isTemplateMiddleOrTemplateTail(node: Node): node is TemplateMiddle | TemplateTail;\n' +
    '    function isImportOrExportSpecifier(node: Node): node is ImportSpecifier | ExportSpecifier;\n' +
    '    function isTypeOnlyImportOrExportDeclaration(node: Node): node is TypeOnlyAliasDeclaration;\n' +
    '    function isAssertionKey(node: Node): node is AssertionKey;\n' +
    '    function isStringTextContainingNode(node: Node): node is StringLiteral | TemplateLiteralToken;\n' +
    '    function isModifier(node: Node): node is Modifier;\n' +
    '    function isEntityName(node: Node): node is EntityName;\n' +
    '    function isPropertyName(node: Node): node is PropertyName;\n' +
    '    function isBindingName(node: Node): node is BindingName;\n' +
    '    function isFunctionLike(node: Node | undefined): node is SignatureDeclaration;\n' +
    '    function isClassElement(node: Node): node is ClassElement;\n' +
    '    function isClassLike(node: Node): node is ClassLikeDeclaration;\n' +
    '    function isAccessor(node: Node): node is AccessorDeclaration;\n' +
    '    function isTypeElement(node: Node): node is TypeElement;\n' +
    '    function isClassOrTypeElement(node: Node): node is ClassElement | TypeElement;\n' +
    '    function isObjectLiteralElementLike(node: Node): node is ObjectLiteralElementLike;\n' +
    '    /**\n' +
    '     * Node test that determines whether a node is a valid type node.\n' +
    '     * This differs from the `isPartOfTypeNode` function which determines whether a node is *part*\n' +
    '     * of a TypeNode.\n' +
    '     */\n' +
    '    function isTypeNode(node: Node): node is TypeNode;\n' +
    '    function isFunctionOrConstructorTypeNode(node: Node): node is FunctionTypeNode | ConstructorTypeNode;\n' +
    '    function isPropertyAccessOrQualifiedName(node: Node): node is PropertyAccessExpression | QualifiedName;\n' +
    '    function isCallLikeExpression(node: Node): node is CallLikeExpression;\n' +
    '    function isCallOrNewExpression(node: Node): node is CallExpression | NewExpression;\n' +
    '    function isTemplateLiteral(node: Node): node is TemplateLiteral;\n' +
    '    function isAssertionExpression(node: Node): node is AssertionExpression;\n' +
    '    function isIterationStatement(node: Node, lookInLabeledStatements: false): node is IterationStatement;\n' +
    '    function isIterationStatement(node: Node, lookInLabeledStatements: boolean): node is IterationStatement | LabeledStatement;\n' +
    '    function isJsxOpeningLikeElement(node: Node): node is JsxOpeningLikeElement;\n' +
    '    function isCaseOrDefaultClause(node: Node): node is CaseOrDefaultClause;\n' +
    '    /** True if node is of a kind that may contain comment text. */\n' +
    '    function isJSDocCommentContainingNode(node: Node): boolean;\n' +
    '    function isSetAccessor(node: Node): node is SetAccessorDeclaration;\n' +
    '    function isGetAccessor(node: Node): node is GetAccessorDeclaration;\n' +
    '    /** True if has initializer node attached to it. */\n' +
    '    function hasOnlyExpressionInitializer(node: Node): node is HasExpressionInitializer;\n' +
    '    function isObjectLiteralElement(node: Node): node is ObjectLiteralElement;\n' +
    '    function isStringLiteralLike(node: Node): node is StringLiteralLike;\n' +
    '    function isJSDocLinkLike(node: Node): node is JSDocLink | JSDocLinkCode | JSDocLinkPlain;\n' +
    '}\n' +
    'declare namespace ts {\n' +
    '    const factory: NodeFactory;\n' +
    '    function createUnparsedSourceFile(text: string): UnparsedSource;\n' +
    '    function createUnparsedSourceFile(inputFile: InputFiles, type: "js" | "dts", stripInternal?: boolean): UnparsedSource;\n' +
    '    function createUnparsedSourceFile(text: string, mapPath: string | undefined, map: string | undefined): UnparsedSource;\n' +
    '    function createInputFiles(javascriptText: string, declarationText: string): InputFiles;\n' +
    '    function createInputFiles(readFileText: (path: string) => string | undefined, javascriptPath: string, javascriptMapPath: string | undefined, declarationPath: string, declarationMapPath: string | undefined, buildInfoPath: string | undefined): InputFiles;\n' +
    '    function createInputFiles(javascriptText: string, declarationText: string, javascriptMapPath: string | undefined, javascriptMapText: string | undefined, declarationMapPath: string | undefined, declarationMapText: string | undefined): InputFiles;\n' +
    '    /**\n' +
    '     * Create an external source map source file reference\n' +
    '     */\n' +
    '    function createSourceMapSource(fileName: string, text: string, skipTrivia?: (pos: number) => number): SourceMapSource;\n' +
    '    function setOriginalNode<T extends Node>(node: T, original: Node | undefined): T;\n' +
    '}\n' +
    'declare namespace ts {\n' +
    '    /**\n' +
    '     * Clears any `EmitNode` entries from parse-tree nodes.\n' +
    '     * @param sourceFile A source file.\n' +
    '     */\n' +
    '    function disposeEmitNodes(sourceFile: SourceFile | undefined): void;\n' +
    '    /**\n' +
    '     * Sets flags that control emit behavior of a node.\n' +
    '     */\n' +
    '    function setEmitFlags<T extends Node>(node: T, emitFlags: EmitFlags): T;\n' +
    '    /**\n' +
    '     * Gets a custom text range to use when emitting source maps.\n' +
    '     */\n' +
    '    function getSourceMapRange(node: Node): SourceMapRange;\n' +
    '    /**\n' +
    '     * Sets a custom text range to use when emitting source maps.\n' +
    '     */\n' +
    '    function setSourceMapRange<T extends Node>(node: T, range: SourceMapRange | undefined): T;\n' +
    '    /**\n' +
    '     * Gets the TextRange to use for source maps for a token of a node.\n' +
    '     */\n' +
    '    function getTokenSourceMapRange(node: Node, token: SyntaxKind): SourceMapRange | undefined;\n' +
    '    /**\n' +
    '     * Sets the TextRange to use for source maps for a token of a node.\n' +
    '     */\n' +
    '    function setTokenSourceMapRange<T extends Node>(node: T, token: SyntaxKind, range: SourceMapRange | undefined): T;\n' +
    '    /**\n' +
    '     * Gets a custom text range to use when emitting comments.\n' +
    '     */\n' +
    '    function getCommentRange(node: Node): TextRange;\n' +
    '    /**\n' +
    '     * Sets a custom text range to use when emitting comments.\n' +
    '     */\n' +
    '    function setCommentRange<T extends Node>(node: T, range: TextRange): T;\n' +
    '    function getSyntheticLeadingComments(node: Node): SynthesizedComment[] | undefined;\n' +
    '    function setSyntheticLeadingComments<T extends Node>(node: T, comments: SynthesizedComment[] | undefined): T;\n' +
    '    function addSyntheticLeadingComment<T extends Node>(node: T, kind: SyntaxKind.SingleLineCommentTrivia | SyntaxKind.MultiLineCommentTrivia, text: string, hasTrailingNewLine?: boolean): T;\n' +
    '    function getSyntheticTrailingComments(node: Node): SynthesizedComment[] | undefined;\n' +
    '    function setSyntheticTrailingComments<T extends Node>(node: T, comments: SynthesizedComment[] | undefined): T;\n' +
    '    function addSyntheticTrailingComment<T extends Node>(node: T, kind: SyntaxKind.SingleLineCommentTrivia | SyntaxKind.MultiLineCommentTrivia, text: string, hasTrailingNewLine?: boolean): T;\n' +
    '    function moveSyntheticComments<T extends Node>(node: T, original: Node): T;\n' +
    '    /**\n' +
    '     * Gets the constant value to emit for an expression representing an enum.\n' +
    '     */\n' +
    '    function getConstantValue(node: AccessExpression): string | number | undefined;\n' +
    '    /**\n' +
    '     * Sets the constant value to emit for an expression.\n' +
    '     */\n' +
    '    function setConstantValue(node: AccessExpression, value: string | number): AccessExpression;\n' +
    '    /**\n' +
    '     * Adds an EmitHelper to a node.\n' +
    '     */\n' +
    '    function addEmitHelper<T extends Node>(node: T, helper: EmitHelper): T;\n' +
    '    /**\n' +
    '     * Add EmitHelpers to a node.\n' +
    '     */\n' +
    '    function addEmitHelpers<T extends Node>(node: T, helpers: EmitHelper[] | undefined): T;\n' +
    '    /**\n' +
    '     * Removes an EmitHelper from a node.\n' +
    '     */\n' +
    '    function removeEmitHelper(node: Node, helper: EmitHelper): boolean;\n' +
    '    /**\n' +
    '     * Gets the EmitHelpers of a node.\n' +
    '     */\n' +
    '    function getEmitHelpers(node: Node): EmitHelper[] | undefined;\n' +
    '    /**\n' +
    '     * Moves matching emit helpers from a source node to a target node.\n' +
    '     */\n' +
    '    function moveEmitHelpers(source: Node, target: Node, predicate: (helper: EmitHelper) => boolean): void;\n' +
    '}\n' +
    'declare namespace ts {\n' +
    '    function isNumericLiteral(node: Node): node is NumericLiteral;\n' +
    '    function isBigIntLiteral(node: Node): node is BigIntLiteral;\n' +
    '    function isStringLiteral(node: Node): node is StringLiteral;\n' +
    '    function isJsxText(node: Node): node is JsxText;\n' +
    '    function isRegularExpressionLiteral(node: Node): node is RegularExpressionLiteral;\n' +
    '    function isNoSubstitutionTemplateLiteral(node: Node): node is NoSubstitutionTemplateLiteral;\n' +
    '    function isTemplateHead(node: Node): node is TemplateHead;\n' +
    '    function isTemplateMiddle(node: Node): node is TemplateMiddle;\n' +
    '    function isTemplateTail(node: Node): node is TemplateTail;\n' +
    '    function isDotDotDotToken(node: Node): node is DotDotDotToken;\n' +
    '    function isPlusToken(node: Node): node is PlusToken;\n' +
    '    function isMinusToken(node: Node): node is MinusToken;\n' +
    '    function isAsteriskToken(node: Node): node is AsteriskToken;\n' +
    '    function isIdentifier(node: Node): node is Identifier;\n' +
    '    function isPrivateIdentifier(node: Node): node is PrivateIdentifier;\n' +
    '    function isQualifiedName(node: Node): node is QualifiedName;\n' +
    '    function isComputedPropertyName(node: Node): node is ComputedPropertyName;\n' +
    '    function isTypeParameterDeclaration(node: Node): node is TypeParameterDeclaration;\n' +
    '    function isParameter(node: Node): node is ParameterDeclaration;\n' +
    '    function isDecorator(node: Node): node is Decorator;\n' +
    '    function isPropertySignature(node: Node): node is PropertySignature;\n' +
    '    function isPropertyDeclaration(node: Node): node is PropertyDeclaration;\n' +
    '    function isMethodSignature(node: Node): node is MethodSignature;\n' +
    '    function isMethodDeclaration(node: Node): node is MethodDeclaration;\n' +
    '    function isClassStaticBlockDeclaration(node: Node): node is ClassStaticBlockDeclaration;\n' +
    '    function isConstructorDeclaration(node: Node): node is ConstructorDeclaration;\n' +
    '    function isGetAccessorDeclaration(node: Node): node is GetAccessorDeclaration;\n' +
    '    function isSetAccessorDeclaration(node: Node): node is SetAccessorDeclaration;\n' +
    '    function isCallSignatureDeclaration(node: Node): node is CallSignatureDeclaration;\n' +
    '    function isConstructSignatureDeclaration(node: Node): node is ConstructSignatureDeclaration;\n' +
    '    function isIndexSignatureDeclaration(node: Node): node is IndexSignatureDeclaration;\n' +
    '    function isTypePredicateNode(node: Node): node is TypePredicateNode;\n' +
    '    function isTypeReferenceNode(node: Node): node is TypeReferenceNode;\n' +
    '    function isFunctionTypeNode(node: Node): node is FunctionTypeNode;\n' +
    '    function isConstructorTypeNode(node: Node): node is ConstructorTypeNode;\n' +
    '    function isTypeQueryNode(node: Node): node is TypeQueryNode;\n' +
    '    function isTypeLiteralNode(node: Node): node is TypeLiteralNode;\n' +
    '    function isArrayTypeNode(node: Node): node is ArrayTypeNode;\n' +
    '    function isTupleTypeNode(node: Node): node is TupleTypeNode;\n' +
    '    function isNamedTupleMember(node: Node): node is NamedTupleMember;\n' +
    '    function isOptionalTypeNode(node: Node): node is OptionalTypeNode;\n' +
    '    function isRestTypeNode(node: Node): node is RestTypeNode;\n' +
    '    function isUnionTypeNode(node: Node): node is UnionTypeNode;\n' +
    '    function isIntersectionTypeNode(node: Node): node is IntersectionTypeNode;\n' +
    '    function isConditionalTypeNode(node: Node): node is ConditionalTypeNode;\n' +
    '    function isInferTypeNode(node: Node): node is InferTypeNode;\n' +
    '    function isParenthesizedTypeNode(node: Node): node is ParenthesizedTypeNode;\n' +
    '    function isThisTypeNode(node: Node): node is ThisTypeNode;\n' +
    '    function isTypeOperatorNode(node: Node): node is TypeOperatorNode;\n' +
    '    function isIndexedAccessTypeNode(node: Node): node is IndexedAccessTypeNode;\n' +
    '    function isMappedTypeNode(node: Node): node is MappedTypeNode;\n' +
    '    function isLiteralTypeNode(node: Node): node is LiteralTypeNode;\n' +
    '    function isImportTypeNode(node: Node): node is ImportTypeNode;\n' +
    '    function isTemplateLiteralTypeSpan(node: Node): node is TemplateLiteralTypeSpan;\n' +
    '    function isTemplateLiteralTypeNode(node: Node): node is TemplateLiteralTypeNode;\n' +
    '    function isObjectBindingPattern(node: Node): node is ObjectBindingPattern;\n' +
    '    function isArrayBindingPattern(node: Node): node is ArrayBindingPattern;\n' +
    '    function isBindingElement(node: Node): node is BindingElement;\n' +
    '    function isArrayLiteralExpression(node: Node): node is ArrayLiteralExpression;\n' +
    '    function isObjectLiteralExpression(node: Node): node is ObjectLiteralExpression;\n' +
    '    function isPropertyAccessExpression(node: Node): node is PropertyAccessExpression;\n' +
    '    function isElementAccessExpression(node: Node): node is ElementAccessExpression;\n' +
    '    function isCallExpression(node: Node): node is CallExpression;\n' +
    '    function isNewExpression(node: Node): node is NewExpression;\n' +
    '    function isTaggedTemplateExpression(node: Node): node is TaggedTemplateExpression;\n' +
    '    function isTypeAssertionExpression(node: Node): node is TypeAssertion;\n' +
    '    function isParenthesizedExpression(node: Node): node is ParenthesizedExpression;\n' +
    '    function isFunctionExpression(node: Node): node is FunctionExpression;\n' +
    '    function isArrowFunction(node: Node): node is ArrowFunction;\n' +
    '    function isDeleteExpression(node: Node): node is DeleteExpression;\n' +
    '    function isTypeOfExpression(node: Node): node is TypeOfExpression;\n' +
    '    function isVoidExpression(node: Node): node is VoidExpression;\n' +
    '    function isAwaitExpression(node: Node): node is AwaitExpression;\n' +
    '    function isPrefixUnaryExpression(node: Node): node is PrefixUnaryExpression;\n' +
    '    function isPostfixUnaryExpression(node: Node): node is PostfixUnaryExpression;\n' +
    '    function isBinaryExpression(node: Node): node is BinaryExpression;\n' +
    '    function isConditionalExpression(node: Node): node is ConditionalExpression;\n' +
    '    function isTemplateExpression(node: Node): node is TemplateExpression;\n' +
    '    function isYieldExpression(node: Node): node is YieldExpression;\n' +
    '    function isSpreadElement(node: Node): node is SpreadElement;\n' +
    '    function isClassExpression(node: Node): node is ClassExpression;\n' +
    '    function isOmittedExpression(node: Node): node is OmittedExpression;\n' +
    '    function isExpressionWithTypeArguments(node: Node): node is ExpressionWithTypeArguments;\n' +
    '    function isAsExpression(node: Node): node is AsExpression;\n' +
    '    function isNonNullExpression(node: Node): node is NonNullExpression;\n' +
    '    function isMetaProperty(node: Node): node is MetaProperty;\n' +
    '    function isSyntheticExpression(node: Node): node is SyntheticExpression;\n' +
    '    function isPartiallyEmittedExpression(node: Node): node is PartiallyEmittedExpression;\n' +
    '    function isCommaListExpression(node: Node): node is CommaListExpression;\n' +
    '    function isTemplateSpan(node: Node): node is TemplateSpan;\n' +
    '    function isSemicolonClassElement(node: Node): node is SemicolonClassElement;\n' +
    '    function isBlock(node: Node): node is Block;\n' +
    '    function isVariableStatement(node: Node): node is VariableStatement;\n' +
    '    function isEmptyStatement(node: Node): node is EmptyStatement;\n' +
    '    function isExpressionStatement(node: Node): node is ExpressionStatement;\n' +
    '    function isIfStatement(node: Node): node is IfStatement;\n' +
    '    function isDoStatement(node: Node): node is DoStatement;\n' +
    '    function isWhileStatement(node: Node): node is WhileStatement;\n' +
    '    function isForStatement(node: Node): node is ForStatement;\n' +
    '    function isForInStatement(node: Node): node is ForInStatement;\n' +
    '    function isForOfStatement(node: Node): node is ForOfStatement;\n' +
    '    function isContinueStatement(node: Node): node is ContinueStatement;\n' +
    '    function isBreakStatement(node: Node): node is BreakStatement;\n' +
    '    function isReturnStatement(node: Node): node is ReturnStatement;\n' +
    '    function isWithStatement(node: Node): node is WithStatement;\n' +
    '    function isSwitchStatement(node: Node): node is SwitchStatement;\n' +
    '    function isLabeledStatement(node: Node): node is LabeledStatement;\n' +
    '    function isThrowStatement(node: Node): node is ThrowStatement;\n' +
    '    function isTryStatement(node: Node): node is TryStatement;\n' +
    '    function isDebuggerStatement(node: Node): node is DebuggerStatement;\n' +
    '    function isVariableDeclaration(node: Node): node is VariableDeclaration;\n' +
    '    function isVariableDeclarationList(node: Node): node is VariableDeclarationList;\n' +
    '    function isFunctionDeclaration(node: Node): node is FunctionDeclaration;\n' +
    '    function isClassDeclaration(node: Node): node is ClassDeclaration;\n' +
    '    function isInterfaceDeclaration(node: Node): node is InterfaceDeclaration;\n' +
    '    function isTypeAliasDeclaration(node: Node): node is TypeAliasDeclaration;\n' +
    '    function isEnumDeclaration(node: Node): node is EnumDeclaration;\n' +
    '    function isModuleDeclaration(node: Node): node is ModuleDeclaration;\n' +
    '    function isModuleBlock(node: Node): node is ModuleBlock;\n' +
    '    function isCaseBlock(node: Node): node is CaseBlock;\n' +
    '    function isNamespaceExportDeclaration(node: Node): node is NamespaceExportDeclaration;\n' +
    '    function isImportEqualsDeclaration(node: Node): node is ImportEqualsDeclaration;\n' +
    '    function isImportDeclaration(node: Node): node is ImportDeclaration;\n' +
    '    function isImportClause(node: Node): node is ImportClause;\n' +
    '    function isImportTypeAssertionContainer(node: Node): node is ImportTypeAssertionContainer;\n' +
    '    function isAssertClause(node: Node): node is AssertClause;\n' +
    '    function isAssertEntry(node: Node): node is AssertEntry;\n' +
    '    function isNamespaceImport(node: Node): node is NamespaceImport;\n' +
    '    function isNamespaceExport(node: Node): node is NamespaceExport;\n' +
    '    function isNamedImports(node: Node): node is NamedImports;\n' +
    '    function isImportSpecifier(node: Node): node is ImportSpecifier;\n' +
    '    function isExportAssignment(node: Node): node is ExportAssignment;\n' +
    '    function isExportDeclaration(node: Node): node is ExportDeclaration;\n' +
    '    function isNamedExports(node: Node): node is NamedExports;\n' +
    '    function isExportSpecifier(node: Node): node is ExportSpecifier;\n' +
    '    function isMissingDeclaration(node: Node): node is MissingDeclaration;\n' +
    '    function isNotEmittedStatement(node: Node): node is NotEmittedStatement;\n' +
    '    function isExternalModuleReference(node: Node): node is ExternalModuleReference;\n' +
    '    function isJsxElement(node: Node): node is JsxElement;\n' +
    '    function isJsxSelfClosingElement(node: Node): node is JsxSelfClosingElement;\n' +
    '    function isJsxOpeningElement(node: Node): node is JsxOpeningElement;\n' +
    '    function isJsxClosingElement(node: Node): node is JsxClosingElement;\n' +
    '    function isJsxFragment(node: Node): node is JsxFragment;\n' +
    '    function isJsxOpeningFragment(node: Node): node is JsxOpeningFragment;\n' +
    '    function isJsxClosingFragment(node: Node): node is JsxClosingFragment;\n' +
    '    function isJsxAttribute(node: Node): node is JsxAttribute;\n' +
    '    function isJsxAttributes(node: Node): node is JsxAttributes;\n' +
    '    function isJsxSpreadAttribute(node: Node): node is JsxSpreadAttribute;\n' +
    '    function isJsxExpression(node: Node): node is JsxExpression;\n' +
    '    function isCaseClause(node: Node): node is CaseClause;\n' +
    '    function isDefaultClause(node: Node): node is DefaultClause;\n' +
    '    function isHeritageClause(node: Node): node is HeritageClause;\n' +
    '    function isCatchClause(node: Node): node is CatchClause;\n' +
    '    function isPropertyAssignment(node: Node): node is PropertyAssignment;\n' +
    '    function isShorthandPropertyAssignment(node: Node): node is ShorthandPropertyAssignment;\n' +
    '    function isSpreadAssignment(node: Node): node is SpreadAssignment;\n' +
    '    function isEnumMember(node: Node): node is EnumMember;\n' +
    '    function isUnparsedPrepend(node: Node): node is UnparsedPrepend;\n' +
    '    function isSourceFile(node: Node): node is SourceFile;\n' +
    '    function isBundle(node: Node): node is Bundle;\n' +
    '    function isUnparsedSource(node: Node): node is UnparsedSource;\n' +
    '    function isJSDocTypeExpression(node: Node): node is JSDocTypeExpression;\n' +
    '    function isJSDocNameReference(node: Node): node is JSDocNameReference;\n' +
    '    function isJSDocMemberName(node: Node): node is JSDocMemberName;\n' +
    '    function isJSDocLink(node: Node): node is JSDocLink;\n' +
    '    function isJSDocLinkCode(node: Node): node is JSDocLinkCode;\n' +
    '    function isJSDocLinkPlain(node: Node): node is JSDocLinkPlain;\n' +
    '    function isJSDocAllType(node: Node): node is JSDocAllType;\n' +
    '    function isJSDocUnknownType(node: Node): node is JSDocUnknownType;\n' +
    '    function isJSDocNullableType(node: Node): node is JSDocNullableType;\n' +
    '    function isJSDocNonNullableType(node: Node): node is JSDocNonNullableType;\n' +
    '    function isJSDocOptionalType(node: Node): node is JSDocOptionalType;\n' +
    '    function isJSDocFunctionType(node: Node): node is JSDocFunctionType;\n' +
    '    function isJSDocVariadicType(node: Node): node is JSDocVariadicType;\n' +
    '    function isJSDocNamepathType(node: Node): node is JSDocNamepathType;\n' +
    '    function isJSDoc(node: Node): node is JSDoc;\n' +
    '    function isJSDocTypeLiteral(node: Node): node is JSDocTypeLiteral;\n' +
    '    function isJSDocSignature(node: Node): node is JSDocSignature;\n' +
    '    function isJSDocAugmentsTag(node: Node): node is JSDocAugmentsTag;\n' +
    '    function isJSDocAuthorTag(node: Node): node is JSDocAuthorTag;\n' +
    '    function isJSDocClassTag(node: Node): node is JSDocClassTag;\n' +
    '    function isJSDocCallbackTag(node: Node): node is JSDocCallbackTag;\n' +
    '    function isJSDocPublicTag(node: Node): node is JSDocPublicTag;\n' +
    '    function isJSDocPrivateTag(node: Node): node is JSDocPrivateTag;\n' +
    '    function isJSDocProtectedTag(node: Node): node is JSDocProtectedTag;\n' +
    '    function isJSDocReadonlyTag(node: Node): node is JSDocReadonlyTag;\n' +
    '    function isJSDocOverrideTag(node: Node): node is JSDocOverrideTag;\n' +
    '    function isJSDocDeprecatedTag(node: Node): node is JSDocDeprecatedTag;\n' +
    '    function isJSDocSeeTag(node: Node): node is JSDocSeeTag;\n' +
    '    function isJSDocEnumTag(node: Node): node is JSDocEnumTag;\n' +
    '    function isJSDocParameterTag(node: Node): node is JSDocParameterTag;\n' +
    '    function isJSDocReturnTag(node: Node): node is JSDocReturnTag;\n' +
    '    function isJSDocThisTag(node: Node): node is JSDocThisTag;\n' +
    '    function isJSDocTypeTag(node: Node): node is JSDocTypeTag;\n' +
    '    function isJSDocTemplateTag(node: Node): node is JSDocTemplateTag;\n' +
    '    function isJSDocTypedefTag(node: Node): node is JSDocTypedefTag;\n' +
    '    function isJSDocUnknownTag(node: Node): node is JSDocUnknownTag;\n' +
    '    function isJSDocPropertyTag(node: Node): node is JSDocPropertyTag;\n' +
    '    function isJSDocImplementsTag(node: Node): node is JSDocImplementsTag;\n' +
    '}\n' +
    'declare namespace ts {\n' +
    '    function setTextRange<T extends TextRange>(range: T, location: TextRange | undefined): T;\n' +
    '}\n' +
    'declare namespace ts {\n' +
    '    /**\n' +
    "     * Invokes a callback for each child of the given node. The 'cbNode' callback is invoked for all child nodes\n" +
    "     * stored in properties. If a 'cbNodes' callback is specified, it is invoked for embedded arrays; otherwise,\n" +
    "     * embedded arrays are flattened and the 'cbNode' callback is invoked for each element. If a callback returns\n" +
    '     * a truthy value, iteration stops and that value is returned. Otherwise, undefined is returned.\n' +
    '     *\n' +
    '     * @param node a given node to visit its children\n' +
    '     * @param cbNode a callback to be invoked for all child nodes\n' +
    '     * @param cbNodes a callback to be invoked for embedded array\n' +
    '     *\n' +
    '     * @remarks `forEachChild` must visit the children of a node in the order\n' +
    '     * that they appear in the source code. The language service depends on this property to locate nodes by position.\n' +
    '     */\n' +
    '    export function forEachChild<T>(node: Node, cbNode: (node: Node) => T | undefined, cbNodes?: (nodes: NodeArray<Node>) => T | undefined): T | undefined;\n' +
    '    export interface CreateSourceFileOptions {\n' +
    '        languageVersion: ScriptTarget;\n' +
    '        /**\n' +
    '         * Controls the format the file is detected as - this can be derived from only the path\n' +
    '         * and files on disk, but needs to be done with a module resolution cache in scope to be performant.\n' +
    '         * This is usually `undefined` for compilations that do not have `moduleResolution` values of `node16` or `nodenext`.\n' +
    '         */\n' +
    '        impliedNodeFormat?: ModuleKind.ESNext | ModuleKind.CommonJS;\n' +
    '        /**\n' +
    '         * Controls how module-y-ness is set for the given file. Usually the result of calling\n' +
    '         * `getSetExternalModuleIndicator` on a valid `CompilerOptions` object. If not present, the default\n' +
    '         * check specified by `isFileProbablyExternalModule` will be used to set the field.\n' +
    '         */\n' +
    '        setExternalModuleIndicator?: (file: SourceFile) => void;\n' +
    '    }\n' +
    '    export function createSourceFile(fileName: string, sourceText: string, languageVersionOrOptions: ScriptTarget | CreateSourceFileOptions, setParentNodes?: boolean, scriptKind?: ScriptKind): SourceFile;\n' +
    '    export function parseIsolatedEntityName(text: string, languageVersion: ScriptTarget): EntityName | undefined;\n' +
    '    /**\n' +
    '     * Parse json text into SyntaxTree and return node and parse errors if any\n' +
    '     * @param fileName\n' +
    '     * @param sourceText\n' +
    '     */\n' +
    '    export function parseJsonText(fileName: string, sourceText: string): JsonSourceFile;\n' +
    '    export function isExternalModule(file: SourceFile): boolean;\n' +
    '    export function updateSourceFile(sourceFile: SourceFile, newText: string, textChangeRange: TextChangeRange, aggressiveChecks?: boolean): SourceFile;\n' +
    '    export {};\n' +
    '}\n' +
    'declare namespace ts {\n' +
    '    export function parseCommandLine(commandLine: readonly string[], readFile?: (path: string) => string | undefined): ParsedCommandLine;\n' +
    '    export type DiagnosticReporter = (diagnostic: Diagnostic) => void;\n' +
    '    /**\n' +
    '     * Reports config file diagnostics\n' +
    '     */\n' +
    '    export interface ConfigFileDiagnosticsReporter {\n' +
    '        /**\n' +
    '         * Reports unrecoverable error when parsing config file\n' +
    '         */\n' +
    '        onUnRecoverableConfigFileDiagnostic: DiagnosticReporter;\n' +
    '    }\n' +
    '    /**\n' +
    '     * Interface extending ParseConfigHost to support ParseConfigFile that reads config file and reports errors\n' +
    '     */\n' +
    '    export interface ParseConfigFileHost extends ParseConfigHost, ConfigFileDiagnosticsReporter {\n' +
    '        getCurrentDirectory(): string;\n' +
    '    }\n' +
    '    /**\n' +
    '     * Reads the config file, reports errors if any and exits if the config file cannot be found\n' +
    '     */\n' +
    '    export function getParsedCommandLineOfConfigFile(configFileName: string, optionsToExtend: CompilerOptions | undefined, host: ParseConfigFileHost, extendedConfigCache?: Map<ExtendedConfigCacheEntry>, watchOptionsToExtend?: WatchOptions, extraFileExtensions?: readonly FileExtensionInfo[]): ParsedCommandLine | undefined;\n' +
    '    /**\n' +
    '     * Read tsconfig.json file\n' +
    '     * @param fileName The path to the config file\n' +
    '     */\n' +
    '    export function readConfigFile(fileName: string, readFile: (path: string) => string | undefined): {\n' +
    '        config?: any;\n' +
    '        error?: Diagnostic;\n' +
    '    };\n' +
    '    /**\n' +
    '     * Parse the text of the tsconfig.json file\n' +
    '     * @param fileName The path to the config file\n' +
    '     * @param jsonText The text of the config file\n' +
    '     */\n' +
    '    export function parseConfigFileTextToJson(fileName: string, jsonText: string): {\n' +
    '        config?: any;\n' +
    '        error?: Diagnostic;\n' +
    '    };\n' +
    '    /**\n' +
    '     * Read tsconfig.json file\n' +
    '     * @param fileName The path to the config file\n' +
    '     */\n' +
    '    export function readJsonConfigFile(fileName: string, readFile: (path: string) => string | undefined): TsConfigSourceFile;\n' +
    '    /**\n' +
    '     * Convert the json syntax tree into the json value\n' +
    '     */\n' +
    '    export function convertToObject(sourceFile: JsonSourceFile, errors: Push<Diagnostic>): any;\n' +
    '    /**\n' +
    '     * Parse the contents of a config file (tsconfig.json).\n' +
    '     * @param json The contents of the config file to parse\n' +
    '     * @param host Instance of ParseConfigHost used to enumerate files in folder.\n' +
    '     * @param basePath A root directory to resolve relative path entries in the config\n' +
    '     *    file to. e.g. outDir\n' +
    '     */\n' +
    '    export function parseJsonConfigFileContent(json: any, host: ParseConfigHost, basePath: string, existingOptions?: CompilerOptions, configFileName?: string, resolutionStack?: Path[], extraFileExtensions?: readonly FileExtensionInfo[], extendedConfigCache?: Map<ExtendedConfigCacheEntry>, existingWatchOptions?: WatchOptions): ParsedCommandLine;\n' +
    '    /**\n' +
    '     * Parse the contents of a config file (tsconfig.json).\n' +
    '     * @param jsonNode The contents of the config file to parse\n' +
    '     * @param host Instance of ParseConfigHost used to enumerate files in folder.\n' +
    '     * @param basePath A root directory to resolve relative path entries in the config\n' +
    '     *    file to. e.g. outDir\n' +
    '     */\n' +
    '    export function parseJsonSourceFileConfigFileContent(sourceFile: TsConfigSourceFile, host: ParseConfigHost, basePath: string, existingOptions?: CompilerOptions, configFileName?: string, resolutionStack?: Path[], extraFileExtensions?: readonly FileExtensionInfo[], extendedConfigCache?: Map<ExtendedConfigCacheEntry>, existingWatchOptions?: WatchOptions): ParsedCommandLine;\n' +
    '    export interface ParsedTsconfig {\n' +
    '        raw: any;\n' +
    '        options?: CompilerOptions;\n' +
    '        watchOptions?: WatchOptions;\n' +
    '        typeAcquisition?: TypeAcquisition;\n' +
    '        /**\n' +
    '         * Note that the case of the config path has not yet been normalized, as no files have been imported into the project yet\n' +
    '         */\n' +
    '        extendedConfigPath?: string;\n' +
    '    }\n' +
    '    export interface ExtendedConfigCacheEntry {\n' +
    '        extendedResult: TsConfigSourceFile;\n' +
    '        extendedConfig: ParsedTsconfig | undefined;\n' +
    '    }\n' +
    '    export function convertCompilerOptionsFromJson(jsonOptions: any, basePath: string, configFileName?: string): {\n' +
    '        options: CompilerOptions;\n' +
    '        errors: Diagnostic[];\n' +
    '    };\n' +
    '    export function convertTypeAcquisitionFromJson(jsonOptions: any, basePath: string, configFileName?: string): {\n' +
    '        options: TypeAcquisition;\n' +
    '        errors: Diagnostic[];\n' +
    '    };\n' +
    '    export {};\n' +
    '}\n' +
    'declare namespace ts {\n' +
    '    export function getEffectiveTypeRoots(options: CompilerOptions, host: GetEffectiveTypeRootsHost): string[] | undefined;\n' +
    '    /**\n' +
    '     * @param {string | undefined} containingFile - file that contains type reference directive, can be undefined if containing file is unknown.\n' +
    "     * This is possible in case if resolution is performed for directives specified via 'types' parameter. In this case initial path for secondary lookups\n" +
    '     * is assumed to be the same as root directory of the project.\n' +
    '     */\n' +
    '    export function resolveTypeReferenceDirective(typeReferenceDirectiveName: string, containingFile: string | undefined, options: CompilerOptions, host: ModuleResolutionHost, redirectedReference?: ResolvedProjectReference, cache?: TypeReferenceDirectiveResolutionCache, resolutionMode?: SourceFile["impliedNodeFormat"]): ResolvedTypeReferenceDirectiveWithFailedLookupLocations;\n' +
    '    /**\n' +
    '     * Given a set of options, returns the set of type directive names\n' +
    '     *   that should be included for this program automatically.\n' +
    '     * This list could either come from the config file,\n' +
    '     *   or from enumerating the types root + initial secondary types lookup location.\n' +
    '     * More type directives might appear in the program later as a result of loading actual source files;\n' +
    '     *   this list is only the set of defaults that are implicitly included.\n' +
    '     */\n' +
    '    export function getAutomaticTypeDirectiveNames(options: CompilerOptions, host: ModuleResolutionHost): string[];\n' +
    '    export interface TypeReferenceDirectiveResolutionCache extends PerDirectoryResolutionCache<ResolvedTypeReferenceDirectiveWithFailedLookupLocations>, PackageJsonInfoCache {\n' +
    '    }\n' +
    '    export interface ModeAwareCache<T> {\n' +
    '        get(key: string, mode: ModuleKind.CommonJS | ModuleKind.ESNext | undefined): T | undefined;\n' +
    '        set(key: string, mode: ModuleKind.CommonJS | ModuleKind.ESNext | undefined, value: T): this;\n' +
    '        delete(key: string, mode: ModuleKind.CommonJS | ModuleKind.ESNext | undefined): this;\n' +
    '        has(key: string, mode: ModuleKind.CommonJS | ModuleKind.ESNext | undefined): boolean;\n' +
    '        forEach(cb: (elem: T, key: string, mode: ModuleKind.CommonJS | ModuleKind.ESNext | undefined) => void): void;\n' +
    '        size(): number;\n' +
    '    }\n' +
    '    /**\n' +
    '     * Cached resolutions per containing directory.\n' +
    '     * This assumes that any module id will have the same resolution for sibling files located in the same folder.\n' +
    '     */\n' +
    '    export interface PerDirectoryResolutionCache<T> {\n' +
    '        getOrCreateCacheForDirectory(directoryName: string, redirectedReference?: ResolvedProjectReference): ModeAwareCache<T>;\n' +
    '        clear(): void;\n' +
    '        /**\n' +
    '         *  Updates with the current compilerOptions the cache will operate with.\n' +
    '         *  This updates the redirects map as well if needed so module resolutions are cached if they can across the projects\n' +
    '         */\n' +
    '        update(options: CompilerOptions): void;\n' +
    '    }\n' +
    '    export interface ModuleResolutionCache extends PerDirectoryResolutionCache<ResolvedModuleWithFailedLookupLocations>, NonRelativeModuleNameResolutionCache, PackageJsonInfoCache {\n' +
    '        getPackageJsonInfoCache(): PackageJsonInfoCache;\n' +
    '    }\n' +
    '    /**\n' +
    '     * Stored map from non-relative module name to a table: directory -> result of module lookup in this directory\n' +
    '     * We support only non-relative module names because resolution of relative module names is usually more deterministic and thus less expensive.\n' +
    '     */\n' +
    '    export interface NonRelativeModuleNameResolutionCache extends PackageJsonInfoCache {\n' +
    '        getOrCreateCacheForModuleName(nonRelativeModuleName: string, mode: ModuleKind.CommonJS | ModuleKind.ESNext | undefined, redirectedReference?: ResolvedProjectReference): PerModuleNameCache;\n' +
    '    }\n' +
    '    export interface PackageJsonInfoCache {\n' +
    '        clear(): void;\n' +
    '    }\n' +
    '    export interface PerModuleNameCache {\n' +
    '        get(directory: string): ResolvedModuleWithFailedLookupLocations | undefined;\n' +
    '        set(directory: string, result: ResolvedModuleWithFailedLookupLocations): void;\n' +
    '    }\n' +
    '    export function createModuleResolutionCache(currentDirectory: string, getCanonicalFileName: (s: string) => string, options?: CompilerOptions): ModuleResolutionCache;\n' +
    '    export function createTypeReferenceDirectiveResolutionCache(currentDirectory: string, getCanonicalFileName: (s: string) => string, options?: CompilerOptions, packageJsonInfoCache?: PackageJsonInfoCache): TypeReferenceDirectiveResolutionCache;\n' +
    '    export function resolveModuleNameFromCache(moduleName: string, containingFile: string, cache: ModuleResolutionCache, mode?: ModuleKind.CommonJS | ModuleKind.ESNext): ResolvedModuleWithFailedLookupLocations | undefined;\n' +
    '    export function resolveModuleName(moduleName: string, containingFile: string, compilerOptions: CompilerOptions, host: ModuleResolutionHost, cache?: ModuleResolutionCache, redirectedReference?: ResolvedProjectReference, resolutionMode?: ModuleKind.CommonJS | ModuleKind.ESNext): ResolvedModuleWithFailedLookupLocations;\n' +
    '    export function nodeModuleNameResolver(moduleName: string, containingFile: string, compilerOptions: CompilerOptions, host: ModuleResolutionHost, cache?: ModuleResolutionCache, redirectedReference?: ResolvedProjectReference): ResolvedModuleWithFailedLookupLocations;\n' +
    '    export function classicNameResolver(moduleName: string, containingFile: string, compilerOptions: CompilerOptions, host: ModuleResolutionHost, cache?: NonRelativeModuleNameResolutionCache, redirectedReference?: ResolvedProjectReference): ResolvedModuleWithFailedLookupLocations;\n' +
    '    export {};\n' +
    '}\n' +
    'declare namespace ts {\n' +
    '    /**\n' +
    '     * Visits a Node using the supplied visitor, possibly returning a new Node in its place.\n' +
    '     *\n' +
    '     * @param node The Node to visit.\n' +
    '     * @param visitor The callback used to visit the Node.\n' +
    '     * @param test A callback to execute to verify the Node is valid.\n' +
    '     * @param lift An optional callback to execute to lift a NodeArray into a valid Node.\n' +
    '     */\n' +
    '    function visitNode<T extends Node>(node: T, visitor: Visitor | undefined, test?: (node: Node) => boolean, lift?: (node: readonly Node[]) => T): T;\n' +
    '    /**\n' +
    '     * Visits a Node using the supplied visitor, possibly returning a new Node in its place.\n' +
    '     *\n' +
    '     * @param node The Node to visit.\n' +
    '     * @param visitor The callback used to visit the Node.\n' +
    '     * @param test A callback to execute to verify the Node is valid.\n' +
    '     * @param lift An optional callback to execute to lift a NodeArray into a valid Node.\n' +
    '     */\n' +
    '    function visitNode<T extends Node>(node: T | undefined, visitor: Visitor | undefined, test?: (node: Node) => boolean, lift?: (node: readonly Node[]) => T): T | undefined;\n' +
    '    /**\n' +
    '     * Visits a NodeArray using the supplied visitor, possibly returning a new NodeArray in its place.\n' +
    '     *\n' +
    '     * @param nodes The NodeArray to visit.\n' +
    '     * @param visitor The callback used to visit a Node.\n' +
    '     * @param test A node test to execute for each node.\n' +
    '     * @param start An optional value indicating the starting offset at which to start visiting.\n' +
    '     * @param count An optional value indicating the maximum number of nodes to visit.\n' +
    '     */\n' +
    '    function visitNodes<T extends Node>(nodes: NodeArray<T>, visitor: Visitor | undefined, test?: (node: Node) => boolean, start?: number, count?: number): NodeArray<T>;\n' +
    '    /**\n' +
    '     * Visits a NodeArray using the supplied visitor, possibly returning a new NodeArray in its place.\n' +
    '     *\n' +
    '     * @param nodes The NodeArray to visit.\n' +
    '     * @param visitor The callback used to visit a Node.\n' +
    '     * @param test A node test to execute for each node.\n' +
    '     * @param start An optional value indicating the starting offset at which to start visiting.\n' +
    '     * @param count An optional value indicating the maximum number of nodes to visit.\n' +
    '     */\n' +
    '    function visitNodes<T extends Node>(nodes: NodeArray<T> | undefined, visitor: Visitor | undefined, test?: (node: Node) => boolean, start?: number, count?: number): NodeArray<T> | undefined;\n' +
    '    /**\n' +
    '     * Starts a new lexical environment and visits a statement list, ending the lexical environment\n' +
    '     * and merging hoisted declarations upon completion.\n' +
    '     */\n' +
    '    function visitLexicalEnvironment(statements: NodeArray<Statement>, visitor: Visitor, context: TransformationContext, start?: number, ensureUseStrict?: boolean, nodesVisitor?: NodesVisitor): NodeArray<Statement>;\n' +
    '    /**\n' +
    '     * Starts a new lexical environment and visits a parameter list, suspending the lexical\n' +
    '     * environment upon completion.\n' +
    '     */\n' +
    '    function visitParameterList(nodes: NodeArray<ParameterDeclaration>, visitor: Visitor, context: TransformationContext, nodesVisitor?: NodesVisitor): NodeArray<ParameterDeclaration>;\n' +
    '    function visitParameterList(nodes: NodeArray<ParameterDeclaration> | undefined, visitor: Visitor, context: TransformationContext, nodesVisitor?: NodesVisitor): NodeArray<ParameterDeclaration> | undefined;\n' +
    '    /**\n' +
    '     * Resumes a suspended lexical environment and visits a function body, ending the lexical\n' +
    '     * environment and merging hoisted declarations upon completion.\n' +
    '     */\n' +
    '    function visitFunctionBody(node: FunctionBody, visitor: Visitor, context: TransformationContext): FunctionBody;\n' +
    '    /**\n' +
    '     * Resumes a suspended lexical environment and visits a function body, ending the lexical\n' +
    '     * environment and merging hoisted declarations upon completion.\n' +
    '     */\n' +
    '    function visitFunctionBody(node: FunctionBody | undefined, visitor: Visitor, context: TransformationContext): FunctionBody | undefined;\n' +
    '    /**\n' +
    '     * Resumes a suspended lexical environment and visits a concise body, ending the lexical\n' +
    '     * environment and merging hoisted declarations upon completion.\n' +
    '     */\n' +
    '    function visitFunctionBody(node: ConciseBody, visitor: Visitor, context: TransformationContext): ConciseBody;\n' +
    '    /**\n' +
    '     * Visits an iteration body, adding any block-scoped variables required by the transformation.\n' +
    '     */\n' +
    '    function visitIterationBody(body: Statement, visitor: Visitor, context: TransformationContext): Statement;\n' +
    '    /**\n' +
    '     * Visits each child of a Node using the supplied visitor, possibly returning a new Node of the same kind in its place.\n' +
    '     *\n' +
    '     * @param node The Node whose children will be visited.\n' +
    '     * @param visitor The callback used to visit each child.\n' +
    '     * @param context A lexical environment context for the visitor.\n' +
    '     */\n' +
    '    function visitEachChild<T extends Node>(node: T, visitor: Visitor, context: TransformationContext): T;\n' +
    '    /**\n' +
    '     * Visits each child of a Node using the supplied visitor, possibly returning a new Node of the same kind in its place.\n' +
    '     *\n' +
    '     * @param node The Node whose children will be visited.\n' +
    '     * @param visitor The callback used to visit each child.\n' +
    '     * @param context A lexical environment context for the visitor.\n' +
    '     */\n' +
    '    function visitEachChild<T extends Node>(node: T | undefined, visitor: Visitor, context: TransformationContext, nodesVisitor?: typeof visitNodes, tokenVisitor?: Visitor): T | undefined;\n' +
    '}\n' +
    'declare namespace ts {\n' +
    '    function getTsBuildInfoEmitOutputFilePath(options: CompilerOptions): string | undefined;\n' +
    '    function getOutputFileNames(commandLine: ParsedCommandLine, inputFileName: string, ignoreCase: boolean): readonly string[];\n' +
    '    function createPrinter(printerOptions?: PrinterOptions, handlers?: PrintHandlers): Printer;\n' +
    '}\n' +
    'declare namespace ts {\n' +
    '    export function findConfigFile(searchPath: string, fileExists: (fileName: string) => boolean, configName?: string): string | undefined;\n' +
    '    export function resolveTripleslashReference(moduleName: string, containingFile: string): string;\n' +
    '    export function createCompilerHost(options: CompilerOptions, setParentNodes?: boolean): CompilerHost;\n' +
    '    export function getPreEmitDiagnostics(program: Program, sourceFile?: SourceFile, cancellationToken?: CancellationToken): readonly Diagnostic[];\n' +
    '    export interface FormatDiagnosticsHost {\n' +
    '        getCurrentDirectory(): string;\n' +
    '        getCanonicalFileName(fileName: string): string;\n' +
    '        getNewLine(): string;\n' +
    '    }\n' +
    '    export function formatDiagnostics(diagnostics: readonly Diagnostic[], host: FormatDiagnosticsHost): string;\n' +
    '    export function formatDiagnostic(diagnostic: Diagnostic, host: FormatDiagnosticsHost): string;\n' +
    '    export function formatDiagnosticsWithColorAndContext(diagnostics: readonly Diagnostic[], host: FormatDiagnosticsHost): string;\n' +
    '    export function flattenDiagnosticMessageText(diag: string | DiagnosticMessageChain | undefined, newLine: string, indent?: number): string;\n' +
    '    /**\n' +
    '     * Calculates the resulting resolution mode for some reference in some file - this is generally the explicitly\n' +
    '     * provided resolution mode in the reference, unless one is not present, in which case it is the mode of the containing file.\n' +
    '     */\n' +
    '    export function getModeForFileReference(ref: FileReference | string, containingFileMode: SourceFile["impliedNodeFormat"]): ModuleKind.CommonJS | ModuleKind.ESNext | undefined;\n' +
    '    /**\n' +
    "     * Calculates the final resolution mode for an import at some index within a file's imports list. This is generally the explicitly\n" +
    '     * defined mode of the import if provided, or, if not, the mode of the containing file (with some exceptions: import=require is always commonjs, dynamic import is always esm).\n' +
    '     * If you have an actual import node, prefer using getModeForUsageLocation on the reference string node.\n' +
    '     * @param file File to fetch the resolution mode within\n' +
    "     * @param index Index into the file's complete resolution list to get the resolution of - this is a concatenation of the file's imports and module augmentations\n" +
    '     */\n' +
    '    export function getModeForResolutionAtIndex(file: SourceFile, index: number): ModuleKind.CommonJS | ModuleKind.ESNext | undefined;\n' +
    '    /**\n' +
    '     * Calculates the final resolution mode for a given module reference node. This is generally the explicitly provided resolution mode, if\n' +
    '     * one exists, or the mode of the containing source file. (Excepting import=require, which is always commonjs, and dynamic import, which is always esm).\n' +
    '     * Notably, this function always returns `undefined` if the containing file has an `undefined` `impliedNodeFormat` - this field is only set when\n' +
    '     * `moduleResolution` is `node16`+.\n' +
    '     * @param file The file the import or import-like reference is contained within\n' +
    '     * @param usage The module reference string\n' +
    '     * @returns The final resolution mode of the import\n' +
    '     */\n' +
    '    export function getModeForUsageLocation(file: {\n' +
    '        impliedNodeFormat?: SourceFile["impliedNodeFormat"];\n' +
    '    }, usage: StringLiteralLike): ModuleKind.CommonJS | ModuleKind.ESNext | undefined;\n' +
    '    export function getConfigFileParsingDiagnostics(configFileParseResult: ParsedCommandLine): readonly Diagnostic[];\n' +
    '    /**\n' +
    '     * A function for determining if a given file is esm or cjs format, assuming modern node module resolution rules, as configured by the\n' +
    '     * `options` parameter.\n' +
    '     *\n' +
    '     * @param fileName The normalized absolute path to check the format of (it need not exist on disk)\n' +
    "     * @param [packageJsonInfoCache] A cache for package file lookups - it's best to have a cache when this function is called often\n" +
    '     * @param host The ModuleResolutionHost which can perform the filesystem lookups for package json data\n' +
    '     * @param options The compiler options to perform the analysis under - relevant options are `moduleResolution` and `traceResolution`\n' +
    '     * @returns `undefined` if the path has no relevant implied format, `ModuleKind.ESNext` for esm format, and `ModuleKind.CommonJS` for cjs format\n' +
    '     */\n' +
    '    export function getImpliedNodeFormatForFile(fileName: Path, packageJsonInfoCache: PackageJsonInfoCache | undefined, host: ModuleResolutionHost, options: CompilerOptions): ModuleKind.ESNext | ModuleKind.CommonJS | undefined;\n' +
    '    /**\n' +
    "     * Create a new 'Program' instance. A Program is an immutable collection of 'SourceFile's and a 'CompilerOptions'\n" +
    '     * that represent a compilation unit.\n' +
    '     *\n' +
    '     * Creating a program proceeds from a set of root files, expanding the set of inputs by following imports and\n' +
    "     * triple-slash-reference-path directives transitively. '@types' and triple-slash-reference-types are also pulled in.\n" +
    '     *\n' +
    '     * @param createProgramOptions - The options for creating a program.\n' +
    "     * @returns A 'Program' object.\n" +
    '     */\n' +
    '    export function createProgram(createProgramOptions: CreateProgramOptions): Program;\n' +
    '    /**\n' +
    "     * Create a new 'Program' instance. A Program is an immutable collection of 'SourceFile's and a 'CompilerOptions'\n" +
    '     * that represent a compilation unit.\n' +
    '     *\n' +
    '     * Creating a program proceeds from a set of root files, expanding the set of inputs by following imports and\n' +
    "     * triple-slash-reference-path directives transitively. '@types' and triple-slash-reference-types are also pulled in.\n" +
    '     *\n' +
    '     * @param rootNames - A set of root files.\n' +
    '     * @param options - The compiler options which should be used.\n' +
    '     * @param host - The host interacts with the underlying file system.\n' +
    '     * @param oldProgram - Reuses an old program structure.\n' +
    '     * @param configFileParsingDiagnostics - error during config file parsing\n' +
    "     * @returns A 'Program' object.\n" +
    '     */\n' +
    '    export function createProgram(rootNames: readonly string[], options: CompilerOptions, host?: CompilerHost, oldProgram?: Program, configFileParsingDiagnostics?: readonly Diagnostic[]): Program;\n' +
    '    /** @deprecated */ export interface ResolveProjectReferencePathHost {\n' +
    '        fileExists(fileName: string): boolean;\n' +
    '    }\n' +
    '    /**\n' +
    '     * Returns the target config filename of a project reference.\n' +
    '     * Note: The file might not exist.\n' +
    '     */\n' +
    '    export function resolveProjectReferencePath(ref: ProjectReference): ResolvedConfigFileName;\n' +
    '    /** @deprecated */ export function resolveProjectReferencePath(host: ResolveProjectReferencePathHost, ref: ProjectReference): ResolvedConfigFileName;\n' +
    '    export {};\n' +
    '}\n' +
    'declare namespace ts {\n' +
    '    interface EmitOutput {\n' +
    '        outputFiles: OutputFile[];\n' +
    '        emitSkipped: boolean;\n' +
    '    }\n' +
    '    interface OutputFile {\n' +
    '        name: string;\n' +
    '        writeByteOrderMark: boolean;\n' +
    '        text: string;\n' +
    '    }\n' +
    '}\n' +
    'declare namespace ts {\n' +
    '    type AffectedFileResult<T> = {\n' +
    '        result: T;\n' +
    '        affected: SourceFile | Program;\n' +
    '    } | undefined;\n' +
    '    interface BuilderProgramHost {\n' +
    '        /**\n' +
    '         * return true if file names are treated with case sensitivity\n' +
    '         */\n' +
    '        useCaseSensitiveFileNames(): boolean;\n' +
    '        /**\n' +
    '         * If provided this would be used this hash instead of actual file shape text for detecting changes\n' +
    '         */\n' +
    '        createHash?: (data: string) => string;\n' +
    '        /**\n' +
    '         * When emit or emitNextAffectedFile are called without writeFile,\n' +
    '         * this callback if present would be used to write files\n' +
    '         */\n' +
    '        writeFile?: WriteFileCallback;\n' +
    '    }\n' +
    '    /**\n' +
    '     * Builder to manage the program state changes\n' +
    '     */\n' +
    '    interface BuilderProgram {\n' +
    '        /**\n' +
    '         * Returns current program\n' +
    '         */\n' +
    '        getProgram(): Program;\n' +
    '        /**\n' +
    '         * Get compiler options of the program\n' +
    '         */\n' +
    '        getCompilerOptions(): CompilerOptions;\n' +
    '        /**\n' +
    '         * Get the source file in the program with file name\n' +
    '         */\n' +
    '        getSourceFile(fileName: string): SourceFile | undefined;\n' +
    '        /**\n' +
    '         * Get a list of files in the program\n' +
    '         */\n' +
    '        getSourceFiles(): readonly SourceFile[];\n' +
    '        /**\n' +
    '         * Get the diagnostics for compiler options\n' +
    '         */\n' +
    '        getOptionsDiagnostics(cancellationToken?: CancellationToken): readonly Diagnostic[];\n' +
    '        /**\n' +
    '         * Get the diagnostics that dont belong to any file\n' +
    '         */\n' +
    '        getGlobalDiagnostics(cancellationToken?: CancellationToken): readonly Diagnostic[];\n' +
    '        /**\n' +
    '         * Get the diagnostics from config file parsing\n' +
    '         */\n' +
    '        getConfigFileParsingDiagnostics(): readonly Diagnostic[];\n' +
    '        /**\n' +
    '         * Get the syntax diagnostics, for all source files if source file is not supplied\n' +
    '         */\n' +
    '        getSyntacticDiagnostics(sourceFile?: SourceFile, cancellationToken?: CancellationToken): readonly Diagnostic[];\n' +
    '        /**\n' +
    '         * Get the declaration diagnostics, for all source files if source file is not supplied\n' +
    '         */\n' +
    '        getDeclarationDiagnostics(sourceFile?: SourceFile, cancellationToken?: CancellationToken): readonly DiagnosticWithLocation[];\n' +
    '        /**\n' +
    '         * Get all the dependencies of the file\n' +
    '         */\n' +
    '        getAllDependencies(sourceFile: SourceFile): readonly string[];\n' +
    '        /**\n' +
    '         * Gets the semantic diagnostics from the program corresponding to this state of file (if provided) or whole program\n' +
    '         * The semantic diagnostics are cached and managed here\n' +
    '         * Note that it is assumed that when asked about semantic diagnostics through this API,\n' +
    '         * the file has been taken out of affected files so it is safe to use cache or get from program and cache the diagnostics\n' +
    '         * In case of SemanticDiagnosticsBuilderProgram if the source file is not provided,\n' +
    '         * it will iterate through all the affected files, to ensure that cache stays valid and yet provide a way to get all semantic diagnostics\n' +
    '         */\n' +
    '        getSemanticDiagnostics(sourceFile?: SourceFile, cancellationToken?: CancellationToken): readonly Diagnostic[];\n' +
    '        /**\n' +
    '         * Emits the JavaScript and declaration files.\n' +
    '         * When targetSource file is specified, emits the files corresponding to that source file,\n' +
    '         * otherwise for the whole program.\n' +
    '         * In case of EmitAndSemanticDiagnosticsBuilderProgram, when targetSourceFile is specified,\n' +
    '         * it is assumed that that file is handled from affected file list. If targetSourceFile is not specified,\n' +
    '         * it will only emit all the affected files instead of whole program\n' +
    '         *\n' +
    '         * The first of writeFile if provided, writeFile of BuilderProgramHost if provided, writeFile of compiler host\n' +
    '         * in that order would be used to write the files\n' +
    '         */\n' +
    '        emit(targetSourceFile?: SourceFile, writeFile?: WriteFileCallback, cancellationToken?: CancellationToken, emitOnlyDtsFiles?: boolean, customTransformers?: CustomTransformers): EmitResult;\n' +
    '        /**\n' +
    '         * Get the current directory of the program\n' +
    '         */\n' +
    '        getCurrentDirectory(): string;\n' +
    '    }\n' +
    '    /**\n' +
    '     * The builder that caches the semantic diagnostics for the program and handles the changed files and affected files\n' +
    '     */\n' +
    '    interface SemanticDiagnosticsBuilderProgram extends BuilderProgram {\n' +
    '        /**\n' +
    '         * Gets the semantic diagnostics from the program for the next affected file and caches it\n' +
    '         * Returns undefined if the iteration is complete\n' +
    '         */\n' +
    '        getSemanticDiagnosticsOfNextAffectedFile(cancellationToken?: CancellationToken, ignoreSourceFile?: (sourceFile: SourceFile) => boolean): AffectedFileResult<readonly Diagnostic[]>;\n' +
    '    }\n' +
    '    /**\n' +
    '     * The builder that can handle the changes in program and iterate through changed file to emit the files\n' +
    '     * The semantic diagnostics are cached per file and managed by clearing for the changed/affected files\n' +
    '     */\n' +
    '    interface EmitAndSemanticDiagnosticsBuilderProgram extends SemanticDiagnosticsBuilderProgram {\n' +
    '        /**\n' +
    "         * Emits the next affected file's emit result (EmitResult and sourceFiles emitted) or returns undefined if iteration is complete\n" +
    '         * The first of writeFile if provided, writeFile of BuilderProgramHost if provided, writeFile of compiler host\n' +
    '         * in that order would be used to write the files\n' +
    '         */\n' +
    '        emitNextAffectedFile(writeFile?: WriteFileCallback, cancellationToken?: CancellationToken, emitOnlyDtsFiles?: boolean, customTransformers?: CustomTransformers): AffectedFileResult<EmitResult>;\n' +
    '    }\n' +
    '    /**\n' +
    '     * Create the builder to manage semantic diagnostics and cache them\n' +
    '     */\n' +
    '    function createSemanticDiagnosticsBuilderProgram(newProgram: Program, host: BuilderProgramHost, oldProgram?: SemanticDiagnosticsBuilderProgram, configFileParsingDiagnostics?: readonly Diagnostic[]): SemanticDiagnosticsBuilderProgram;\n' +
    '    function createSemanticDiagnosticsBuilderProgram(rootNames: readonly string[] | undefined, options: CompilerOptions | undefined, host?: CompilerHost, oldProgram?: SemanticDiagnosticsBuilderProgram, configFileParsingDiagnostics?: readonly Diagnostic[], projectReferences?: readonly ProjectReference[]): SemanticDiagnosticsBuilderProgram;\n' +
    '    /**\n' +
    '     * Create the builder that can handle the changes in program and iterate through changed files\n' +
    '     * to emit the those files and manage semantic diagnostics cache as well\n' +
    '     */\n' +
    '    function createEmitAndSemanticDiagnosticsBuilderProgram(newProgram: Program, host: BuilderProgramHost, oldProgram?: EmitAndSemanticDiagnosticsBuilderProgram, configFileParsingDiagnostics?: readonly Diagnostic[]): EmitAndSemanticDiagnosticsBuilderProgram;\n' +
    '    function createEmitAndSemanticDiagnosticsBuilderProgram(rootNames: readonly string[] | undefined, options: CompilerOptions | undefined, host?: CompilerHost, oldProgram?: EmitAndSemanticDiagnosticsBuilderProgram, configFileParsingDiagnostics?: readonly Diagnostic[], projectReferences?: readonly ProjectReference[]): EmitAndSemanticDiagnosticsBuilderProgram;\n' +
    '    /**\n' +
    '     * Creates a builder thats just abstraction over program and can be used with watch\n' +
    '     */\n' +
    '    function createAbstractBuilder(newProgram: Program, host: BuilderProgramHost, oldProgram?: BuilderProgram, configFileParsingDiagnostics?: readonly Diagnostic[]): BuilderProgram;\n' +
    '    function createAbstractBuilder(rootNames: readonly string[] | undefined, options: CompilerOptions | undefined, host?: CompilerHost, oldProgram?: BuilderProgram, configFileParsingDiagnostics?: readonly Diagnostic[], projectReferences?: readonly ProjectReference[]): BuilderProgram;\n' +
    '}\n' +
    'declare namespace ts {\n' +
    '    interface ReadBuildProgramHost {\n' +
    '        useCaseSensitiveFileNames(): boolean;\n' +
    '        getCurrentDirectory(): string;\n' +
    '        readFile(fileName: string): string | undefined;\n' +
    '    }\n' +
    '    function readBuilderProgram(compilerOptions: CompilerOptions, host: ReadBuildProgramHost): EmitAndSemanticDiagnosticsBuilderProgram | undefined;\n' +
    '    function createIncrementalCompilerHost(options: CompilerOptions, system?: System): CompilerHost;\n' +
    '    interface IncrementalProgramOptions<T extends BuilderProgram> {\n' +
    '        rootNames: readonly string[];\n' +
    '        options: CompilerOptions;\n' +
    '        configFileParsingDiagnostics?: readonly Diagnostic[];\n' +
    '        projectReferences?: readonly ProjectReference[];\n' +
    '        host?: CompilerHost;\n' +
    '        createProgram?: CreateProgram<T>;\n' +
    '    }\n' +
    '    function createIncrementalProgram<T extends BuilderProgram = EmitAndSemanticDiagnosticsBuilderProgram>({ rootNames, options, configFileParsingDiagnostics, projectReferences, host, createProgram }: IncrementalProgramOptions<T>): T;\n' +
    '    type WatchStatusReporter = (diagnostic: Diagnostic, newLine: string, options: CompilerOptions, errorCount?: number) => void;\n' +
    '    /** Create the program with rootNames and options, if they are undefined, oldProgram and new configFile diagnostics create new program */\n' +
    '    type CreateProgram<T extends BuilderProgram> = (rootNames: readonly string[] | undefined, options: CompilerOptions | undefined, host?: CompilerHost, oldProgram?: T, configFileParsingDiagnostics?: readonly Diagnostic[], projectReferences?: readonly ProjectReference[] | undefined) => T;\n' +
    '    /** Host that has watch functionality used in --watch mode */\n' +
    '    interface WatchHost {\n' +
    '        /** If provided, called with Diagnostic message that informs about change in watch status */\n' +
    '        onWatchStatusChange?(diagnostic: Diagnostic, newLine: string, options: CompilerOptions, errorCount?: number): void;\n' +
    '        /** Used to watch changes in source files, missing files needed to update the program or config file */\n' +
    '        watchFile(path: string, callback: FileWatcherCallback, pollingInterval?: number, options?: CompilerOptions): FileWatcher;\n' +
    "        /** Used to watch resolved module's failed lookup locations, config file specs, type roots where auto type reference directives are added */\n" +
    '        watchDirectory(path: string, callback: DirectoryWatcherCallback, recursive?: boolean, options?: CompilerOptions): FileWatcher;\n' +
    '        /** If provided, will be used to set delayed compilation, so that multiple changes in short span are compiled together */\n' +
    '        setTimeout?(callback: (...args: any[]) => void, ms: number, ...args: any[]): any;\n' +
    '        /** If provided, will be used to reset existing delayed compilation */\n' +
    '        clearTimeout?(timeoutId: any): void;\n' +
    '    }\n' +
    '    interface ProgramHost<T extends BuilderProgram> {\n' +
    '        /**\n' +
    '         * Used to create the program when need for program creation or recreation detected\n' +
    '         */\n' +
    '        createProgram: CreateProgram<T>;\n' +
    '        useCaseSensitiveFileNames(): boolean;\n' +
    '        getNewLine(): string;\n' +
    '        getCurrentDirectory(): string;\n' +
    '        getDefaultLibFileName(options: CompilerOptions): string;\n' +
    '        getDefaultLibLocation?(): string;\n' +
    '        createHash?(data: string): string;\n' +
    '        /**\n' +
    '         * Use to check file presence for source files and\n' +
    '         * if resolveModuleNames is not provided (complier is in charge of module resolution) then module files as well\n' +
    '         */\n' +
    '        fileExists(path: string): boolean;\n' +
    '        /**\n' +
    '         * Use to read file text for source files and\n' +
    '         * if resolveModuleNames is not provided (complier is in charge of module resolution) then module files as well\n' +
    '         */\n' +
    '        readFile(path: string, encoding?: string): string | undefined;\n' +
    '        /** If provided, used for module resolution as well as to handle directory structure */\n' +
    '        directoryExists?(path: string): boolean;\n' +
    '        /** If provided, used in resolutions as well as handling directory structure */\n' +
    '        getDirectories?(path: string): string[];\n' +
    '        /** If provided, used to cache and handle directory structure modifications */\n' +
    '        readDirectory?(path: string, extensions?: readonly string[], exclude?: readonly string[], include?: readonly string[], depth?: number): string[];\n' +
    '        /** Symbol links resolution */\n' +
    '        realpath?(path: string): string;\n' +
    '        /** If provided would be used to write log about compilation */\n' +
    '        trace?(s: string): void;\n' +
    '        /** If provided is used to get the environment variable */\n' +
    '        getEnvironmentVariable?(name: string): string | undefined;\n' +
    "        /** If provided, used to resolve the module names, otherwise typescript's default module resolution */\n" +
    '        resolveModuleNames?(moduleNames: string[], containingFile: string, reusedNames: string[] | undefined, redirectedReference: ResolvedProjectReference | undefined, options: CompilerOptions, containingSourceFile?: SourceFile): (ResolvedModule | undefined)[];\n' +
    "        /** If provided, used to resolve type reference directives, otherwise typescript's default resolution */\n" +
    '        resolveTypeReferenceDirectives?(typeReferenceDirectiveNames: string[] | readonly FileReference[], containingFile: string, redirectedReference: ResolvedProjectReference | undefined, options: CompilerOptions, containingFileMode?: SourceFile["impliedNodeFormat"] | undefined): (ResolvedTypeReferenceDirective | undefined)[];\n' +
    '    }\n' +
    '    interface WatchCompilerHost<T extends BuilderProgram> extends ProgramHost<T>, WatchHost {\n' +
    '        /** Instead of using output d.ts file from project reference, use its source file */\n' +
    '        useSourceOfProjectReferenceRedirect?(): boolean;\n' +
    '        /** If provided, use this method to get parsed command lines for referenced projects */\n' +
    '        getParsedCommandLine?(fileName: string): ParsedCommandLine | undefined;\n' +
    '        /** If provided, callback to invoke after every new program creation */\n' +
    '        afterProgramCreate?(program: T): void;\n' +
    '    }\n' +
    '    /**\n' +
    '     * Host to create watch with root files and options\n' +
    '     */\n' +
    '    interface WatchCompilerHostOfFilesAndCompilerOptions<T extends BuilderProgram> extends WatchCompilerHost<T> {\n' +
    '        /** root files to use to generate program */\n' +
    '        rootFiles: string[];\n' +
    '        /** Compiler options */\n' +
    '        options: CompilerOptions;\n' +
    '        watchOptions?: WatchOptions;\n' +
    '        /** Project References */\n' +
    '        projectReferences?: readonly ProjectReference[];\n' +
    '    }\n' +
    '    /**\n' +
    '     * Host to create watch with config file\n' +
    '     */\n' +
    '    interface WatchCompilerHostOfConfigFile<T extends BuilderProgram> extends WatchCompilerHost<T>, ConfigFileDiagnosticsReporter {\n' +
    '        /** Name of the config file to compile */\n' +
    '        configFileName: string;\n' +
    '        /** Options to extend */\n' +
    '        optionsToExtend?: CompilerOptions;\n' +
    '        watchOptionsToExtend?: WatchOptions;\n' +
    '        extraFileExtensions?: readonly FileExtensionInfo[];\n' +
    '        /**\n' +
    '         * Used to generate source file names from the config file and its include, exclude, files rules\n' +
    '         * and also to cache the directory stucture\n' +
    '         */\n' +
    '        readDirectory(path: string, extensions?: readonly string[], exclude?: readonly string[], include?: readonly string[], depth?: number): string[];\n' +
    '    }\n' +
    '    interface Watch<T> {\n' +
    '        /** Synchronize with host and get updated program */\n' +
    '        getProgram(): T;\n' +
    '        /** Closes the watch */\n' +
    '        close(): void;\n' +
    '    }\n' +
    '    /**\n' +
    '     * Creates the watch what generates program using the config file\n' +
    '     */\n' +
    '    interface WatchOfConfigFile<T> extends Watch<T> {\n' +
    '    }\n' +
    '    /**\n' +
    '     * Creates the watch that generates program using the root files and compiler options\n' +
    '     */\n' +
    '    interface WatchOfFilesAndCompilerOptions<T> extends Watch<T> {\n' +
    '        /** Updates the root files in the program, only if this is not config file compilation */\n' +
    '        updateRootFileNames(fileNames: string[]): void;\n' +
    '    }\n' +
    '    /**\n' +
    '     * Create the watch compiler host for either configFile or fileNames and its options\n' +
    '     */\n' +
    '    function createWatchCompilerHost<T extends BuilderProgram>(configFileName: string, optionsToExtend: CompilerOptions | undefined, system: System, createProgram?: CreateProgram<T>, reportDiagnostic?: DiagnosticReporter, reportWatchStatus?: WatchStatusReporter, watchOptionsToExtend?: WatchOptions, extraFileExtensions?: readonly FileExtensionInfo[]): WatchCompilerHostOfConfigFile<T>;\n' +
    '    function createWatchCompilerHost<T extends BuilderProgram>(rootFiles: string[], options: CompilerOptions, system: System, createProgram?: CreateProgram<T>, reportDiagnostic?: DiagnosticReporter, reportWatchStatus?: WatchStatusReporter, projectReferences?: readonly ProjectReference[], watchOptions?: WatchOptions): WatchCompilerHostOfFilesAndCompilerOptions<T>;\n' +
    '    /**\n' +
    '     * Creates the watch from the host for root files and compiler options\n' +
    '     */\n' +
    '    function createWatchProgram<T extends BuilderProgram>(host: WatchCompilerHostOfFilesAndCompilerOptions<T>): WatchOfFilesAndCompilerOptions<T>;\n' +
    '    /**\n' +
    '     * Creates the watch from the host for config file\n' +
    '     */\n' +
    '    function createWatchProgram<T extends BuilderProgram>(host: WatchCompilerHostOfConfigFile<T>): WatchOfConfigFile<T>;\n' +
    '}\n' +
    'declare namespace ts {\n' +
    '    interface BuildOptions {\n' +
    '        dry?: boolean;\n' +
    '        force?: boolean;\n' +
    '        verbose?: boolean;\n' +
    '        incremental?: boolean;\n' +
    '        assumeChangesOnlyAffectDirectDependencies?: boolean;\n' +
    '        traceResolution?: boolean;\n' +
    '        [option: string]: CompilerOptionsValue | undefined;\n' +
    '    }\n' +
    '    type ReportEmitErrorSummary = (errorCount: number, filesInError: (ReportFileInError | undefined)[]) => void;\n' +
    '    interface ReportFileInError {\n' +
    '        fileName: string;\n' +
    '        line: number;\n' +
    '    }\n' +
    '    interface SolutionBuilderHostBase<T extends BuilderProgram> extends ProgramHost<T> {\n' +
    '        createDirectory?(path: string): void;\n' +
    '        /**\n' +
    '         * Should provide create directory and writeFile if done of invalidatedProjects is not invoked with\n' +
    '         * writeFileCallback\n' +
    '         */\n' +
    '        writeFile?(path: string, data: string, writeByteOrderMark?: boolean): void;\n' +
    '        getCustomTransformers?: (project: string) => CustomTransformers | undefined;\n' +
    '        getModifiedTime(fileName: string): Date | undefined;\n' +
    '        setModifiedTime(fileName: string, date: Date): void;\n' +
    '        deleteFile(fileName: string): void;\n' +
    '        getParsedCommandLine?(fileName: string): ParsedCommandLine | undefined;\n' +
    '        reportDiagnostic: DiagnosticReporter;\n' +
    '        reportSolutionBuilderStatus: DiagnosticReporter;\n' +
    '        afterProgramEmitAndDiagnostics?(program: T): void;\n' +
    '    }\n' +
    '    interface SolutionBuilderHost<T extends BuilderProgram> extends SolutionBuilderHostBase<T> {\n' +
    '        reportErrorSummary?: ReportEmitErrorSummary;\n' +
    '    }\n' +
    '    interface SolutionBuilderWithWatchHost<T extends BuilderProgram> extends SolutionBuilderHostBase<T>, WatchHost {\n' +
    '    }\n' +
    '    interface SolutionBuilder<T extends BuilderProgram> {\n' +
    '        build(project?: string, cancellationToken?: CancellationToken, writeFile?: WriteFileCallback, getCustomTransformers?: (project: string) => CustomTransformers): ExitStatus;\n' +
    '        clean(project?: string): ExitStatus;\n' +
    '        buildReferences(project: string, cancellationToken?: CancellationToken, writeFile?: WriteFileCallback, getCustomTransformers?: (project: string) => CustomTransformers): ExitStatus;\n' +
    '        cleanReferences(project?: string): ExitStatus;\n' +
    '        getNextInvalidatedProject(cancellationToken?: CancellationToken): InvalidatedProject<T> | undefined;\n' +
    '    }\n' +
    '    /**\n' +
    '     * Create a function that reports watch status by writing to the system and handles the formating of the diagnostic\n' +
    '     */\n' +
    '    function createBuilderStatusReporter(system: System, pretty?: boolean): DiagnosticReporter;\n' +
    '    function createSolutionBuilderHost<T extends BuilderProgram = EmitAndSemanticDiagnosticsBuilderProgram>(system?: System, createProgram?: CreateProgram<T>, reportDiagnostic?: DiagnosticReporter, reportSolutionBuilderStatus?: DiagnosticReporter, reportErrorSummary?: ReportEmitErrorSummary): SolutionBuilderHost<T>;\n' +
    '    function createSolutionBuilderWithWatchHost<T extends BuilderProgram = EmitAndSemanticDiagnosticsBuilderProgram>(system?: System, createProgram?: CreateProgram<T>, reportDiagnostic?: DiagnosticReporter, reportSolutionBuilderStatus?: DiagnosticReporter, reportWatchStatus?: WatchStatusReporter): SolutionBuilderWithWatchHost<T>;\n' +
    '    function createSolutionBuilder<T extends BuilderProgram>(host: SolutionBuilderHost<T>, rootNames: readonly string[], defaultOptions: BuildOptions): SolutionBuilder<T>;\n' +
    '    function createSolutionBuilderWithWatch<T extends BuilderProgram>(host: SolutionBuilderWithWatchHost<T>, rootNames: readonly string[], defaultOptions: BuildOptions, baseWatchOptions?: WatchOptions): SolutionBuilder<T>;\n' +
    '    enum InvalidatedProjectKind {\n' +
    '        Build = 0,\n' +
    '        UpdateBundle = 1,\n' +
    '        UpdateOutputFileStamps = 2\n' +
    '    }\n' +
    '    interface InvalidatedProjectBase {\n' +
    '        readonly kind: InvalidatedProjectKind;\n' +
    '        readonly project: ResolvedConfigFileName;\n' +
    '        /**\n' +
    '         *  To dispose this project and ensure that all the necessary actions are taken and state is updated accordingly\n' +
    '         */\n' +
    '        done(cancellationToken?: CancellationToken, writeFile?: WriteFileCallback, customTransformers?: CustomTransformers): ExitStatus;\n' +
    '        getCompilerOptions(): CompilerOptions;\n' +
    '        getCurrentDirectory(): string;\n' +
    '    }\n' +
    '    interface UpdateOutputFileStampsProject extends InvalidatedProjectBase {\n' +
    '        readonly kind: InvalidatedProjectKind.UpdateOutputFileStamps;\n' +
    '        updateOutputFileStatmps(): void;\n' +
    '    }\n' +
    '    interface BuildInvalidedProject<T extends BuilderProgram> extends InvalidatedProjectBase {\n' +
    '        readonly kind: InvalidatedProjectKind.Build;\n' +
    '        getBuilderProgram(): T | undefined;\n' +
    '        getProgram(): Program | undefined;\n' +
    '        getSourceFile(fileName: string): SourceFile | undefined;\n' +
    '        getSourceFiles(): readonly SourceFile[];\n' +
    '        getOptionsDiagnostics(cancellationToken?: CancellationToken): readonly Diagnostic[];\n' +
    '        getGlobalDiagnostics(cancellationToken?: CancellationToken): readonly Diagnostic[];\n' +
    '        getConfigFileParsingDiagnostics(): readonly Diagnostic[];\n' +
    '        getSyntacticDiagnostics(sourceFile?: SourceFile, cancellationToken?: CancellationToken): readonly Diagnostic[];\n' +
    '        getAllDependencies(sourceFile: SourceFile): readonly string[];\n' +
    '        getSemanticDiagnostics(sourceFile?: SourceFile, cancellationToken?: CancellationToken): readonly Diagnostic[];\n' +
    '        getSemanticDiagnosticsOfNextAffectedFile(cancellationToken?: CancellationToken, ignoreSourceFile?: (sourceFile: SourceFile) => boolean): AffectedFileResult<readonly Diagnostic[]>;\n' +
    '        emit(targetSourceFile?: SourceFile, writeFile?: WriteFileCallback, cancellationToken?: CancellationToken, emitOnlyDtsFiles?: boolean, customTransformers?: CustomTransformers): EmitResult | undefined;\n' +
    '    }\n' +
    '    interface UpdateBundleProject<T extends BuilderProgram> extends InvalidatedProjectBase {\n' +
    '        readonly kind: InvalidatedProjectKind.UpdateBundle;\n' +
    '        emit(writeFile?: WriteFileCallback, customTransformers?: CustomTransformers): EmitResult | BuildInvalidedProject<T> | undefined;\n' +
    '    }\n' +
    '    type InvalidatedProject<T extends BuilderProgram> = UpdateOutputFileStampsProject | BuildInvalidedProject<T> | UpdateBundleProject<T>;\n' +
    '}\n' +
    'declare namespace ts.server {\n' +
    '    type ActionSet = "action::set";\n' +
    '    type ActionInvalidate = "action::invalidate";\n' +
    '    type ActionPackageInstalled = "action::packageInstalled";\n' +
    '    type EventTypesRegistry = "event::typesRegistry";\n' +
    '    type EventBeginInstallTypes = "event::beginInstallTypes";\n' +
    '    type EventEndInstallTypes = "event::endInstallTypes";\n' +
    '    type EventInitializationFailed = "event::initializationFailed";\n' +
    '}\n' +
    'declare namespace ts.server {\n' +
    '    interface TypingInstallerResponse {\n' +
    '        readonly kind: ActionSet | ActionInvalidate | EventTypesRegistry | ActionPackageInstalled | EventBeginInstallTypes | EventEndInstallTypes | EventInitializationFailed;\n' +
    '    }\n' +
    '    interface TypingInstallerRequestWithProjectName {\n' +
    '        readonly projectName: string;\n' +
    '    }\n' +
    '    interface DiscoverTypings extends TypingInstallerRequestWithProjectName {\n' +
    '        readonly fileNames: string[];\n' +
    '        readonly projectRootPath: Path;\n' +
    '        readonly compilerOptions: CompilerOptions;\n' +
    '        readonly watchOptions?: WatchOptions;\n' +
    '        readonly typeAcquisition: TypeAcquisition;\n' +
    '        readonly unresolvedImports: SortedReadonlyArray<string>;\n' +
    '        readonly cachePath?: string;\n' +
    '        readonly kind: "discover";\n' +
    '    }\n' +
    '    interface CloseProject extends TypingInstallerRequestWithProjectName {\n' +
    '        readonly kind: "closeProject";\n' +
    '    }\n' +
    '    interface TypesRegistryRequest {\n' +
    '        readonly kind: "typesRegistry";\n' +
    '    }\n' +
    '    interface InstallPackageRequest extends TypingInstallerRequestWithProjectName {\n' +
    '        readonly kind: "installPackage";\n' +
    '        readonly fileName: Path;\n' +
    '        readonly packageName: string;\n' +
    '        readonly projectRootPath: Path;\n' +
    '    }\n' +
    '    interface PackageInstalledResponse extends ProjectResponse {\n' +
    '        readonly kind: ActionPackageInstalled;\n' +
    '        readonly success: boolean;\n' +
    '        readonly message: string;\n' +
    '    }\n' +
    '    interface InitializationFailedResponse extends TypingInstallerResponse {\n' +
    '        readonly kind: EventInitializationFailed;\n' +
    '        readonly message: string;\n' +
    '        readonly stack?: string;\n' +
    '    }\n' +
    '    interface ProjectResponse extends TypingInstallerResponse {\n' +
    '        readonly projectName: string;\n' +
    '    }\n' +
    '    interface InvalidateCachedTypings extends ProjectResponse {\n' +
    '        readonly kind: ActionInvalidate;\n' +
    '    }\n' +
    '    interface InstallTypes extends ProjectResponse {\n' +
    '        readonly kind: EventBeginInstallTypes | EventEndInstallTypes;\n' +
    '        readonly eventId: number;\n' +
    '        readonly typingsInstallerVersion: string;\n' +
    '        readonly packagesToInstall: readonly string[];\n' +
    '    }\n' +
    '    interface BeginInstallTypes extends InstallTypes {\n' +
    '        readonly kind: EventBeginInstallTypes;\n' +
    '    }\n' +
    '    interface EndInstallTypes extends InstallTypes {\n' +
    '        readonly kind: EventEndInstallTypes;\n' +
    '        readonly installSuccess: boolean;\n' +
    '    }\n' +
    '    interface SetTypings extends ProjectResponse {\n' +
    '        readonly typeAcquisition: TypeAcquisition;\n' +
    '        readonly compilerOptions: CompilerOptions;\n' +
    '        readonly typings: string[];\n' +
    '        readonly unresolvedImports: SortedReadonlyArray<string>;\n' +
    '        readonly kind: ActionSet;\n' +
    '    }\n' +
    '}\n' +
    'declare namespace ts {\n' +
    '    interface Node {\n' +
    '        getSourceFile(): SourceFile;\n' +
    '        getChildCount(sourceFile?: SourceFile): number;\n' +
    '        getChildAt(index: number, sourceFile?: SourceFile): Node;\n' +
    '        getChildren(sourceFile?: SourceFile): Node[];\n' +
    '        getStart(sourceFile?: SourceFile, includeJsDocComment?: boolean): number;\n' +
    '        getFullStart(): number;\n' +
    '        getEnd(): number;\n' +
    '        getWidth(sourceFile?: SourceFileLike): number;\n' +
    '        getFullWidth(): number;\n' +
    '        getLeadingTriviaWidth(sourceFile?: SourceFile): number;\n' +
    '        getFullText(sourceFile?: SourceFile): string;\n' +
    '        getText(sourceFile?: SourceFile): string;\n' +
    '        getFirstToken(sourceFile?: SourceFile): Node | undefined;\n' +
    '        getLastToken(sourceFile?: SourceFile): Node | undefined;\n' +
    '        forEachChild<T>(cbNode: (node: Node) => T | undefined, cbNodeArray?: (nodes: NodeArray<Node>) => T | undefined): T | undefined;\n' +
    '    }\n' +
    '    interface Identifier {\n' +
    '        readonly text: string;\n' +
    '    }\n' +
    '    interface PrivateIdentifier {\n' +
    '        readonly text: string;\n' +
    '    }\n' +
    '    interface Symbol {\n' +
    '        readonly name: string;\n' +
    '        getFlags(): SymbolFlags;\n' +
    '        getEscapedName(): __String;\n' +
    '        getName(): string;\n' +
    '        getDeclarations(): Declaration[] | undefined;\n' +
    '        getDocumentationComment(typeChecker: TypeChecker | undefined): SymbolDisplayPart[];\n' +
    '        getJsDocTags(checker?: TypeChecker): JSDocTagInfo[];\n' +
    '    }\n' +
    '    interface Type {\n' +
    '        getFlags(): TypeFlags;\n' +
    '        getSymbol(): Symbol | undefined;\n' +
    '        getProperties(): Symbol[];\n' +
    '        getProperty(propertyName: string): Symbol | undefined;\n' +
    '        getApparentProperties(): Symbol[];\n' +
    '        getCallSignatures(): readonly Signature[];\n' +
    '        getConstructSignatures(): readonly Signature[];\n' +
    '        getStringIndexType(): Type | undefined;\n' +
    '        getNumberIndexType(): Type | undefined;\n' +
    '        getBaseTypes(): BaseType[] | undefined;\n' +
    '        getNonNullableType(): Type;\n' +
    '        getConstraint(): Type | undefined;\n' +
    '        getDefault(): Type | undefined;\n' +
    '        isUnion(): this is UnionType;\n' +
    '        isIntersection(): this is IntersectionType;\n' +
    '        isUnionOrIntersection(): this is UnionOrIntersectionType;\n' +
    '        isLiteral(): this is LiteralType;\n' +
    '        isStringLiteral(): this is StringLiteralType;\n' +
    '        isNumberLiteral(): this is NumberLiteralType;\n' +
    '        isTypeParameter(): this is TypeParameter;\n' +
    '        isClassOrInterface(): this is InterfaceType;\n' +
    '        isClass(): this is InterfaceType;\n' +
    '        isIndexType(): this is IndexType;\n' +
    '    }\n' +
    '    interface TypeReference {\n' +
    '        typeArguments?: readonly Type[];\n' +
    '    }\n' +
    '    interface Signature {\n' +
    '        getDeclaration(): SignatureDeclaration;\n' +
    '        getTypeParameters(): TypeParameter[] | undefined;\n' +
    '        getParameters(): Symbol[];\n' +
    '        getTypeParameterAtPosition(pos: number): Type;\n' +
    '        getReturnType(): Type;\n' +
    '        getDocumentationComment(typeChecker: TypeChecker | undefined): SymbolDisplayPart[];\n' +
    '        getJsDocTags(): JSDocTagInfo[];\n' +
    '    }\n' +
    '    interface SourceFile {\n' +
    '        getLineAndCharacterOfPosition(pos: number): LineAndCharacter;\n' +
    '        getLineEndOfPosition(pos: number): number;\n' +
    '        getLineStarts(): readonly number[];\n' +
    '        getPositionOfLineAndCharacter(line: number, character: number): number;\n' +
    '        update(newText: string, textChangeRange: TextChangeRange): SourceFile;\n' +
    '    }\n' +
    '    interface SourceFileLike {\n' +
    '        getLineAndCharacterOfPosition(pos: number): LineAndCharacter;\n' +
    '    }\n' +
    '    interface SourceMapSource {\n' +
    '        getLineAndCharacterOfPosition(pos: number): LineAndCharacter;\n' +
    '    }\n' +
    '    /**\n' +
    '     * Represents an immutable snapshot of a script at a specified time.Once acquired, the\n' +
    '     * snapshot is observably immutable. i.e. the same calls with the same parameters will return\n' +
    '     * the same values.\n' +
    '     */\n' +
    '    interface IScriptSnapshot {\n' +
    '        /** Gets a portion of the script snapshot specified by [start, end). */\n' +
    '        getText(start: number, end: number): string;\n' +
    '        /** Gets the length of this script snapshot. */\n' +
    '        getLength(): number;\n' +
    '        /**\n' +
    '         * Gets the TextChangeRange that describe how the text changed between this text and\n' +
    '         * an older version.  This information is used by the incremental parser to determine\n' +
    "         * what sections of the script need to be re-parsed.  'undefined' can be returned if the\n" +
    '         * change range cannot be determined.  However, in that case, incremental parsing will\n' +
    '         * not happen and the entire document will be re - parsed.\n' +
    '         */\n' +
    '        getChangeRange(oldSnapshot: IScriptSnapshot): TextChangeRange | undefined;\n' +
    '        /** Releases all resources held by this script snapshot */\n' +
    '        dispose?(): void;\n' +
    '    }\n' +
    '    namespace ScriptSnapshot {\n' +
    '        function fromString(text: string): IScriptSnapshot;\n' +
    '    }\n' +
    '    interface PreProcessedFileInfo {\n' +
    '        referencedFiles: FileReference[];\n' +
    '        typeReferenceDirectives: FileReference[];\n' +
    '        libReferenceDirectives: FileReference[];\n' +
    '        importedFiles: FileReference[];\n' +
    '        ambientExternalModules?: string[];\n' +
    '        isLibFile: boolean;\n' +
    '    }\n' +
    '    interface HostCancellationToken {\n' +
    '        isCancellationRequested(): boolean;\n' +
    '    }\n' +
    '    interface InstallPackageOptions {\n' +
    '        fileName: Path;\n' +
    '        packageName: string;\n' +
    '    }\n' +
    '    interface PerformanceEvent {\n' +
    '        kind: "UpdateGraph" | "CreatePackageJsonAutoImportProvider";\n' +
    '        durationMs: number;\n' +
    '    }\n' +
    '    enum LanguageServiceMode {\n' +
    '        Semantic = 0,\n' +
    '        PartialSemantic = 1,\n' +
    '        Syntactic = 2\n' +
    '    }\n' +
    '    interface IncompleteCompletionsCache {\n' +
    '        get(): CompletionInfo | undefined;\n' +
    '        set(response: CompletionInfo): void;\n' +
    '        clear(): void;\n' +
    '    }\n' +
    '    interface LanguageServiceHost extends GetEffectiveTypeRootsHost, MinimalResolutionCacheHost {\n' +
    '        getCompilationSettings(): CompilerOptions;\n' +
    '        getNewLine?(): string;\n' +
    '        getProjectVersion?(): string;\n' +
    '        getScriptFileNames(): string[];\n' +
    '        getScriptKind?(fileName: string): ScriptKind;\n' +
    '        getScriptVersion(fileName: string): string;\n' +
    '        getScriptSnapshot(fileName: string): IScriptSnapshot | undefined;\n' +
    '        getProjectReferences?(): readonly ProjectReference[] | undefined;\n' +
    '        getLocalizedDiagnosticMessages?(): any;\n' +
    '        getCancellationToken?(): HostCancellationToken;\n' +
    '        getCurrentDirectory(): string;\n' +
    '        getDefaultLibFileName(options: CompilerOptions): string;\n' +
    '        log?(s: string): void;\n' +
    '        trace?(s: string): void;\n' +
    '        error?(s: string): void;\n' +
    '        useCaseSensitiveFileNames?(): boolean;\n' +
    '        readDirectory?(path: string, extensions?: readonly string[], exclude?: readonly string[], include?: readonly string[], depth?: number): string[];\n' +
    '        realpath?(path: string): string;\n' +
    '        readFile(path: string, encoding?: string): string | undefined;\n' +
    '        fileExists(path: string): boolean;\n' +
    '        getTypeRootsVersion?(): number;\n' +
    '        resolveModuleNames?(moduleNames: string[], containingFile: string, reusedNames: string[] | undefined, redirectedReference: ResolvedProjectReference | undefined, options: CompilerOptions, containingSourceFile?: SourceFile): (ResolvedModule | undefined)[];\n' +
    '        getResolvedModuleWithFailedLookupLocationsFromCache?(modulename: string, containingFile: string, resolutionMode?: ModuleKind.CommonJS | ModuleKind.ESNext): ResolvedModuleWithFailedLookupLocations | undefined;\n' +
    '        resolveTypeReferenceDirectives?(typeDirectiveNames: string[] | FileReference[], containingFile: string, redirectedReference: ResolvedProjectReference | undefined, options: CompilerOptions, containingFileMode?: SourceFile["impliedNodeFormat"] | undefined): (ResolvedTypeReferenceDirective | undefined)[];\n' +
    '        getDirectories?(directoryName: string): string[];\n' +
    '        /**\n' +
    '         * Gets a set of custom transformers to use during emit.\n' +
    '         */\n' +
    '        getCustomTransformers?(): CustomTransformers | undefined;\n' +
    '        isKnownTypesPackageName?(name: string): boolean;\n' +
    '        installPackage?(options: InstallPackageOptions): Promise<ApplyCodeActionCommandResult>;\n' +
    '        writeFile?(fileName: string, content: string): void;\n' +
    '        getParsedCommandLine?(fileName: string): ParsedCommandLine | undefined;\n' +
    '    }\n' +
    '    type WithMetadata<T> = T & {\n' +
    '        metadata?: unknown;\n' +
    '    };\n' +
    '    enum SemanticClassificationFormat {\n' +
    '        Original = "original",\n' +
    '        TwentyTwenty = "2020"\n' +
    '    }\n' +
    '    interface LanguageService {\n' +
    '        /** This is used as a part of restarting the language service. */\n' +
    '        cleanupSemanticCache(): void;\n' +
    '        /**\n' +
    '         * Gets errors indicating invalid syntax in a file.\n' +
    '         *\n' +
    '         * In English, "this cdeo have, erorrs" is syntactically invalid because it has typos,\n' +
    '         * grammatical errors, and misplaced punctuation. Likewise, examples of syntax\n' +
    '         * errors in TypeScript are missing parentheses in an `if` statement, mismatched\n' +
    '         * curly braces, and using a reserved keyword as a variable name.\n' +
    '         *\n' +
    "         * These diagnostics are inexpensive to compute and don't require knowledge of\n" +
    '         * other files. Note that a non-empty result increases the likelihood of false positives\n' +
    '         * from `getSemanticDiagnostics`.\n' +
    '         *\n' +
    '         * While these represent the majority of syntax-related diagnostics, there are some\n' +
    '         * that require the type system, which will be present in `getSemanticDiagnostics`.\n' +
    '         *\n' +
    '         * @param fileName A path to the file you want syntactic diagnostics for\n' +
    '         */\n' +
    '        getSyntacticDiagnostics(fileName: string): DiagnosticWithLocation[];\n' +
    '        /**\n' +
    '         * Gets warnings or errors indicating type system issues in a given file.\n' +
    '         * Requesting semantic diagnostics may start up the type system and\n' +
    '         * run deferred work, so the first call may take longer than subsequent calls.\n' +
    '         *\n' +
    '         * Unlike the other get*Diagnostics functions, these diagnostics can potentially not\n' +
    '         * include a reference to a source file. Specifically, the first time this is called,\n' +
    '         * it will return global diagnostics with no associated location.\n' +
    '         *\n' +
    '         * To contrast the differences between semantic and syntactic diagnostics, consider the\n' +
    '         * sentence: "The sun is green." is syntactically correct; those are real English words with\n' +
    '         * correct sentence structure. However, it is semantically invalid, because it is not true.\n' +
    '         *\n' +
    '         * @param fileName A path to the file you want semantic diagnostics for\n' +
    '         */\n' +
    '        getSemanticDiagnostics(fileName: string): Diagnostic[];\n' +
    '        /**\n' +
    '         * Gets suggestion diagnostics for a specific file. These diagnostics tend to\n' +
    '         * proactively suggest refactors, as opposed to diagnostics that indicate\n' +
    '         * potentially incorrect runtime behavior.\n' +
    '         *\n' +
    '         * @param fileName A path to the file you want semantic diagnostics for\n' +
    '         */\n' +
    '        getSuggestionDiagnostics(fileName: string): DiagnosticWithLocation[];\n' +
    '        /**\n' +
    '         * Gets global diagnostics related to the program configuration and compiler options.\n' +
    '         */\n' +
    '        getCompilerOptionsDiagnostics(): Diagnostic[];\n' +
    '        /** @deprecated Use getEncodedSyntacticClassifications instead. */\n' +
    '        getSyntacticClassifications(fileName: string, span: TextSpan): ClassifiedSpan[];\n' +
    '        getSyntacticClassifications(fileName: string, span: TextSpan, format: SemanticClassificationFormat): ClassifiedSpan[] | ClassifiedSpan2020[];\n' +
    '        /** @deprecated Use getEncodedSemanticClassifications instead. */\n' +
    '        getSemanticClassifications(fileName: string, span: TextSpan): ClassifiedSpan[];\n' +
    '        getSemanticClassifications(fileName: string, span: TextSpan, format: SemanticClassificationFormat): ClassifiedSpan[] | ClassifiedSpan2020[];\n' +
    '        /** Encoded as triples of [start, length, ClassificationType]. */\n' +
    '        getEncodedSyntacticClassifications(fileName: string, span: TextSpan): Classifications;\n' +
    '        /**\n' +
    '         * Gets semantic highlights information for a particular file. Has two formats, an older\n' +
    '         * version used by VS and a format used by VS Code.\n' +
    '         *\n' +
    '         * @param fileName The path to the file\n' +
    '         * @param position A text span to return results within\n' +
    '         * @param format Which format to use, defaults to "original"\n' +
    '         * @returns a number array encoded as triples of [start, length, ClassificationType, ...].\n' +
    '         */\n' +
    '        getEncodedSemanticClassifications(fileName: string, span: TextSpan, format?: SemanticClassificationFormat): Classifications;\n' +
    '        /**\n' +
    '         * Gets completion entries at a particular position in a file.\n' +
    '         *\n' +
    '         * @param fileName The path to the file\n' +
    '         * @param position A zero-based index of the character where you want the entries\n' +
    '         * @param options An object describing how the request was triggered and what kinds\n' +
    '         * of code actions can be returned with the completions.\n' +
    '         * @param formattingSettings settings needed for calling formatting functions.\n' +
    '         */\n' +
    '        getCompletionsAtPosition(fileName: string, position: number, options: GetCompletionsAtPositionOptions | undefined, formattingSettings?: FormatCodeSettings): WithMetadata<CompletionInfo> | undefined;\n' +
    '        /**\n' +
    '         * Gets the extended details for a completion entry retrieved from `getCompletionsAtPosition`.\n' +
    '         *\n' +
    '         * @param fileName The path to the file\n' +
    '         * @param position A zero based index of the character where you want the entries\n' +
    '         * @param entryName The `name` from an existing completion which came from `getCompletionsAtPosition`\n' +
    '         * @param formatOptions How should code samples in the completions be formatted, can be undefined for backwards compatibility\n' +
    '         * @param source `source` property from the completion entry\n' +
    '         * @param preferences User settings, can be undefined for backwards compatibility\n' +
    '         * @param data `data` property from the completion entry\n' +
    '         */\n' +
    '        getCompletionEntryDetails(fileName: string, position: number, entryName: string, formatOptions: FormatCodeOptions | FormatCodeSettings | undefined, source: string | undefined, preferences: UserPreferences | undefined, data: CompletionEntryData | undefined): CompletionEntryDetails | undefined;\n' +
    '        getCompletionEntrySymbol(fileName: string, position: number, name: string, source: string | undefined): Symbol | undefined;\n' +
    '        /**\n' +
    '         * Gets semantic information about the identifier at a particular position in a\n' +
    '         * file. Quick info is what you typically see when you hover in an editor.\n' +
    '         *\n' +
    '         * @param fileName The path to the file\n' +
    '         * @param position A zero-based index of the character where you want the quick info\n' +
    '         */\n' +
    '        getQuickInfoAtPosition(fileName: string, position: number): QuickInfo | undefined;\n' +
    '        getNameOrDottedNameSpan(fileName: string, startPos: number, endPos: number): TextSpan | undefined;\n' +
    '        getBreakpointStatementAtPosition(fileName: string, position: number): TextSpan | undefined;\n' +
    '        getSignatureHelpItems(fileName: string, position: number, options: SignatureHelpItemsOptions | undefined): SignatureHelpItems | undefined;\n' +
    '        getRenameInfo(fileName: string, position: number, options?: RenameInfoOptions): RenameInfo;\n' +
    '        findRenameLocations(fileName: string, position: number, findInStrings: boolean, findInComments: boolean, providePrefixAndSuffixTextForRename?: boolean): readonly RenameLocation[] | undefined;\n' +
    '        getSmartSelectionRange(fileName: string, position: number): SelectionRange;\n' +
    '        getDefinitionAtPosition(fileName: string, position: number): readonly DefinitionInfo[] | undefined;\n' +
    '        getDefinitionAndBoundSpan(fileName: string, position: number): DefinitionInfoAndBoundSpan | undefined;\n' +
    '        getTypeDefinitionAtPosition(fileName: string, position: number): readonly DefinitionInfo[] | undefined;\n' +
    '        getImplementationAtPosition(fileName: string, position: number): readonly ImplementationLocation[] | undefined;\n' +
    '        getReferencesAtPosition(fileName: string, position: number): ReferenceEntry[] | undefined;\n' +
    '        findReferences(fileName: string, position: number): ReferencedSymbol[] | undefined;\n' +
    '        getDocumentHighlights(fileName: string, position: number, filesToSearch: string[]): DocumentHighlights[] | undefined;\n' +
    '        getFileReferences(fileName: string): ReferenceEntry[];\n' +
    '        /** @deprecated */\n' +
    '        getOccurrencesAtPosition(fileName: string, position: number): readonly ReferenceEntry[] | undefined;\n' +
    '        getNavigateToItems(searchValue: string, maxResultCount?: number, fileName?: string, excludeDtsFiles?: boolean): NavigateToItem[];\n' +
    '        getNavigationBarItems(fileName: string): NavigationBarItem[];\n' +
    '        getNavigationTree(fileName: string): NavigationTree;\n' +
    '        prepareCallHierarchy(fileName: string, position: number): CallHierarchyItem | CallHierarchyItem[] | undefined;\n' +
    '        provideCallHierarchyIncomingCalls(fileName: string, position: number): CallHierarchyIncomingCall[];\n' +
    '        provideCallHierarchyOutgoingCalls(fileName: string, position: number): CallHierarchyOutgoingCall[];\n' +
    '        provideInlayHints(fileName: string, span: TextSpan, preferences: UserPreferences | undefined): InlayHint[];\n' +
    '        getOutliningSpans(fileName: string): OutliningSpan[];\n' +
    '        getTodoComments(fileName: string, descriptors: TodoCommentDescriptor[]): TodoComment[];\n' +
    '        getBraceMatchingAtPosition(fileName: string, position: number): TextSpan[];\n' +
    '        getIndentationAtPosition(fileName: string, position: number, options: EditorOptions | EditorSettings): number;\n' +
    '        getFormattingEditsForRange(fileName: string, start: number, end: number, options: FormatCodeOptions | FormatCodeSettings): TextChange[];\n' +
    '        getFormattingEditsForDocument(fileName: string, options: FormatCodeOptions | FormatCodeSettings): TextChange[];\n' +
    '        getFormattingEditsAfterKeystroke(fileName: string, position: number, key: string, options: FormatCodeOptions | FormatCodeSettings): TextChange[];\n' +
    '        getDocCommentTemplateAtPosition(fileName: string, position: number, options?: DocCommentTemplateOptions): TextInsertion | undefined;\n' +
    '        isValidBraceCompletionAtPosition(fileName: string, position: number, openingBrace: number): boolean;\n' +
    '        /**\n' +
    '         * This will return a defined result if the position is after the `>` of the opening tag, or somewhere in the text, of a JSXElement with no closing tag.\n' +
    '         * Editors should call this after `>` is typed.\n' +
    '         */\n' +
    '        getJsxClosingTagAtPosition(fileName: string, position: number): JsxClosingTagInfo | undefined;\n' +
    '        getSpanOfEnclosingComment(fileName: string, position: number, onlyMultiLine: boolean): TextSpan | undefined;\n' +
    '        toLineColumnOffset?(fileName: string, position: number): LineAndCharacter;\n' +
    '        getCodeFixesAtPosition(fileName: string, start: number, end: number, errorCodes: readonly number[], formatOptions: FormatCodeSettings, preferences: UserPreferences): readonly CodeFixAction[];\n' +
    '        getCombinedCodeFix(scope: CombinedCodeFixScope, fixId: {}, formatOptions: FormatCodeSettings, preferences: UserPreferences): CombinedCodeActions;\n' +
    '        applyCodeActionCommand(action: CodeActionCommand, formatSettings?: FormatCodeSettings): Promise<ApplyCodeActionCommandResult>;\n' +
    '        applyCodeActionCommand(action: CodeActionCommand[], formatSettings?: FormatCodeSettings): Promise<ApplyCodeActionCommandResult[]>;\n' +
    '        applyCodeActionCommand(action: CodeActionCommand | CodeActionCommand[], formatSettings?: FormatCodeSettings): Promise<ApplyCodeActionCommandResult | ApplyCodeActionCommandResult[]>;\n' +
    '        /** @deprecated `fileName` will be ignored */\n' +
    '        applyCodeActionCommand(fileName: string, action: CodeActionCommand): Promise<ApplyCodeActionCommandResult>;\n' +
    '        /** @deprecated `fileName` will be ignored */\n' +
    '        applyCodeActionCommand(fileName: string, action: CodeActionCommand[]): Promise<ApplyCodeActionCommandResult[]>;\n' +
    '        /** @deprecated `fileName` will be ignored */\n' +
    '        applyCodeActionCommand(fileName: string, action: CodeActionCommand | CodeActionCommand[]): Promise<ApplyCodeActionCommandResult | ApplyCodeActionCommandResult[]>;\n' +
    '        getApplicableRefactors(fileName: string, positionOrRange: number | TextRange, preferences: UserPreferences | undefined, triggerReason?: RefactorTriggerReason, kind?: string): ApplicableRefactorInfo[];\n' +
    '        getEditsForRefactor(fileName: string, formatOptions: FormatCodeSettings, positionOrRange: number | TextRange, refactorName: string, actionName: string, preferences: UserPreferences | undefined): RefactorEditInfo | undefined;\n' +
    '        organizeImports(args: OrganizeImportsArgs, formatOptions: FormatCodeSettings, preferences: UserPreferences | undefined): readonly FileTextChanges[];\n' +
    '        getEditsForFileRename(oldFilePath: string, newFilePath: string, formatOptions: FormatCodeSettings, preferences: UserPreferences | undefined): readonly FileTextChanges[];\n' +
    '        getEmitOutput(fileName: string, emitOnlyDtsFiles?: boolean, forceDtsEmit?: boolean): EmitOutput;\n' +
    '        getProgram(): Program | undefined;\n' +
    '        toggleLineComment(fileName: string, textRange: TextRange): TextChange[];\n' +
    '        toggleMultilineComment(fileName: string, textRange: TextRange): TextChange[];\n' +
    '        commentSelection(fileName: string, textRange: TextRange): TextChange[];\n' +
    '        uncommentSelection(fileName: string, textRange: TextRange): TextChange[];\n' +
    '        dispose(): void;\n' +
    '    }\n' +
    '    interface JsxClosingTagInfo {\n' +
    '        readonly newText: string;\n' +
    '    }\n' +
    '    interface CombinedCodeFixScope {\n' +
    '        type: "file";\n' +
    '        fileName: string;\n' +
    '    }\n' +
    '    interface OrganizeImportsArgs extends CombinedCodeFixScope {\n' +
    '        skipDestructiveCodeActions?: boolean;\n' +
    '    }\n' +
    '    type CompletionsTriggerCharacter = "." | \'"\' | "\'" | "`" | "/" | "@" | "<" | "#" | " ";\n' +
    '    enum CompletionTriggerKind {\n' +
    '        /** Completion was triggered by typing an identifier, manual invocation (e.g Ctrl+Space) or via API. */\n' +
    '        Invoked = 1,\n' +
    '        /** Completion was triggered by a trigger character. */\n' +
    '        TriggerCharacter = 2,\n' +
    '        /** Completion was re-triggered as the current completion list is incomplete. */\n' +
    '        TriggerForIncompleteCompletions = 3\n' +
    '    }\n' +
    '    interface GetCompletionsAtPositionOptions extends UserPreferences {\n' +
    '        /**\n' +
    '         * If the editor is asking for completions because a certain character was typed\n' +
    '         * (as opposed to when the user explicitly requested them) this should be set.\n' +
    '         */\n' +
    '        triggerCharacter?: CompletionsTriggerCharacter;\n' +
    '        triggerKind?: CompletionTriggerKind;\n' +
    '        /** @deprecated Use includeCompletionsForModuleExports */\n' +
    '        includeExternalModuleExports?: boolean;\n' +
    '        /** @deprecated Use includeCompletionsWithInsertText */\n' +
    '        includeInsertTextCompletions?: boolean;\n' +
    '    }\n' +
    '    type SignatureHelpTriggerCharacter = "," | "(" | "<";\n' +
    '    type SignatureHelpRetriggerCharacter = SignatureHelpTriggerCharacter | ")";\n' +
    '    interface SignatureHelpItemsOptions {\n' +
    '        triggerReason?: SignatureHelpTriggerReason;\n' +
    '    }\n' +
    '    type SignatureHelpTriggerReason = SignatureHelpInvokedReason | SignatureHelpCharacterTypedReason | SignatureHelpRetriggeredReason;\n' +
    '    /**\n' +
    '     * Signals that the user manually requested signature help.\n' +
    '     * The language service will unconditionally attempt to provide a result.\n' +
    '     */\n' +
    '    interface SignatureHelpInvokedReason {\n' +
    '        kind: "invoked";\n' +
    '        triggerCharacter?: undefined;\n' +
    '    }\n' +
    '    /**\n' +
    '     * Signals that the signature help request came from a user typing a character.\n' +
    '     * Depending on the character and the syntactic context, the request may or may not be served a result.\n' +
    '     */\n' +
    '    interface SignatureHelpCharacterTypedReason {\n' +
    '        kind: "characterTyped";\n' +
    '        /**\n' +
    '         * Character that was responsible for triggering signature help.\n' +
    '         */\n' +
    '        triggerCharacter: SignatureHelpTriggerCharacter;\n' +
    '    }\n' +
    '    /**\n' +
    '     * Signals that this signature help request came from typing a character or moving the cursor.\n' +
    '     * This should only occur if a signature help session was already active and the editor needs to see if it should adjust.\n' +
    '     * The language service will unconditionally attempt to provide a result.\n' +
    '     * `triggerCharacter` can be `undefined` for a retrigger caused by a cursor move.\n' +
    '     */\n' +
    '    interface SignatureHelpRetriggeredReason {\n' +
    '        kind: "retrigger";\n' +
    '        /**\n' +
    '         * Character that was responsible for triggering signature help.\n' +
    '         */\n' +
    '        triggerCharacter?: SignatureHelpRetriggerCharacter;\n' +
    '    }\n' +
    '    interface ApplyCodeActionCommandResult {\n' +
    '        successMessage: string;\n' +
    '    }\n' +
    '    interface Classifications {\n' +
    '        spans: number[];\n' +
    '        endOfLineState: EndOfLineState;\n' +
    '    }\n' +
    '    interface ClassifiedSpan {\n' +
    '        textSpan: TextSpan;\n' +
    '        classificationType: ClassificationTypeNames;\n' +
    '    }\n' +
    '    interface ClassifiedSpan2020 {\n' +
    '        textSpan: TextSpan;\n' +
    '        classificationType: number;\n' +
    '    }\n' +
    '    /**\n' +
    "     * Navigation bar interface designed for visual studio's dual-column layout.\n" +
    '     * This does not form a proper tree.\n' +
    '     * The navbar is returned as a list of top-level items, each of which has a list of child items.\n' +
    '     * Child items always have an empty array for their `childItems`.\n' +
    '     */\n' +
    '    interface NavigationBarItem {\n' +
    '        text: string;\n' +
    '        kind: ScriptElementKind;\n' +
    '        kindModifiers: string;\n' +
    '        spans: TextSpan[];\n' +
    '        childItems: NavigationBarItem[];\n' +
    '        indent: number;\n' +
    '        bolded: boolean;\n' +
    '        grayed: boolean;\n' +
    '    }\n' +
    '    /**\n' +
    '     * Node in a tree of nested declarations in a file.\n' +
    '     * The top node is always a script or module node.\n' +
    '     */\n' +
    '    interface NavigationTree {\n' +
    '        /** Name of the declaration, or a short description, e.g. "<class>". */\n' +
    '        text: string;\n' +
    '        kind: ScriptElementKind;\n' +
    '        /** ScriptElementKindModifier separated by commas, e.g. "public,abstract" */\n' +
    '        kindModifiers: string;\n' +
    '        /**\n' +
    '         * Spans of the nodes that generated this declaration.\n' +
    '         * There will be more than one if this is the result of merging.\n' +
    '         */\n' +
    '        spans: TextSpan[];\n' +
    '        nameSpan: TextSpan | undefined;\n' +
    '        /** Present if non-empty */\n' +
    '        childItems?: NavigationTree[];\n' +
    '    }\n' +
    '    interface CallHierarchyItem {\n' +
    '        name: string;\n' +
    '        kind: ScriptElementKind;\n' +
    '        kindModifiers?: string;\n' +
    '        file: string;\n' +
    '        span: TextSpan;\n' +
    '        selectionSpan: TextSpan;\n' +
    '        containerName?: string;\n' +
    '    }\n' +
    '    interface CallHierarchyIncomingCall {\n' +
    '        from: CallHierarchyItem;\n' +
    '        fromSpans: TextSpan[];\n' +
    '    }\n' +
    '    interface CallHierarchyOutgoingCall {\n' +
    '        to: CallHierarchyItem;\n' +
    '        fromSpans: TextSpan[];\n' +
    '    }\n' +
    '    enum InlayHintKind {\n' +
    '        Type = "Type",\n' +
    '        Parameter = "Parameter",\n' +
    '        Enum = "Enum"\n' +
    '    }\n' +
    '    interface InlayHint {\n' +
    '        text: string;\n' +
    '        position: number;\n' +
    '        kind: InlayHintKind;\n' +
    '        whitespaceBefore?: boolean;\n' +
    '        whitespaceAfter?: boolean;\n' +
    '    }\n' +
    '    interface TodoCommentDescriptor {\n' +
    '        text: string;\n' +
    '        priority: number;\n' +
    '    }\n' +
    '    interface TodoComment {\n' +
    '        descriptor: TodoCommentDescriptor;\n' +
    '        message: string;\n' +
    '        position: number;\n' +
    '    }\n' +
    '    interface TextChange {\n' +
    '        span: TextSpan;\n' +
    '        newText: string;\n' +
    '    }\n' +
    '    interface FileTextChanges {\n' +
    '        fileName: string;\n' +
    '        textChanges: readonly TextChange[];\n' +
    '        isNewFile?: boolean;\n' +
    '    }\n' +
    '    interface CodeAction {\n' +
    '        /** Description of the code action to display in the UI of the editor */\n' +
    '        description: string;\n' +
    '        /** Text changes to apply to each file as part of the code action */\n' +
    '        changes: FileTextChanges[];\n' +
    '        /**\n' +
    '         * If the user accepts the code fix, the editor should send the action back in a `applyAction` request.\n' +
    '         * This allows the language service to have side effects (e.g. installing dependencies) upon a code fix.\n' +
    '         */\n' +
    '        commands?: CodeActionCommand[];\n' +
    '    }\n' +
    '    interface CodeFixAction extends CodeAction {\n' +
    '        /** Short name to identify the fix, for use by telemetry. */\n' +
    '        fixName: string;\n' +
    '        /**\n' +
    "         * If present, one may call 'getCombinedCodeFix' with this fixId.\n" +
    "         * This may be omitted to indicate that the code fix can't be applied in a group.\n" +
    '         */\n' +
    '        fixId?: {};\n' +
    '        fixAllDescription?: string;\n' +
    '    }\n' +
    '    interface CombinedCodeActions {\n' +
    '        changes: readonly FileTextChanges[];\n' +
    '        commands?: readonly CodeActionCommand[];\n' +
    '    }\n' +
    '    type CodeActionCommand = InstallPackageAction;\n' +
    '    interface InstallPackageAction {\n' +
    '    }\n' +
    '    /**\n' +
    '     * A set of one or more available refactoring actions, grouped under a parent refactoring.\n' +
    '     */\n' +
    '    interface ApplicableRefactorInfo {\n' +
    '        /**\n' +
    '         * The programmatic name of the refactoring\n' +
    '         */\n' +
    '        name: string;\n' +
    '        /**\n' +
    '         * A description of this refactoring category to show to the user.\n' +
    '         * If the refactoring gets inlined (see below), this text will not be visible.\n' +
    '         */\n' +
    '        description: string;\n' +
    '        /**\n' +
    '         * Inlineable refactorings can have their actions hoisted out to the top level\n' +
    '         * of a context menu. Non-inlineanable refactorings should always be shown inside\n' +
    '         * their parent grouping.\n' +
    '         *\n' +
    "         * If not specified, this value is assumed to be 'true'\n" +
    '         */\n' +
    '        inlineable?: boolean;\n' +
    '        actions: RefactorActionInfo[];\n' +
    '    }\n' +
    '    /**\n' +
    '     * Represents a single refactoring action - for example, the "Extract Method..." refactor might\n' +
    '     * offer several actions, each corresponding to a surround class or closure to extract into.\n' +
    '     */\n' +
    '    interface RefactorActionInfo {\n' +
    '        /**\n' +
    '         * The programmatic name of the refactoring action\n' +
    '         */\n' +
    '        name: string;\n' +
    '        /**\n' +
    '         * A description of this refactoring action to show to the user.\n' +
    '         * If the parent refactoring is inlined away, this will be the only text shown,\n' +
    '         * so this description should make sense by itself if the parent is inlineable=true\n' +
    '         */\n' +
    '        description: string;\n' +
    '        /**\n' +
    '         * A message to show to the user if the refactoring cannot be applied in\n' +
    '         * the current context.\n' +
    '         */\n' +
    '        notApplicableReason?: string;\n' +
    '        /**\n' +
    '         * The hierarchical dotted name of the refactor action.\n' +
    '         */\n' +
    '        kind?: string;\n' +
    '    }\n' +
    '    /**\n' +
    '     * A set of edits to make in response to a refactor action, plus an optional\n' +
    '     * location where renaming should be invoked from\n' +
    '     */\n' +
    '    interface RefactorEditInfo {\n' +
    '        edits: FileTextChanges[];\n' +
    '        renameFilename?: string;\n' +
    '        renameLocation?: number;\n' +
    '        commands?: CodeActionCommand[];\n' +
    '    }\n' +
    '    type RefactorTriggerReason = "implicit" | "invoked";\n' +
    '    interface TextInsertion {\n' +
    '        newText: string;\n' +
    '        /** The position in newText the caret should point to after the insertion. */\n' +
    '        caretOffset: number;\n' +
    '    }\n' +
    '    interface DocumentSpan {\n' +
    '        textSpan: TextSpan;\n' +
    '        fileName: string;\n' +
    '        /**\n' +
    '         * If the span represents a location that was remapped (e.g. via a .d.ts.map file),\n' +
    '         * then the original filename and span will be specified here\n' +
    '         */\n' +
    '        originalTextSpan?: TextSpan;\n' +
    '        originalFileName?: string;\n' +
    '        /**\n' +
    '         * If DocumentSpan.textSpan is the span for name of the declaration,\n' +
    '         * then this is the span for relevant declaration\n' +
    '         */\n' +
    '        contextSpan?: TextSpan;\n' +
    '        originalContextSpan?: TextSpan;\n' +
    '    }\n' +
    '    interface RenameLocation extends DocumentSpan {\n' +
    '        readonly prefixText?: string;\n' +
    '        readonly suffixText?: string;\n' +
    '    }\n' +
    '    interface ReferenceEntry extends DocumentSpan {\n' +
    '        isWriteAccess: boolean;\n' +
    '        isInString?: true;\n' +
    '    }\n' +
    '    interface ImplementationLocation extends DocumentSpan {\n' +
    '        kind: ScriptElementKind;\n' +
    '        displayParts: SymbolDisplayPart[];\n' +
    '    }\n' +
    '    enum HighlightSpanKind {\n' +
    '        none = "none",\n' +
    '        definition = "definition",\n' +
    '        reference = "reference",\n' +
    '        writtenReference = "writtenReference"\n' +
    '    }\n' +
    '    interface HighlightSpan {\n' +
    '        fileName?: string;\n' +
    '        isInString?: true;\n' +
    '        textSpan: TextSpan;\n' +
    '        contextSpan?: TextSpan;\n' +
    '        kind: HighlightSpanKind;\n' +
    '    }\n' +
    '    interface NavigateToItem {\n' +
    '        name: string;\n' +
    '        kind: ScriptElementKind;\n' +
    '        kindModifiers: string;\n' +
    '        matchKind: "exact" | "prefix" | "substring" | "camelCase";\n' +
    '        isCaseSensitive: boolean;\n' +
    '        fileName: string;\n' +
    '        textSpan: TextSpan;\n' +
    '        containerName: string;\n' +
    '        containerKind: ScriptElementKind;\n' +
    '    }\n' +
    '    enum IndentStyle {\n' +
    '        None = 0,\n' +
    '        Block = 1,\n' +
    '        Smart = 2\n' +
    '    }\n' +
    '    enum SemicolonPreference {\n' +
    '        Ignore = "ignore",\n' +
    '        Insert = "insert",\n' +
    '        Remove = "remove"\n' +
    '    }\n' +
    '    interface EditorOptions {\n' +
    '        BaseIndentSize?: number;\n' +
    '        IndentSize: number;\n' +
    '        TabSize: number;\n' +
    '        NewLineCharacter: string;\n' +
    '        ConvertTabsToSpaces: boolean;\n' +
    '        IndentStyle: IndentStyle;\n' +
    '    }\n' +
    '    interface EditorSettings {\n' +
    '        baseIndentSize?: number;\n' +
    '        indentSize?: number;\n' +
    '        tabSize?: number;\n' +
    '        newLineCharacter?: string;\n' +
    '        convertTabsToSpaces?: boolean;\n' +
    '        indentStyle?: IndentStyle;\n' +
    '        trimTrailingWhitespace?: boolean;\n' +
    '    }\n' +
    '    interface FormatCodeOptions extends EditorOptions {\n' +
    '        InsertSpaceAfterCommaDelimiter: boolean;\n' +
    '        InsertSpaceAfterSemicolonInForStatements: boolean;\n' +
    '        InsertSpaceBeforeAndAfterBinaryOperators: boolean;\n' +
    '        InsertSpaceAfterConstructor?: boolean;\n' +
    '        InsertSpaceAfterKeywordsInControlFlowStatements: boolean;\n' +
    '        InsertSpaceAfterFunctionKeywordForAnonymousFunctions: boolean;\n' +
    '        InsertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis: boolean;\n' +
    '        InsertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets: boolean;\n' +
    '        InsertSpaceAfterOpeningAndBeforeClosingNonemptyBraces?: boolean;\n' +
    '        InsertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces: boolean;\n' +
    '        InsertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces?: boolean;\n' +
    '        InsertSpaceAfterTypeAssertion?: boolean;\n' +
    '        InsertSpaceBeforeFunctionParenthesis?: boolean;\n' +
    '        PlaceOpenBraceOnNewLineForFunctions: boolean;\n' +
    '        PlaceOpenBraceOnNewLineForControlBlocks: boolean;\n' +
    '        insertSpaceBeforeTypeAnnotation?: boolean;\n' +
    '    }\n' +
    '    interface FormatCodeSettings extends EditorSettings {\n' +
    '        readonly insertSpaceAfterCommaDelimiter?: boolean;\n' +
    '        readonly insertSpaceAfterSemicolonInForStatements?: boolean;\n' +
    '        readonly insertSpaceBeforeAndAfterBinaryOperators?: boolean;\n' +
    '        readonly insertSpaceAfterConstructor?: boolean;\n' +
    '        readonly insertSpaceAfterKeywordsInControlFlowStatements?: boolean;\n' +
    '        readonly insertSpaceAfterFunctionKeywordForAnonymousFunctions?: boolean;\n' +
    '        readonly insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis?: boolean;\n' +
    '        readonly insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets?: boolean;\n' +
    '        readonly insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces?: boolean;\n' +
    '        readonly insertSpaceAfterOpeningAndBeforeClosingEmptyBraces?: boolean;\n' +
    '        readonly insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces?: boolean;\n' +
    '        readonly insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces?: boolean;\n' +
    '        readonly insertSpaceAfterTypeAssertion?: boolean;\n' +
    '        readonly insertSpaceBeforeFunctionParenthesis?: boolean;\n' +
    '        readonly placeOpenBraceOnNewLineForFunctions?: boolean;\n' +
    '        readonly placeOpenBraceOnNewLineForControlBlocks?: boolean;\n' +
    '        readonly insertSpaceBeforeTypeAnnotation?: boolean;\n' +
    '        readonly indentMultiLineObjectLiteralBeginningOnBlankLine?: boolean;\n' +
    '        readonly semicolons?: SemicolonPreference;\n' +
    '    }\n' +
    '    function getDefaultFormatCodeSettings(newLineCharacter?: string): FormatCodeSettings;\n' +
    '    interface DefinitionInfo extends DocumentSpan {\n' +
    '        kind: ScriptElementKind;\n' +
    '        name: string;\n' +
    '        containerKind: ScriptElementKind;\n' +
    '        containerName: string;\n' +
    '        unverified?: boolean;\n' +
    '    }\n' +
    '    interface DefinitionInfoAndBoundSpan {\n' +
    '        definitions?: readonly DefinitionInfo[];\n' +
    '        textSpan: TextSpan;\n' +
    '    }\n' +
    '    interface ReferencedSymbolDefinitionInfo extends DefinitionInfo {\n' +
    '        displayParts: SymbolDisplayPart[];\n' +
    '    }\n' +
    '    interface ReferencedSymbol {\n' +
    '        definition: ReferencedSymbolDefinitionInfo;\n' +
    '        references: ReferencedSymbolEntry[];\n' +
    '    }\n' +
    '    interface ReferencedSymbolEntry extends ReferenceEntry {\n' +
    '        isDefinition?: boolean;\n' +
    '    }\n' +
    '    enum SymbolDisplayPartKind {\n' +
    '        aliasName = 0,\n' +
    '        className = 1,\n' +
    '        enumName = 2,\n' +
    '        fieldName = 3,\n' +
    '        interfaceName = 4,\n' +
    '        keyword = 5,\n' +
    '        lineBreak = 6,\n' +
    '        numericLiteral = 7,\n' +
    '        stringLiteral = 8,\n' +
    '        localName = 9,\n' +
    '        methodName = 10,\n' +
    '        moduleName = 11,\n' +
    '        operator = 12,\n' +
    '        parameterName = 13,\n' +
    '        propertyName = 14,\n' +
    '        punctuation = 15,\n' +
    '        space = 16,\n' +
    '        text = 17,\n' +
    '        typeParameterName = 18,\n' +
    '        enumMemberName = 19,\n' +
    '        functionName = 20,\n' +
    '        regularExpressionLiteral = 21,\n' +
    '        link = 22,\n' +
    '        linkName = 23,\n' +
    '        linkText = 24\n' +
    '    }\n' +
    '    interface SymbolDisplayPart {\n' +
    '        text: string;\n' +
    '        kind: string;\n' +
    '    }\n' +
    '    interface JSDocLinkDisplayPart extends SymbolDisplayPart {\n' +
    '        target: DocumentSpan;\n' +
    '    }\n' +
    '    interface JSDocTagInfo {\n' +
    '        name: string;\n' +
    '        text?: SymbolDisplayPart[];\n' +
    '    }\n' +
    '    interface QuickInfo {\n' +
    '        kind: ScriptElementKind;\n' +
    '        kindModifiers: string;\n' +
    '        textSpan: TextSpan;\n' +
    '        displayParts?: SymbolDisplayPart[];\n' +
    '        documentation?: SymbolDisplayPart[];\n' +
    '        tags?: JSDocTagInfo[];\n' +
    '    }\n' +
    '    type RenameInfo = RenameInfoSuccess | RenameInfoFailure;\n' +
    '    interface RenameInfoSuccess {\n' +
    '        canRename: true;\n' +
    '        /**\n' +
    '         * File or directory to rename.\n' +
    '         * If set, `getEditsForFileRename` should be called instead of `findRenameLocations`.\n' +
    '         */\n' +
    '        fileToRename?: string;\n' +
    '        displayName: string;\n' +
    '        fullDisplayName: string;\n' +
    '        kind: ScriptElementKind;\n' +
    '        kindModifiers: string;\n' +
    '        triggerSpan: TextSpan;\n' +
    '    }\n' +
    '    interface RenameInfoFailure {\n' +
    '        canRename: false;\n' +
    '        localizedErrorMessage: string;\n' +
    '    }\n' +
    '    interface RenameInfoOptions {\n' +
    '        readonly allowRenameOfImportPath?: boolean;\n' +
    '    }\n' +
    '    interface DocCommentTemplateOptions {\n' +
    '        readonly generateReturnInDocTemplate?: boolean;\n' +
    '    }\n' +
    '    interface SignatureHelpParameter {\n' +
    '        name: string;\n' +
    '        documentation: SymbolDisplayPart[];\n' +
    '        displayParts: SymbolDisplayPart[];\n' +
    '        isOptional: boolean;\n' +
    '        isRest?: boolean;\n' +
    '    }\n' +
    '    interface SelectionRange {\n' +
    '        textSpan: TextSpan;\n' +
    '        parent?: SelectionRange;\n' +
    '    }\n' +
    '    /**\n' +
    '     * Represents a single signature to show in signature help.\n' +
    '     * The id is used for subsequent calls into the language service to ask questions about the\n' +
    '     * signature help item in the context of any documents that have been updated.  i.e. after\n' +
    '     * an edit has happened, while signature help is still active, the host can ask important\n' +
    "     * questions like 'what parameter is the user currently contained within?'.\n" +
    '     */\n' +
    '    interface SignatureHelpItem {\n' +
    '        isVariadic: boolean;\n' +
    '        prefixDisplayParts: SymbolDisplayPart[];\n' +
    '        suffixDisplayParts: SymbolDisplayPart[];\n' +
    '        separatorDisplayParts: SymbolDisplayPart[];\n' +
    '        parameters: SignatureHelpParameter[];\n' +
    '        documentation: SymbolDisplayPart[];\n' +
    '        tags: JSDocTagInfo[];\n' +
    '    }\n' +
    '    /**\n' +
    '     * Represents a set of signature help items, and the preferred item that should be selected.\n' +
    '     */\n' +
    '    interface SignatureHelpItems {\n' +
    '        items: SignatureHelpItem[];\n' +
    '        applicableSpan: TextSpan;\n' +
    '        selectedItemIndex: number;\n' +
    '        argumentIndex: number;\n' +
    '        argumentCount: number;\n' +
    '    }\n' +
    '    enum CompletionInfoFlags {\n' +
    '        None = 0,\n' +
    '        MayIncludeAutoImports = 1,\n' +
    '        IsImportStatementCompletion = 2,\n' +
    '        IsContinuation = 4,\n' +
    '        ResolvedModuleSpecifiers = 8,\n' +
    '        ResolvedModuleSpecifiersBeyondLimit = 16,\n' +
    '        MayIncludeMethodSnippets = 32\n' +
    '    }\n' +
    '    interface CompletionInfo {\n' +
    '        /** For performance telemetry. */\n' +
    '        flags?: CompletionInfoFlags;\n' +
    '        /** Not true for all global completions. This will be true if the enclosing scope matches a few syntax kinds. See `isSnippetScope`. */\n' +
    '        isGlobalCompletion: boolean;\n' +
    '        isMemberCompletion: boolean;\n' +
    '        /**\n' +
    '         * In the absence of `CompletionEntry["replacementSpan"], the editor may choose whether to use\n' +
    '         * this span or its default one. If `CompletionEntry["replacementSpan"]` is defined, that span\n' +
    '         * must be used to commit that completion entry.\n' +
    '         */\n' +
    '        optionalReplacementSpan?: TextSpan;\n' +
    '        /**\n' +
    '         * true when the current location also allows for a new identifier\n' +
    '         */\n' +
    '        isNewIdentifierLocation: boolean;\n' +
    '        /**\n' +
    '         * Indicates to client to continue requesting completions on subsequent keystrokes.\n' +
    '         */\n' +
    '        isIncomplete?: true;\n' +
    '        entries: CompletionEntry[];\n' +
    '    }\n' +
    '    interface CompletionEntryDataAutoImport {\n' +
    '        /**\n' +
    "         * The name of the property or export in the module's symbol table. Differs from the completion name\n" +
    '         * in the case of InternalSymbolName.ExportEquals and InternalSymbolName.Default.\n' +
    '         */\n' +
    '        exportName: string;\n' +
    '        moduleSpecifier?: string;\n' +
    "        /** The file name declaring the export's module symbol, if it was an external module */\n" +
    '        fileName?: string;\n' +
    "        /** The module name (with quotes stripped) of the export's module symbol, if it was an ambient module */\n" +
    '        ambientModuleName?: string;\n' +
    '        /** True if the export was found in the package.json AutoImportProvider */\n' +
    '        isPackageJsonImport?: true;\n' +
    '    }\n' +
    '    interface CompletionEntryDataUnresolved extends CompletionEntryDataAutoImport {\n' +
    "        /** The key in the `ExportMapCache` where the completion entry's `SymbolExportInfo[]` is found */\n" +
    '        exportMapKey: string;\n' +
    '    }\n' +
    '    interface CompletionEntryDataResolved extends CompletionEntryDataAutoImport {\n' +
    '        moduleSpecifier: string;\n' +
    '    }\n' +
    '    type CompletionEntryData = CompletionEntryDataUnresolved | CompletionEntryDataResolved;\n' +
    '    interface CompletionEntry {\n' +
    '        name: string;\n' +
    '        kind: ScriptElementKind;\n' +
    '        kindModifiers?: string;\n' +
    '        sortText: string;\n' +
    '        insertText?: string;\n' +
    '        isSnippet?: true;\n' +
    '        /**\n' +
    '         * An optional span that indicates the text to be replaced by this completion item.\n' +
    '         * If present, this span should be used instead of the default one.\n' +
    '         * It will be set if the required span differs from the one generated by the default replacement behavior.\n' +
    '         */\n' +
    '        replacementSpan?: TextSpan;\n' +
    '        hasAction?: true;\n' +
    '        source?: string;\n' +
    '        sourceDisplay?: SymbolDisplayPart[];\n' +
    '        labelDetails?: CompletionEntryLabelDetails;\n' +
    '        isRecommended?: true;\n' +
    '        isFromUncheckedFile?: true;\n' +
    '        isPackageJsonImport?: true;\n' +
    '        isImportStatementCompletion?: true;\n' +
    '        /**\n' +
    '         * A property to be sent back to TS Server in the CompletionDetailsRequest, along with `name`,\n' +
    '         * that allows TS Server to look up the symbol represented by the completion item, disambiguating\n' +
    '         * items with the same name. Currently only defined for auto-import completions, but the type is\n' +
    '         * `unknown` in the protocol, so it can be changed as needed to support other kinds of completions.\n' +
    '         * The presence of this property should generally not be used to assume that this completion entry\n' +
    '         * is an auto-import.\n' +
    '         */\n' +
    '        data?: CompletionEntryData;\n' +
    '    }\n' +
    '    interface CompletionEntryLabelDetails {\n' +
    '        detail?: string;\n' +
    '        description?: string;\n' +
    '    }\n' +
    '    interface CompletionEntryDetails {\n' +
    '        name: string;\n' +
    '        kind: ScriptElementKind;\n' +
    '        kindModifiers: string;\n' +
    '        displayParts: SymbolDisplayPart[];\n' +
    '        documentation?: SymbolDisplayPart[];\n' +
    '        tags?: JSDocTagInfo[];\n' +
    '        codeActions?: CodeAction[];\n' +
    '        /** @deprecated Use `sourceDisplay` instead. */\n' +
    '        source?: SymbolDisplayPart[];\n' +
    '        sourceDisplay?: SymbolDisplayPart[];\n' +
    '    }\n' +
    '    interface OutliningSpan {\n' +
    '        /** The span of the document to actually collapse. */\n' +
    '        textSpan: TextSpan;\n' +
    '        /** The span of the document to display when the user hovers over the collapsed span. */\n' +
    '        hintSpan: TextSpan;\n' +
    '        /** The text to display in the editor for the collapsed region. */\n' +
    '        bannerText: string;\n' +
    '        /**\n' +
    '         * Whether or not this region should be automatically collapsed when\n' +
    "         * the 'Collapse to Definitions' command is invoked.\n" +
    '         */\n' +
    '        autoCollapse: boolean;\n' +
    '        /**\n' +
    '         * Classification of the contents of the span\n' +
    '         */\n' +
    '        kind: OutliningSpanKind;\n' +
    '    }\n' +
    '    enum OutliningSpanKind {\n' +
    '        /** Single or multi-line comments */\n' +
    '        Comment = "comment",\n' +
    "        /** Sections marked by '// #region' and '// #endregion' comments */\n" +
    '        Region = "region",\n' +
    '        /** Declarations and expressions */\n' +
    '        Code = "code",\n' +
    '        /** Contiguous blocks of import declarations */\n' +
    '        Imports = "imports"\n' +
    '    }\n' +
    '    enum OutputFileType {\n' +
    '        JavaScript = 0,\n' +
    '        SourceMap = 1,\n' +
    '        Declaration = 2\n' +
    '    }\n' +
    '    enum EndOfLineState {\n' +
    '        None = 0,\n' +
    '        InMultiLineCommentTrivia = 1,\n' +
    '        InSingleQuoteStringLiteral = 2,\n' +
    '        InDoubleQuoteStringLiteral = 3,\n' +
    '        InTemplateHeadOrNoSubstitutionTemplate = 4,\n' +
    '        InTemplateMiddleOrTail = 5,\n' +
    '        InTemplateSubstitutionPosition = 6\n' +
    '    }\n' +
    '    enum TokenClass {\n' +
    '        Punctuation = 0,\n' +
    '        Keyword = 1,\n' +
    '        Operator = 2,\n' +
    '        Comment = 3,\n' +
    '        Whitespace = 4,\n' +
    '        Identifier = 5,\n' +
    '        NumberLiteral = 6,\n' +
    '        BigIntLiteral = 7,\n' +
    '        StringLiteral = 8,\n' +
    '        RegExpLiteral = 9\n' +
    '    }\n' +
    '    interface ClassificationResult {\n' +
    '        finalLexState: EndOfLineState;\n' +
    '        entries: ClassificationInfo[];\n' +
    '    }\n' +
    '    interface ClassificationInfo {\n' +
    '        length: number;\n' +
    '        classification: TokenClass;\n' +
    '    }\n' +
    '    interface Classifier {\n' +
    '        /**\n' +
    '         * Gives lexical classifications of tokens on a line without any syntactic context.\n' +
    "         * For instance, a token consisting of the text 'string' can be either an identifier\n" +
    "         * named 'string' or the keyword 'string', however, because this classifier is not aware,\n" +
    '         * it relies on certain heuristics to give acceptable results. For classifications where\n' +
    '         * speed trumps accuracy, this function is preferable; however, for true accuracy, the\n' +
    '         * syntactic classifier is ideal. In fact, in certain editing scenarios, combining the\n' +
    '         * lexical, syntactic, and semantic classifiers may issue the best user experience.\n' +
    '         *\n' +
    '         * @param text                      The text of a line to classify.\n' +
    '         * @param lexState                  The state of the lexical classifier at the end of the previous line.\n' +
    '         * @param syntacticClassifierAbsent Whether the client is *not* using a syntactic classifier.\n' +
    '         *                                  If there is no syntactic classifier (syntacticClassifierAbsent=true),\n' +
    '         *                                  certain heuristics may be used in its place; however, if there is a\n' +
    '         *                                  syntactic classifier (syntacticClassifierAbsent=false), certain\n' +
    '         *                                  classifications which may be incorrectly categorized will be given\n' +
    '         *                                  back as Identifiers in order to allow the syntactic classifier to\n' +
    '         *                                  subsume the classification.\n' +
    '         * @deprecated Use getLexicalClassifications instead.\n' +
    '         */\n' +
    '        getClassificationsForLine(text: string, lexState: EndOfLineState, syntacticClassifierAbsent: boolean): ClassificationResult;\n' +
    '        getEncodedLexicalClassifications(text: string, endOfLineState: EndOfLineState, syntacticClassifierAbsent: boolean): Classifications;\n' +
    '    }\n' +
    '    enum ScriptElementKind {\n' +
    '        unknown = "",\n' +
    '        warning = "warning",\n' +
    '        /** predefined type (void) or keyword (class) */\n' +
    '        keyword = "keyword",\n' +
    '        /** top level script node */\n' +
    '        scriptElement = "script",\n' +
    '        /** module foo {} */\n' +
    '        moduleElement = "module",\n' +
    '        /** class X {} */\n' +
    '        classElement = "class",\n' +
    '        /** var x = class X {} */\n' +
    '        localClassElement = "local class",\n' +
    '        /** interface Y {} */\n' +
    '        interfaceElement = "interface",\n' +
    '        /** type T = ... */\n' +
    '        typeElement = "type",\n' +
    '        /** enum E */\n' +
    '        enumElement = "enum",\n' +
    '        enumMemberElement = "enum member",\n' +
    '        /**\n' +
    '         * Inside module and script only\n' +
    '         * const v = ..\n' +
    '         */\n' +
    '        variableElement = "var",\n' +
    '        /** Inside function */\n' +
    '        localVariableElement = "local var",\n' +
    '        /**\n' +
    '         * Inside module and script only\n' +
    '         * function f() { }\n' +
    '         */\n' +
    '        functionElement = "function",\n' +
    '        /** Inside function */\n' +
    '        localFunctionElement = "local function",\n' +
    '        /** class X { [public|private]* foo() {} } */\n' +
    '        memberFunctionElement = "method",\n' +
    '        /** class X { [public|private]* [get|set] foo:number; } */\n' +
    '        memberGetAccessorElement = "getter",\n' +
    '        memberSetAccessorElement = "setter",\n' +
    '        /**\n' +
    '         * class X { [public|private]* foo:number; }\n' +
    '         * interface Y { foo:number; }\n' +
    '         */\n' +
    '        memberVariableElement = "property",\n' +
    '        /**\n' +
    '         * class X { constructor() { } }\n' +
    '         * class X { static { } }\n' +
    '         */\n' +
    '        constructorImplementationElement = "constructor",\n' +
    '        /** interface Y { ():number; } */\n' +
    '        callSignatureElement = "call",\n' +
    '        /** interface Y { []:number; } */\n' +
    '        indexSignatureElement = "index",\n' +
    '        /** interface Y { new():Y; } */\n' +
    '        constructSignatureElement = "construct",\n' +
    '        /** function foo(*Y*: string) */\n' +
    '        parameterElement = "parameter",\n' +
    '        typeParameterElement = "type parameter",\n' +
    '        primitiveType = "primitive type",\n' +
    '        label = "label",\n' +
    '        alias = "alias",\n' +
    '        constElement = "const",\n' +
    '        letElement = "let",\n' +
    '        directory = "directory",\n' +
    '        externalModuleName = "external module name",\n' +
    '        /**\n' +
    '         * <JsxTagName attribute1 attribute2={0} />\n' +
    '         * @deprecated\n' +
    '         */\n' +
    '        jsxAttribute = "JSX attribute",\n' +
    '        /** String literal */\n' +
    '        string = "string",\n' +
    '        /** Jsdoc @link: in `{@link C link text}`, the before and after text "{@link " and "}" */\n' +
    '        link = "link",\n' +
    '        /** Jsdoc @link: in `{@link C link text}`, the entity name "C" */\n' +
    '        linkName = "link name",\n' +
    '        /** Jsdoc @link: in `{@link C link text}`, the link text "link text" */\n' +
    '        linkText = "link text"\n' +
    '    }\n' +
    '    enum ScriptElementKindModifier {\n' +
    '        none = "",\n' +
    '        publicMemberModifier = "public",\n' +
    '        privateMemberModifier = "private",\n' +
    '        protectedMemberModifier = "protected",\n' +
    '        exportedModifier = "export",\n' +
    '        ambientModifier = "declare",\n' +
    '        staticModifier = "static",\n' +
    '        abstractModifier = "abstract",\n' +
    '        optionalModifier = "optional",\n' +
    '        deprecatedModifier = "deprecated",\n' +
    '        dtsModifier = ".d.ts",\n' +
    '        tsModifier = ".ts",\n' +
    '        tsxModifier = ".tsx",\n' +
    '        jsModifier = ".js",\n' +
    '        jsxModifier = ".jsx",\n' +
    '        jsonModifier = ".json",\n' +
    '        dmtsModifier = ".d.mts",\n' +
    '        mtsModifier = ".mts",\n' +
    '        mjsModifier = ".mjs",\n' +
    '        dctsModifier = ".d.cts",\n' +
    '        ctsModifier = ".cts",\n' +
    '        cjsModifier = ".cjs"\n' +
    '    }\n' +
    '    enum ClassificationTypeNames {\n' +
    '        comment = "comment",\n' +
    '        identifier = "identifier",\n' +
    '        keyword = "keyword",\n' +
    '        numericLiteral = "number",\n' +
    '        bigintLiteral = "bigint",\n' +
    '        operator = "operator",\n' +
    '        stringLiteral = "string",\n' +
    '        whiteSpace = "whitespace",\n' +
    '        text = "text",\n' +
    '        punctuation = "punctuation",\n' +
    '        className = "class name",\n' +
    '        enumName = "enum name",\n' +
    '        interfaceName = "interface name",\n' +
    '        moduleName = "module name",\n' +
    '        typeParameterName = "type parameter name",\n' +
    '        typeAliasName = "type alias name",\n' +
    '        parameterName = "parameter name",\n' +
    '        docCommentTagName = "doc comment tag name",\n' +
    '        jsxOpenTagName = "jsx open tag name",\n' +
    '        jsxCloseTagName = "jsx close tag name",\n' +
    '        jsxSelfClosingTagName = "jsx self closing tag name",\n' +
    '        jsxAttribute = "jsx attribute",\n' +
    '        jsxText = "jsx text",\n' +
    '        jsxAttributeStringLiteralValue = "jsx attribute string literal value"\n' +
    '    }\n' +
    '    enum ClassificationType {\n' +
    '        comment = 1,\n' +
    '        identifier = 2,\n' +
    '        keyword = 3,\n' +
    '        numericLiteral = 4,\n' +
    '        operator = 5,\n' +
    '        stringLiteral = 6,\n' +
    '        regularExpressionLiteral = 7,\n' +
    '        whiteSpace = 8,\n' +
    '        text = 9,\n' +
    '        punctuation = 10,\n' +
    '        className = 11,\n' +
    '        enumName = 12,\n' +
    '        interfaceName = 13,\n' +
    '        moduleName = 14,\n' +
    '        typeParameterName = 15,\n' +
    '        typeAliasName = 16,\n' +
    '        parameterName = 17,\n' +
    '        docCommentTagName = 18,\n' +
    '        jsxOpenTagName = 19,\n' +
    '        jsxCloseTagName = 20,\n' +
    '        jsxSelfClosingTagName = 21,\n' +
    '        jsxAttribute = 22,\n' +
    '        jsxText = 23,\n' +
    '        jsxAttributeStringLiteralValue = 24,\n' +
    '        bigintLiteral = 25\n' +
    '    }\n' +
    '    interface InlayHintsContext {\n' +
    '        file: SourceFile;\n' +
    '        program: Program;\n' +
    '        cancellationToken: CancellationToken;\n' +
    '        host: LanguageServiceHost;\n' +
    '        span: TextSpan;\n' +
    '        preferences: UserPreferences;\n' +
    '    }\n' +
    '}\n' +
    'declare namespace ts {\n' +
    '    /** The classifier is used for syntactic highlighting in editors via the TSServer */\n' +
    '    function createClassifier(): Classifier;\n' +
    '}\n' +
    'declare namespace ts {\n' +
    '    interface DocumentHighlights {\n' +
    '        fileName: string;\n' +
    '        highlightSpans: HighlightSpan[];\n' +
    '    }\n' +
    '}\n' +
    'declare namespace ts {\n' +
    '    /**\n' +
    '     * The document registry represents a store of SourceFile objects that can be shared between\n' +
    '     * multiple LanguageService instances. A LanguageService instance holds on the SourceFile (AST)\n' +
    '     * of files in the context.\n' +
    '     * SourceFile objects account for most of the memory usage by the language service. Sharing\n' +
    '     * the same DocumentRegistry instance between different instances of LanguageService allow\n' +
    '     * for more efficient memory utilization since all projects will share at least the library\n' +
    '     * file (lib.d.ts).\n' +
    '     *\n' +
    '     * A more advanced use of the document registry is to serialize sourceFile objects to disk\n' +
    '     * and re-hydrate them when needed.\n' +
    '     *\n' +
    '     * To create a default DocumentRegistry, use createDocumentRegistry to create one, and pass it\n' +
    '     * to all subsequent createLanguageService calls.\n' +
    '     */\n' +
    '    interface DocumentRegistry {\n' +
    '        /**\n' +
    '         * Request a stored SourceFile with a given fileName and compilationSettings.\n' +
    '         * The first call to acquire will call createLanguageServiceSourceFile to generate\n' +
    '         * the SourceFile if was not found in the registry.\n' +
    '         *\n' +
    '         * @param fileName The name of the file requested\n' +
    '         * @param compilationSettingsOrHost Some compilation settings like target affects the\n' +
    '         * shape of a the resulting SourceFile. This allows the DocumentRegistry to store\n' +
    '         * multiple copies of the same file for different compilation settings. A minimal\n' +
    "         * resolution cache is needed to fully define a source file's shape when\n" +
    '         * the compilation settings include `module: node16`+, so providing a cache host\n' +
    '         * object should be preferred. A common host is a language service `ConfiguredProject`.\n' +
    '         * @param scriptSnapshot Text of the file. Only used if the file was not found\n' +
    '         * in the registry and a new one was created.\n' +
    '         * @param version Current version of the file. Only used if the file was not found\n' +
    '         * in the registry and a new one was created.\n' +
    '         */\n' +
    '        acquireDocument(fileName: string, compilationSettingsOrHost: CompilerOptions | MinimalResolutionCacheHost, scriptSnapshot: IScriptSnapshot, version: string, scriptKind?: ScriptKind): SourceFile;\n' +
    '        acquireDocumentWithKey(fileName: string, path: Path, compilationSettingsOrHost: CompilerOptions | MinimalResolutionCacheHost, key: DocumentRegistryBucketKey, scriptSnapshot: IScriptSnapshot, version: string, scriptKind?: ScriptKind): SourceFile;\n' +
    '        /**\n' +
    '         * Request an updated version of an already existing SourceFile with a given fileName\n' +
    '         * and compilationSettings. The update will in-turn call updateLanguageServiceSourceFile\n' +
    '         * to get an updated SourceFile.\n' +
    '         *\n' +
    '         * @param fileName The name of the file requested\n' +
    '         * @param compilationSettingsOrHost Some compilation settings like target affects the\n' +
    '         * shape of a the resulting SourceFile. This allows the DocumentRegistry to store\n' +
    '         * multiple copies of the same file for different compilation settings. A minimal\n' +
    "         * resolution cache is needed to fully define a source file's shape when\n" +
    '         * the compilation settings include `module: node16`+, so providing a cache host\n' +
    '         * object should be preferred. A common host is a language service `ConfiguredProject`.\n' +
    '         * @param scriptSnapshot Text of the file.\n' +
    '         * @param version Current version of the file.\n' +
    '         */\n' +
    '        updateDocument(fileName: string, compilationSettingsOrHost: CompilerOptions | MinimalResolutionCacheHost, scriptSnapshot: IScriptSnapshot, version: string, scriptKind?: ScriptKind): SourceFile;\n' +
    '        updateDocumentWithKey(fileName: string, path: Path, compilationSettingsOrHost: CompilerOptions | MinimalResolutionCacheHost, key: DocumentRegistryBucketKey, scriptSnapshot: IScriptSnapshot, version: string, scriptKind?: ScriptKind): SourceFile;\n' +
    '        getKeyForCompilationSettings(settings: CompilerOptions): DocumentRegistryBucketKey;\n' +
    '        /**\n' +
    '         * Informs the DocumentRegistry that a file is not needed any longer.\n' +
    '         *\n' +
    '         * Note: It is not allowed to call release on a SourceFile that was not acquired from\n' +
    '         * this registry originally.\n' +
    '         *\n' +
    '         * @param fileName The name of the file to be released\n' +
    '         * @param compilationSettings The compilation settings used to acquire the file\n' +
    '         */\n' +
    '        /**@deprecated pass scriptKind for correctness */\n' +
    '        releaseDocument(fileName: string, compilationSettings: CompilerOptions): void;\n' +
    '        /**\n' +
    '         * Informs the DocumentRegistry that a file is not needed any longer.\n' +
    '         *\n' +
    '         * Note: It is not allowed to call release on a SourceFile that was not acquired from\n' +
    '         * this registry originally.\n' +
    '         *\n' +
    '         * @param fileName The name of the file to be released\n' +
    '         * @param compilationSettings The compilation settings used to acquire the file\n' +
    '         * @param scriptKind The script kind of the file to be released\n' +
    '         */\n' +
    '        releaseDocument(fileName: string, compilationSettings: CompilerOptions, scriptKind: ScriptKind): void;\n' +
    '        /**\n' +
    '         * @deprecated pass scriptKind for correctness */\n' +
    '        releaseDocumentWithKey(path: Path, key: DocumentRegistryBucketKey): void;\n' +
    '        releaseDocumentWithKey(path: Path, key: DocumentRegistryBucketKey, scriptKind: ScriptKind): void;\n' +
    '        reportStats(): string;\n' +
    '    }\n' +
    '    type DocumentRegistryBucketKey = string & {\n' +
    '        __bucketKey: any;\n' +
    '    };\n' +
    '    function createDocumentRegistry(useCaseSensitiveFileNames?: boolean, currentDirectory?: string): DocumentRegistry;\n' +
    '}\n' +
    'declare namespace ts {\n' +
    '    function preProcessFile(sourceText: string, readImportFiles?: boolean, detectJavaScriptImports?: boolean): PreProcessedFileInfo;\n' +
    '}\n' +
    'declare namespace ts {\n' +
    '    interface TranspileOptions {\n' +
    '        compilerOptions?: CompilerOptions;\n' +
    '        fileName?: string;\n' +
    '        reportDiagnostics?: boolean;\n' +
    '        moduleName?: string;\n' +
    '        renamedDependencies?: MapLike<string>;\n' +
    '        transformers?: CustomTransformers;\n' +
    '    }\n' +
    '    interface TranspileOutput {\n' +
    '        outputText: string;\n' +
    '        diagnostics?: Diagnostic[];\n' +
    '        sourceMapText?: string;\n' +
    '    }\n' +
    '    function transpileModule(input: string, transpileOptions: TranspileOptions): TranspileOutput;\n' +
    '    function transpile(input: string, compilerOptions?: CompilerOptions, fileName?: string, diagnostics?: Diagnostic[], moduleName?: string): string;\n' +
    '}\n' +
    'declare namespace ts {\n' +
    '    /** The version of the language service API */\n' +
    '    const servicesVersion = "0.8";\n' +
    '    function toEditorSettings(options: EditorOptions | EditorSettings): EditorSettings;\n' +
    '    function displayPartsToString(displayParts: SymbolDisplayPart[] | undefined): string;\n' +
    '    function getDefaultCompilerOptions(): CompilerOptions;\n' +
    '    function getSupportedCodeFixes(): string[];\n' +
    '    function createLanguageServiceSourceFile(fileName: string, scriptSnapshot: IScriptSnapshot, scriptTargetOrOptions: ScriptTarget | CreateSourceFileOptions, version: string, setNodeParents: boolean, scriptKind?: ScriptKind): SourceFile;\n' +
    '    function updateLanguageServiceSourceFile(sourceFile: SourceFile, scriptSnapshot: IScriptSnapshot, version: string, textChangeRange: TextChangeRange | undefined, aggressiveChecks?: boolean): SourceFile;\n' +
    '    function createLanguageService(host: LanguageServiceHost, documentRegistry?: DocumentRegistry, syntaxOnlyOrLanguageServiceMode?: boolean | LanguageServiceMode): LanguageService;\n' +
    '    /**\n' +
    '     * Get the path of the default library files (lib.d.ts) as distributed with the typescript\n' +
    '     * node package.\n' +
    '     * The functionality is not supported if the ts module is consumed outside of a node module.\n' +
    '     */\n' +
    '    function getDefaultLibFilePath(options: CompilerOptions): string;\n' +
    '}\n' +
    'declare namespace ts {\n' +
    '    /**\n' +
    '     * Transform one or more nodes using the supplied transformers.\n' +
    '     * @param source A single `Node` or an array of `Node` objects.\n' +
    '     * @param transformers An array of `TransformerFactory` callbacks used to process the transformation.\n' +
    '     * @param compilerOptions Optional compiler options.\n' +
    '     */\n' +
    '    function transform<T extends Node>(source: T | T[], transformers: TransformerFactory<T>[], compilerOptions?: CompilerOptions): TransformationResult<T>;\n' +
    '}\n' +
    'declare namespace ts {\n' +
    '    /** @deprecated Use `factory.createNodeArray` or the factory supplied by your transformation context instead. */\n' +
    '    const createNodeArray: <T extends Node>(elements?: readonly T[] | undefined, hasTrailingComma?: boolean | undefined) => NodeArray<T>;\n' +
    '    /** @deprecated Use `factory.createNumericLiteral` or the factory supplied by your transformation context instead. */\n' +
    '    const createNumericLiteral: (value: string | number, numericLiteralFlags?: TokenFlags | undefined) => NumericLiteral;\n' +
    '    /** @deprecated Use `factory.createBigIntLiteral` or the factory supplied by your transformation context instead. */\n' +
    '    const createBigIntLiteral: (value: string | PseudoBigInt) => BigIntLiteral;\n' +
    '    /** @deprecated Use `factory.createStringLiteral` or the factory supplied by your transformation context instead. */\n' +
    '    const createStringLiteral: {\n' +
    '        (text: string, isSingleQuote?: boolean | undefined): StringLiteral;\n' +
    '        (text: string, isSingleQuote?: boolean | undefined, hasExtendedUnicodeEscape?: boolean | undefined): StringLiteral;\n' +
    '    };\n' +
    '    /** @deprecated Use `factory.createStringLiteralFromNode` or the factory supplied by your transformation context instead. */\n' +
    '    const createStringLiteralFromNode: (sourceNode: PropertyNameLiteral, isSingleQuote?: boolean | undefined) => StringLiteral;\n' +
    '    /** @deprecated Use `factory.createRegularExpressionLiteral` or the factory supplied by your transformation context instead. */\n' +
    '    const createRegularExpressionLiteral: (text: string) => RegularExpressionLiteral;\n' +
    '    /** @deprecated Use `factory.createLoopVariable` or the factory supplied by your transformation context instead. */\n' +
    '    const createLoopVariable: (reservedInNestedScopes?: boolean | undefined) => Identifier;\n' +
    '    /** @deprecated Use `factory.createUniqueName` or the factory supplied by your transformation context instead. */\n' +
    '    const createUniqueName: (text: string, flags?: GeneratedIdentifierFlags | undefined) => Identifier;\n' +
    '    /** @deprecated Use `factory.createPrivateIdentifier` or the factory supplied by your transformation context instead. */\n' +
    '    const createPrivateIdentifier: (text: string) => PrivateIdentifier;\n' +
    '    /** @deprecated Use `factory.createSuper` or the factory supplied by your transformation context instead. */\n' +
    '    const createSuper: () => SuperExpression;\n' +
    '    /** @deprecated Use `factory.createThis` or the factory supplied by your transformation context instead. */\n' +
    '    const createThis: () => ThisExpression;\n' +
    '    /** @deprecated Use `factory.createNull` or the factory supplied by your transformation context instead. */\n' +
    '    const createNull: () => NullLiteral;\n' +
    '    /** @deprecated Use `factory.createTrue` or the factory supplied by your transformation context instead. */\n' +
    '    const createTrue: () => TrueLiteral;\n' +
    '    /** @deprecated Use `factory.createFalse` or the factory supplied by your transformation context instead. */\n' +
    '    const createFalse: () => FalseLiteral;\n' +
    '    /** @deprecated Use `factory.createModifier` or the factory supplied by your transformation context instead. */\n' +
    '    const createModifier: <T extends ModifierSyntaxKind>(kind: T) => ModifierToken<T>;\n' +
    '    /** @deprecated Use `factory.createModifiersFromModifierFlags` or the factory supplied by your transformation context instead. */\n' +
    '    const createModifiersFromModifierFlags: (flags: ModifierFlags) => Modifier[] | undefined;\n' +
    '    /** @deprecated Use `factory.createQualifiedName` or the factory supplied by your transformation context instead. */\n' +
    '    const createQualifiedName: (left: EntityName, right: string | Identifier) => QualifiedName;\n' +
    '    /** @deprecated Use `factory.updateQualifiedName` or the factory supplied by your transformation context instead. */\n' +
    '    const updateQualifiedName: (node: QualifiedName, left: EntityName, right: Identifier) => QualifiedName;\n' +
    '    /** @deprecated Use `factory.createComputedPropertyName` or the factory supplied by your transformation context instead. */\n' +
    '    const createComputedPropertyName: (expression: Expression) => ComputedPropertyName;\n' +
    '    /** @deprecated Use `factory.updateComputedPropertyName` or the factory supplied by your transformation context instead. */\n' +
    '    const updateComputedPropertyName: (node: ComputedPropertyName, expression: Expression) => ComputedPropertyName;\n' +
    '    /** @deprecated Use `factory.createTypeParameterDeclaration` or the factory supplied by your transformation context instead. */\n' +
    '    const createTypeParameterDeclaration: {\n' +
    '        (modifiers: readonly Modifier[] | undefined, name: string | Identifier, constraint?: TypeNode | undefined, defaultType?: TypeNode | undefined): TypeParameterDeclaration;\n' +
    '        (name: string | Identifier, constraint?: TypeNode | undefined, defaultType?: TypeNode | undefined): TypeParameterDeclaration;\n' +
    '    };\n' +
    '    /** @deprecated Use `factory.updateTypeParameterDeclaration` or the factory supplied by your transformation context instead. */\n' +
    '    const updateTypeParameterDeclaration: {\n' +
    '        (node: TypeParameterDeclaration, modifiers: readonly Modifier[] | undefined, name: Identifier, constraint: TypeNode | undefined, defaultType: TypeNode | undefined): TypeParameterDeclaration;\n' +
    '        (node: TypeParameterDeclaration, name: Identifier, constraint: TypeNode | undefined, defaultType: TypeNode | undefined): TypeParameterDeclaration;\n' +
    '    };\n' +
    '    /** @deprecated Use `factory.createParameterDeclaration` or the factory supplied by your transformation context instead. */\n' +
    '    const createParameter: (decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, dotDotDotToken: DotDotDotToken | undefined, name: string | BindingName, questionToken?: QuestionToken | undefined, type?: TypeNode | undefined, initializer?: Expression | undefined) => ParameterDeclaration;\n' +
    '    /** @deprecated Use `factory.updateParameterDeclaration` or the factory supplied by your transformation context instead. */\n' +
    '    const updateParameter: (node: ParameterDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, dotDotDotToken: DotDotDotToken | undefined, name: string | BindingName, questionToken: QuestionToken | undefined, type: TypeNode | undefined, initializer: Expression | undefined) => ParameterDeclaration;\n' +
    '    /** @deprecated Use `factory.createDecorator` or the factory supplied by your transformation context instead. */\n' +
    '    const createDecorator: (expression: Expression) => Decorator;\n' +
    '    /** @deprecated Use `factory.updateDecorator` or the factory supplied by your transformation context instead. */\n' +
    '    const updateDecorator: (node: Decorator, expression: Expression) => Decorator;\n' +
    '    /** @deprecated Use `factory.createPropertyDeclaration` or the factory supplied by your transformation context instead. */\n' +
    '    const createProperty: (decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: string | PropertyName, questionOrExclamationToken: QuestionToken | ExclamationToken | undefined, type: TypeNode | undefined, initializer: Expression | undefined) => PropertyDeclaration;\n' +
    '    /** @deprecated Use `factory.updatePropertyDeclaration` or the factory supplied by your transformation context instead. */\n' +
    '    const updateProperty: (node: PropertyDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: string | PropertyName, questionOrExclamationToken: QuestionToken | ExclamationToken | undefined, type: TypeNode | undefined, initializer: Expression | undefined) => PropertyDeclaration;\n' +
    '    /** @deprecated Use `factory.createMethodDeclaration` or the factory supplied by your transformation context instead. */\n' +
    '    const createMethod: (decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, asteriskToken: AsteriskToken | undefined, name: string | PropertyName, questionToken: QuestionToken | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, body: Block | undefined) => MethodDeclaration;\n' +
    '    /** @deprecated Use `factory.updateMethodDeclaration` or the factory supplied by your transformation context instead. */\n' +
    '    const updateMethod: (node: MethodDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, asteriskToken: AsteriskToken | undefined, name: PropertyName, questionToken: QuestionToken | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, body: Block | undefined) => MethodDeclaration;\n' +
    '    /** @deprecated Use `factory.createConstructorDeclaration` or the factory supplied by your transformation context instead. */\n' +
    '    const createConstructor: (decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, parameters: readonly ParameterDeclaration[], body: Block | undefined) => ConstructorDeclaration;\n' +
    '    /** @deprecated Use `factory.updateConstructorDeclaration` or the factory supplied by your transformation context instead. */\n' +
    '    const updateConstructor: (node: ConstructorDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, parameters: readonly ParameterDeclaration[], body: Block | undefined) => ConstructorDeclaration;\n' +
    '    /** @deprecated Use `factory.createGetAccessorDeclaration` or the factory supplied by your transformation context instead. */\n' +
    '    const createGetAccessor: (decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: string | PropertyName, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, body: Block | undefined) => GetAccessorDeclaration;\n' +
    '    /** @deprecated Use `factory.updateGetAccessorDeclaration` or the factory supplied by your transformation context instead. */\n' +
    '    const updateGetAccessor: (node: GetAccessorDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: PropertyName, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, body: Block | undefined) => GetAccessorDeclaration;\n' +
    '    /** @deprecated Use `factory.createSetAccessorDeclaration` or the factory supplied by your transformation context instead. */\n' +
    '    const createSetAccessor: (decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: string | PropertyName, parameters: readonly ParameterDeclaration[], body: Block | undefined) => SetAccessorDeclaration;\n' +
    '    /** @deprecated Use `factory.updateSetAccessorDeclaration` or the factory supplied by your transformation context instead. */\n' +
    '    const updateSetAccessor: (node: SetAccessorDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: PropertyName, parameters: readonly ParameterDeclaration[], body: Block | undefined) => SetAccessorDeclaration;\n' +
    '    /** @deprecated Use `factory.createCallSignature` or the factory supplied by your transformation context instead. */\n' +
    '    const createCallSignature: (typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined) => CallSignatureDeclaration;\n' +
    '    /** @deprecated Use `factory.updateCallSignature` or the factory supplied by your transformation context instead. */\n' +
    '    const updateCallSignature: (node: CallSignatureDeclaration, typeParameters: NodeArray<TypeParameterDeclaration> | undefined, parameters: NodeArray<ParameterDeclaration>, type: TypeNode | undefined) => CallSignatureDeclaration;\n' +
    '    /** @deprecated Use `factory.createConstructSignature` or the factory supplied by your transformation context instead. */\n' +
    '    const createConstructSignature: (typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined) => ConstructSignatureDeclaration;\n' +
    '    /** @deprecated Use `factory.updateConstructSignature` or the factory supplied by your transformation context instead. */\n' +
    '    const updateConstructSignature: (node: ConstructSignatureDeclaration, typeParameters: NodeArray<TypeParameterDeclaration> | undefined, parameters: NodeArray<ParameterDeclaration>, type: TypeNode | undefined) => ConstructSignatureDeclaration;\n' +
    '    /** @deprecated Use `factory.updateIndexSignature` or the factory supplied by your transformation context instead. */\n' +
    '    const updateIndexSignature: (node: IndexSignatureDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode) => IndexSignatureDeclaration;\n' +
    '    /** @deprecated Use `factory.createKeywordTypeNode` or the factory supplied by your transformation context instead. */\n' +
    '    const createKeywordTypeNode: <TKind extends KeywordTypeSyntaxKind>(kind: TKind) => KeywordTypeNode<TKind>;\n' +
    '    /** @deprecated Use `factory.createTypePredicateNode` or the factory supplied by your transformation context instead. */\n' +
    '    const createTypePredicateNodeWithModifier: (assertsModifier: AssertsKeyword | undefined, parameterName: string | Identifier | ThisTypeNode, type: TypeNode | undefined) => TypePredicateNode;\n' +
    '    /** @deprecated Use `factory.updateTypePredicateNode` or the factory supplied by your transformation context instead. */\n' +
    '    const updateTypePredicateNodeWithModifier: (node: TypePredicateNode, assertsModifier: AssertsKeyword | undefined, parameterName: Identifier | ThisTypeNode, type: TypeNode | undefined) => TypePredicateNode;\n' +
    '    /** @deprecated Use `factory.createTypeReferenceNode` or the factory supplied by your transformation context instead. */\n' +
    '    const createTypeReferenceNode: (typeName: string | EntityName, typeArguments?: readonly TypeNode[] | undefined) => TypeReferenceNode;\n' +
    '    /** @deprecated Use `factory.updateTypeReferenceNode` or the factory supplied by your transformation context instead. */\n' +
    '    const updateTypeReferenceNode: (node: TypeReferenceNode, typeName: EntityName, typeArguments: NodeArray<TypeNode> | undefined) => TypeReferenceNode;\n' +
    '    /** @deprecated Use `factory.createFunctionTypeNode` or the factory supplied by your transformation context instead. */\n' +
    '    const createFunctionTypeNode: (typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode) => FunctionTypeNode;\n' +
    '    /** @deprecated Use `factory.updateFunctionTypeNode` or the factory supplied by your transformation context instead. */\n' +
    '    const updateFunctionTypeNode: (node: FunctionTypeNode, typeParameters: NodeArray<TypeParameterDeclaration> | undefined, parameters: NodeArray<ParameterDeclaration>, type: TypeNode) => FunctionTypeNode;\n' +
    '    /** @deprecated Use `factory.createConstructorTypeNode` or the factory supplied by your transformation context instead. */\n' +
    '    const createConstructorTypeNode: (typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode) => ConstructorTypeNode;\n' +
    '    /** @deprecated Use `factory.updateConstructorTypeNode` or the factory supplied by your transformation context instead. */\n' +
    '    const updateConstructorTypeNode: (node: ConstructorTypeNode, typeParameters: NodeArray<TypeParameterDeclaration> | undefined, parameters: NodeArray<ParameterDeclaration>, type: TypeNode) => ConstructorTypeNode;\n' +
    '    /** @deprecated Use `factory.createTypeQueryNode` or the factory supplied by your transformation context instead. */\n' +
    '    const createTypeQueryNode: (exprName: EntityName, typeArguments?: readonly TypeNode[] | undefined) => TypeQueryNode;\n' +
    '    /** @deprecated Use `factory.updateTypeQueryNode` or the factory supplied by your transformation context instead. */\n' +
    '    const updateTypeQueryNode: (node: TypeQueryNode, exprName: EntityName, typeArguments?: readonly TypeNode[] | undefined) => TypeQueryNode;\n' +
    '    /** @deprecated Use `factory.createTypeLiteralNode` or the factory supplied by your transformation context instead. */\n' +
    '    const createTypeLiteralNode: (members: readonly TypeElement[] | undefined) => TypeLiteralNode;\n' +
    '    /** @deprecated Use `factory.updateTypeLiteralNode` or the factory supplied by your transformation context instead. */\n' +
    '    const updateTypeLiteralNode: (node: TypeLiteralNode, members: NodeArray<TypeElement>) => TypeLiteralNode;\n' +
    '    /** @deprecated Use `factory.createArrayTypeNode` or the factory supplied by your transformation context instead. */\n' +
    '    const createArrayTypeNode: (elementType: TypeNode) => ArrayTypeNode;\n' +
    '    /** @deprecated Use `factory.updateArrayTypeNode` or the factory supplied by your transformation context instead. */\n' +
    '    const updateArrayTypeNode: (node: ArrayTypeNode, elementType: TypeNode) => ArrayTypeNode;\n' +
    '    /** @deprecated Use `factory.createTupleTypeNode` or the factory supplied by your transformation context instead. */\n' +
    '    const createTupleTypeNode: (elements: readonly (TypeNode | NamedTupleMember)[]) => TupleTypeNode;\n' +
    '    /** @deprecated Use `factory.updateTupleTypeNode` or the factory supplied by your transformation context instead. */\n' +
    '    const updateTupleTypeNode: (node: TupleTypeNode, elements: readonly (TypeNode | NamedTupleMember)[]) => TupleTypeNode;\n' +
    '    /** @deprecated Use `factory.createOptionalTypeNode` or the factory supplied by your transformation context instead. */\n' +
    '    const createOptionalTypeNode: (type: TypeNode) => OptionalTypeNode;\n' +
    '    /** @deprecated Use `factory.updateOptionalTypeNode` or the factory supplied by your transformation context instead. */\n' +
    '    const updateOptionalTypeNode: (node: OptionalTypeNode, type: TypeNode) => OptionalTypeNode;\n' +
    '    /** @deprecated Use `factory.createRestTypeNode` or the factory supplied by your transformation context instead. */\n' +
    '    const createRestTypeNode: (type: TypeNode) => RestTypeNode;\n' +
    '    /** @deprecated Use `factory.updateRestTypeNode` or the factory supplied by your transformation context instead. */\n' +
    '    const updateRestTypeNode: (node: RestTypeNode, type: TypeNode) => RestTypeNode;\n' +
    '    /** @deprecated Use `factory.createUnionTypeNode` or the factory supplied by your transformation context instead. */\n' +
    '    const createUnionTypeNode: (types: readonly TypeNode[]) => UnionTypeNode;\n' +
    '    /** @deprecated Use `factory.updateUnionTypeNode` or the factory supplied by your transformation context instead. */\n' +
    '    const updateUnionTypeNode: (node: UnionTypeNode, types: NodeArray<TypeNode>) => UnionTypeNode;\n' +
    '    /** @deprecated Use `factory.createIntersectionTypeNode` or the factory supplied by your transformation context instead. */\n' +
    '    const createIntersectionTypeNode: (types: readonly TypeNode[]) => IntersectionTypeNode;\n' +
    '    /** @deprecated Use `factory.updateIntersectionTypeNode` or the factory supplied by your transformation context instead. */\n' +
    '    const updateIntersectionTypeNode: (node: IntersectionTypeNode, types: NodeArray<TypeNode>) => IntersectionTypeNode;\n' +
    '    /** @deprecated Use `factory.createConditionalTypeNode` or the factory supplied by your transformation context instead. */\n' +
    '    const createConditionalTypeNode: (checkType: TypeNode, extendsType: TypeNode, trueType: TypeNode, falseType: TypeNode) => ConditionalTypeNode;\n' +
    '    /** @deprecated Use `factory.updateConditionalTypeNode` or the factory supplied by your transformation context instead. */\n' +
    '    const updateConditionalTypeNode: (node: ConditionalTypeNode, checkType: TypeNode, extendsType: TypeNode, trueType: TypeNode, falseType: TypeNode) => ConditionalTypeNode;\n' +
    '    /** @deprecated Use `factory.createInferTypeNode` or the factory supplied by your transformation context instead. */\n' +
    '    const createInferTypeNode: (typeParameter: TypeParameterDeclaration) => InferTypeNode;\n' +
    '    /** @deprecated Use `factory.updateInferTypeNode` or the factory supplied by your transformation context instead. */\n' +
    '    const updateInferTypeNode: (node: InferTypeNode, typeParameter: TypeParameterDeclaration) => InferTypeNode;\n' +
    '    /** @deprecated Use `factory.createImportTypeNode` or the factory supplied by your transformation context instead. */\n' +
    '    const createImportTypeNode: {\n' +
    '        (argument: TypeNode, qualifier?: EntityName | undefined, typeArguments?: readonly TypeNode[] | undefined, isTypeOf?: boolean | undefined): ImportTypeNode;\n' +
    '        (argument: TypeNode, assertions?: ImportTypeAssertionContainer | undefined, qualifier?: EntityName | undefined, typeArguments?: readonly TypeNode[] | undefined, isTypeOf?: boolean | undefined): ImportTypeNode;\n' +
    '    };\n' +
    '    /** @deprecated Use `factory.updateImportTypeNode` or the factory supplied by your transformation context instead. */\n' +
    '    const updateImportTypeNode: {\n' +
    '        (node: ImportTypeNode, argument: TypeNode, qualifier: EntityName | undefined, typeArguments: readonly TypeNode[] | undefined, isTypeOf?: boolean | undefined): ImportTypeNode;\n' +
    '        (node: ImportTypeNode, argument: TypeNode, assertions: ImportTypeAssertionContainer | undefined, qualifier: EntityName | undefined, typeArguments: readonly TypeNode[] | undefined, isTypeOf?: boolean | undefined): ImportTypeNode;\n' +
    '    };\n' +
    '    /** @deprecated Use `factory.createParenthesizedType` or the factory supplied by your transformation context instead. */\n' +
    '    const createParenthesizedType: (type: TypeNode) => ParenthesizedTypeNode;\n' +
    '    /** @deprecated Use `factory.updateParenthesizedType` or the factory supplied by your transformation context instead. */\n' +
    '    const updateParenthesizedType: (node: ParenthesizedTypeNode, type: TypeNode) => ParenthesizedTypeNode;\n' +
    '    /** @deprecated Use `factory.createThisTypeNode` or the factory supplied by your transformation context instead. */\n' +
    '    const createThisTypeNode: () => ThisTypeNode;\n' +
    '    /** @deprecated Use `factory.updateTypeOperatorNode` or the factory supplied by your transformation context instead. */\n' +
    '    const updateTypeOperatorNode: (node: TypeOperatorNode, type: TypeNode) => TypeOperatorNode;\n' +
    '    /** @deprecated Use `factory.createIndexedAccessTypeNode` or the factory supplied by your transformation context instead. */\n' +
    '    const createIndexedAccessTypeNode: (objectType: TypeNode, indexType: TypeNode) => IndexedAccessTypeNode;\n' +
    '    /** @deprecated Use `factory.updateIndexedAccessTypeNode` or the factory supplied by your transformation context instead. */\n' +
    '    const updateIndexedAccessTypeNode: (node: IndexedAccessTypeNode, objectType: TypeNode, indexType: TypeNode) => IndexedAccessTypeNode;\n' +
    '    /** @deprecated Use `factory.createMappedTypeNode` or the factory supplied by your transformation context instead. */\n' +
    '    const createMappedTypeNode: (readonlyToken: ReadonlyKeyword | PlusToken | MinusToken | undefined, typeParameter: TypeParameterDeclaration, nameType: TypeNode | undefined, questionToken: QuestionToken | PlusToken | MinusToken | undefined, type: TypeNode | undefined, members: NodeArray<TypeElement> | undefined) => MappedTypeNode;\n' +
    '    /** @deprecated Use `factory.updateMappedTypeNode` or the factory supplied by your transformation context instead. */\n' +
    '    const updateMappedTypeNode: (node: MappedTypeNode, readonlyToken: ReadonlyKeyword | PlusToken | MinusToken | undefined, typeParameter: TypeParameterDeclaration, nameType: TypeNode | undefined, questionToken: QuestionToken | PlusToken | MinusToken | undefined, type: TypeNode | undefined, members: NodeArray<TypeElement> | undefined) => MappedTypeNode;\n' +
    '    /** @deprecated Use `factory.createLiteralTypeNode` or the factory supplied by your transformation context instead. */\n' +
    '    const createLiteralTypeNode: (literal: LiteralExpression | BooleanLiteral | PrefixUnaryExpression | NullLiteral) => LiteralTypeNode;\n' +
    '    /** @deprecated Use `factory.updateLiteralTypeNode` or the factory supplied by your transformation context instead. */\n' +
    '    const updateLiteralTypeNode: (node: LiteralTypeNode, literal: LiteralExpression | BooleanLiteral | PrefixUnaryExpression | NullLiteral) => LiteralTypeNode;\n' +
    '    /** @deprecated Use `factory.createObjectBindingPattern` or the factory supplied by your transformation context instead. */\n' +
    '    const createObjectBindingPattern: (elements: readonly BindingElement[]) => ObjectBindingPattern;\n' +
    '    /** @deprecated Use `factory.updateObjectBindingPattern` or the factory supplied by your transformation context instead. */\n' +
    '    const updateObjectBindingPattern: (node: ObjectBindingPattern, elements: readonly BindingElement[]) => ObjectBindingPattern;\n' +
    '    /** @deprecated Use `factory.createArrayBindingPattern` or the factory supplied by your transformation context instead. */\n' +
    '    const createArrayBindingPattern: (elements: readonly ArrayBindingElement[]) => ArrayBindingPattern;\n' +
    '    /** @deprecated Use `factory.updateArrayBindingPattern` or the factory supplied by your transformation context instead. */\n' +
    '    const updateArrayBindingPattern: (node: ArrayBindingPattern, elements: readonly ArrayBindingElement[]) => ArrayBindingPattern;\n' +
    '    /** @deprecated Use `factory.createBindingElement` or the factory supplied by your transformation context instead. */\n' +
    '    const createBindingElement: (dotDotDotToken: DotDotDotToken | undefined, propertyName: string | PropertyName | undefined, name: string | BindingName, initializer?: Expression | undefined) => BindingElement;\n' +
    '    /** @deprecated Use `factory.updateBindingElement` or the factory supplied by your transformation context instead. */\n' +
    '    const updateBindingElement: (node: BindingElement, dotDotDotToken: DotDotDotToken | undefined, propertyName: PropertyName | undefined, name: BindingName, initializer: Expression | undefined) => BindingElement;\n' +
    '    /** @deprecated Use `factory.createArrayLiteralExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const createArrayLiteral: (elements?: readonly Expression[] | undefined, multiLine?: boolean | undefined) => ArrayLiteralExpression;\n' +
    '    /** @deprecated Use `factory.updateArrayLiteralExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const updateArrayLiteral: (node: ArrayLiteralExpression, elements: readonly Expression[]) => ArrayLiteralExpression;\n' +
    '    /** @deprecated Use `factory.createObjectLiteralExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const createObjectLiteral: (properties?: readonly ObjectLiteralElementLike[] | undefined, multiLine?: boolean | undefined) => ObjectLiteralExpression;\n' +
    '    /** @deprecated Use `factory.updateObjectLiteralExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const updateObjectLiteral: (node: ObjectLiteralExpression, properties: readonly ObjectLiteralElementLike[]) => ObjectLiteralExpression;\n' +
    '    /** @deprecated Use `factory.createPropertyAccessExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const createPropertyAccess: (expression: Expression, name: string | MemberName) => PropertyAccessExpression;\n' +
    '    /** @deprecated Use `factory.updatePropertyAccessExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const updatePropertyAccess: (node: PropertyAccessExpression, expression: Expression, name: MemberName) => PropertyAccessExpression;\n' +
    '    /** @deprecated Use `factory.createPropertyAccessChain` or the factory supplied by your transformation context instead. */\n' +
    '    const createPropertyAccessChain: (expression: Expression, questionDotToken: QuestionDotToken | undefined, name: string | MemberName) => PropertyAccessChain;\n' +
    '    /** @deprecated Use `factory.updatePropertyAccessChain` or the factory supplied by your transformation context instead. */\n' +
    '    const updatePropertyAccessChain: (node: PropertyAccessChain, expression: Expression, questionDotToken: QuestionDotToken | undefined, name: MemberName) => PropertyAccessChain;\n' +
    '    /** @deprecated Use `factory.createElementAccessExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const createElementAccess: (expression: Expression, index: number | Expression) => ElementAccessExpression;\n' +
    '    /** @deprecated Use `factory.updateElementAccessExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const updateElementAccess: (node: ElementAccessExpression, expression: Expression, argumentExpression: Expression) => ElementAccessExpression;\n' +
    '    /** @deprecated Use `factory.createElementAccessChain` or the factory supplied by your transformation context instead. */\n' +
    '    const createElementAccessChain: (expression: Expression, questionDotToken: QuestionDotToken | undefined, index: number | Expression) => ElementAccessChain;\n' +
    '    /** @deprecated Use `factory.updateElementAccessChain` or the factory supplied by your transformation context instead. */\n' +
    '    const updateElementAccessChain: (node: ElementAccessChain, expression: Expression, questionDotToken: QuestionDotToken | undefined, argumentExpression: Expression) => ElementAccessChain;\n' +
    '    /** @deprecated Use `factory.createCallExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const createCall: (expression: Expression, typeArguments: readonly TypeNode[] | undefined, argumentsArray: readonly Expression[] | undefined) => CallExpression;\n' +
    '    /** @deprecated Use `factory.updateCallExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const updateCall: (node: CallExpression, expression: Expression, typeArguments: readonly TypeNode[] | undefined, argumentsArray: readonly Expression[]) => CallExpression;\n' +
    '    /** @deprecated Use `factory.createCallChain` or the factory supplied by your transformation context instead. */\n' +
    '    const createCallChain: (expression: Expression, questionDotToken: QuestionDotToken | undefined, typeArguments: readonly TypeNode[] | undefined, argumentsArray: readonly Expression[] | undefined) => CallChain;\n' +
    '    /** @deprecated Use `factory.updateCallChain` or the factory supplied by your transformation context instead. */\n' +
    '    const updateCallChain: (node: CallChain, expression: Expression, questionDotToken: QuestionDotToken | undefined, typeArguments: readonly TypeNode[] | undefined, argumentsArray: readonly Expression[]) => CallChain;\n' +
    '    /** @deprecated Use `factory.createNewExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const createNew: (expression: Expression, typeArguments: readonly TypeNode[] | undefined, argumentsArray: readonly Expression[] | undefined) => NewExpression;\n' +
    '    /** @deprecated Use `factory.updateNewExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const updateNew: (node: NewExpression, expression: Expression, typeArguments: readonly TypeNode[] | undefined, argumentsArray: readonly Expression[] | undefined) => NewExpression;\n' +
    '    /** @deprecated Use `factory.createTypeAssertion` or the factory supplied by your transformation context instead. */\n' +
    '    const createTypeAssertion: (type: TypeNode, expression: Expression) => TypeAssertion;\n' +
    '    /** @deprecated Use `factory.updateTypeAssertion` or the factory supplied by your transformation context instead. */\n' +
    '    const updateTypeAssertion: (node: TypeAssertion, type: TypeNode, expression: Expression) => TypeAssertion;\n' +
    '    /** @deprecated Use `factory.createParenthesizedExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const createParen: (expression: Expression) => ParenthesizedExpression;\n' +
    '    /** @deprecated Use `factory.updateParenthesizedExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const updateParen: (node: ParenthesizedExpression, expression: Expression) => ParenthesizedExpression;\n' +
    '    /** @deprecated Use `factory.createFunctionExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const createFunctionExpression: (modifiers: readonly Modifier[] | undefined, asteriskToken: AsteriskToken | undefined, name: string | Identifier | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[] | undefined, type: TypeNode | undefined, body: Block) => FunctionExpression;\n' +
    '    /** @deprecated Use `factory.updateFunctionExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const updateFunctionExpression: (node: FunctionExpression, modifiers: readonly Modifier[] | undefined, asteriskToken: AsteriskToken | undefined, name: Identifier | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, body: Block) => FunctionExpression;\n' +
    '    /** @deprecated Use `factory.createDeleteExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const createDelete: (expression: Expression) => DeleteExpression;\n' +
    '    /** @deprecated Use `factory.updateDeleteExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const updateDelete: (node: DeleteExpression, expression: Expression) => DeleteExpression;\n' +
    '    /** @deprecated Use `factory.createTypeOfExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const createTypeOf: (expression: Expression) => TypeOfExpression;\n' +
    '    /** @deprecated Use `factory.updateTypeOfExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const updateTypeOf: (node: TypeOfExpression, expression: Expression) => TypeOfExpression;\n' +
    '    /** @deprecated Use `factory.createVoidExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const createVoid: (expression: Expression) => VoidExpression;\n' +
    '    /** @deprecated Use `factory.updateVoidExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const updateVoid: (node: VoidExpression, expression: Expression) => VoidExpression;\n' +
    '    /** @deprecated Use `factory.createAwaitExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const createAwait: (expression: Expression) => AwaitExpression;\n' +
    '    /** @deprecated Use `factory.updateAwaitExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const updateAwait: (node: AwaitExpression, expression: Expression) => AwaitExpression;\n' +
    '    /** @deprecated Use `factory.createPrefixExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const createPrefix: (operator: PrefixUnaryOperator, operand: Expression) => PrefixUnaryExpression;\n' +
    '    /** @deprecated Use `factory.updatePrefixExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const updatePrefix: (node: PrefixUnaryExpression, operand: Expression) => PrefixUnaryExpression;\n' +
    '    /** @deprecated Use `factory.createPostfixUnaryExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const createPostfix: (operand: Expression, operator: PostfixUnaryOperator) => PostfixUnaryExpression;\n' +
    '    /** @deprecated Use `factory.updatePostfixUnaryExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const updatePostfix: (node: PostfixUnaryExpression, operand: Expression) => PostfixUnaryExpression;\n' +
    '    /** @deprecated Use `factory.createBinaryExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const createBinary: (left: Expression, operator: BinaryOperator | BinaryOperatorToken, right: Expression) => BinaryExpression;\n' +
    '    /** @deprecated Use `factory.updateConditionalExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const updateConditional: (node: ConditionalExpression, condition: Expression, questionToken: QuestionToken, whenTrue: Expression, colonToken: ColonToken, whenFalse: Expression) => ConditionalExpression;\n' +
    '    /** @deprecated Use `factory.createTemplateExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const createTemplateExpression: (head: TemplateHead, templateSpans: readonly TemplateSpan[]) => TemplateExpression;\n' +
    '    /** @deprecated Use `factory.updateTemplateExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const updateTemplateExpression: (node: TemplateExpression, head: TemplateHead, templateSpans: readonly TemplateSpan[]) => TemplateExpression;\n' +
    '    /** @deprecated Use `factory.createTemplateHead` or the factory supplied by your transformation context instead. */\n' +
    '    const createTemplateHead: {\n' +
    '        (text: string, rawText?: string | undefined, templateFlags?: TokenFlags | undefined): TemplateHead;\n' +
    '        (text: string | undefined, rawText: string, templateFlags?: TokenFlags | undefined): TemplateHead;\n' +
    '    };\n' +
    '    /** @deprecated Use `factory.createTemplateMiddle` or the factory supplied by your transformation context instead. */\n' +
    '    const createTemplateMiddle: {\n' +
    '        (text: string, rawText?: string | undefined, templateFlags?: TokenFlags | undefined): TemplateMiddle;\n' +
    '        (text: string | undefined, rawText: string, templateFlags?: TokenFlags | undefined): TemplateMiddle;\n' +
    '    };\n' +
    '    /** @deprecated Use `factory.createTemplateTail` or the factory supplied by your transformation context instead. */\n' +
    '    const createTemplateTail: {\n' +
    '        (text: string, rawText?: string | undefined, templateFlags?: TokenFlags | undefined): TemplateTail;\n' +
    '        (text: string | undefined, rawText: string, templateFlags?: TokenFlags | undefined): TemplateTail;\n' +
    '    };\n' +
    '    /** @deprecated Use `factory.createNoSubstitutionTemplateLiteral` or the factory supplied by your transformation context instead. */\n' +
    '    const createNoSubstitutionTemplateLiteral: {\n' +
    '        (text: string, rawText?: string | undefined): NoSubstitutionTemplateLiteral;\n' +
    '        (text: string | undefined, rawText: string): NoSubstitutionTemplateLiteral;\n' +
    '    };\n' +
    '    /** @deprecated Use `factory.updateYieldExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const updateYield: (node: YieldExpression, asteriskToken: AsteriskToken | undefined, expression: Expression | undefined) => YieldExpression;\n' +
    '    /** @deprecated Use `factory.createSpreadExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const createSpread: (expression: Expression) => SpreadElement;\n' +
    '    /** @deprecated Use `factory.updateSpreadExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const updateSpread: (node: SpreadElement, expression: Expression) => SpreadElement;\n' +
    '    /** @deprecated Use `factory.createOmittedExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const createOmittedExpression: () => OmittedExpression;\n' +
    '    /** @deprecated Use `factory.createAsExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const createAsExpression: (expression: Expression, type: TypeNode) => AsExpression;\n' +
    '    /** @deprecated Use `factory.updateAsExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const updateAsExpression: (node: AsExpression, expression: Expression, type: TypeNode) => AsExpression;\n' +
    '    /** @deprecated Use `factory.createNonNullExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const createNonNullExpression: (expression: Expression) => NonNullExpression;\n' +
    '    /** @deprecated Use `factory.updateNonNullExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const updateNonNullExpression: (node: NonNullExpression, expression: Expression) => NonNullExpression;\n' +
    '    /** @deprecated Use `factory.createNonNullChain` or the factory supplied by your transformation context instead. */\n' +
    '    const createNonNullChain: (expression: Expression) => NonNullChain;\n' +
    '    /** @deprecated Use `factory.updateNonNullChain` or the factory supplied by your transformation context instead. */\n' +
    '    const updateNonNullChain: (node: NonNullChain, expression: Expression) => NonNullChain;\n' +
    '    /** @deprecated Use `factory.createMetaProperty` or the factory supplied by your transformation context instead. */\n' +
    '    const createMetaProperty: (keywordToken: SyntaxKind.ImportKeyword | SyntaxKind.NewKeyword, name: Identifier) => MetaProperty;\n' +
    '    /** @deprecated Use `factory.updateMetaProperty` or the factory supplied by your transformation context instead. */\n' +
    '    const updateMetaProperty: (node: MetaProperty, name: Identifier) => MetaProperty;\n' +
    '    /** @deprecated Use `factory.createTemplateSpan` or the factory supplied by your transformation context instead. */\n' +
    '    const createTemplateSpan: (expression: Expression, literal: TemplateMiddle | TemplateTail) => TemplateSpan;\n' +
    '    /** @deprecated Use `factory.updateTemplateSpan` or the factory supplied by your transformation context instead. */\n' +
    '    const updateTemplateSpan: (node: TemplateSpan, expression: Expression, literal: TemplateMiddle | TemplateTail) => TemplateSpan;\n' +
    '    /** @deprecated Use `factory.createSemicolonClassElement` or the factory supplied by your transformation context instead. */\n' +
    '    const createSemicolonClassElement: () => SemicolonClassElement;\n' +
    '    /** @deprecated Use `factory.createBlock` or the factory supplied by your transformation context instead. */\n' +
    '    const createBlock: (statements: readonly Statement[], multiLine?: boolean | undefined) => Block;\n' +
    '    /** @deprecated Use `factory.updateBlock` or the factory supplied by your transformation context instead. */\n' +
    '    const updateBlock: (node: Block, statements: readonly Statement[]) => Block;\n' +
    '    /** @deprecated Use `factory.createVariableStatement` or the factory supplied by your transformation context instead. */\n' +
    '    const createVariableStatement: (modifiers: readonly Modifier[] | undefined, declarationList: VariableDeclarationList | readonly VariableDeclaration[]) => VariableStatement;\n' +
    '    /** @deprecated Use `factory.updateVariableStatement` or the factory supplied by your transformation context instead. */\n' +
    '    const updateVariableStatement: (node: VariableStatement, modifiers: readonly Modifier[] | undefined, declarationList: VariableDeclarationList) => VariableStatement;\n' +
    '    /** @deprecated Use `factory.createEmptyStatement` or the factory supplied by your transformation context instead. */\n' +
    '    const createEmptyStatement: () => EmptyStatement;\n' +
    '    /** @deprecated Use `factory.createExpressionStatement` or the factory supplied by your transformation context instead. */\n' +
    '    const createExpressionStatement: (expression: Expression) => ExpressionStatement;\n' +
    '    /** @deprecated Use `factory.updateExpressionStatement` or the factory supplied by your transformation context instead. */\n' +
    '    const updateExpressionStatement: (node: ExpressionStatement, expression: Expression) => ExpressionStatement;\n' +
    '    /** @deprecated Use `factory.createExpressionStatement` or the factory supplied by your transformation context instead. */\n' +
    '    const createStatement: (expression: Expression) => ExpressionStatement;\n' +
    '    /** @deprecated Use `factory.updateExpressionStatement` or the factory supplied by your transformation context instead. */\n' +
    '    const updateStatement: (node: ExpressionStatement, expression: Expression) => ExpressionStatement;\n' +
    '    /** @deprecated Use `factory.createIfStatement` or the factory supplied by your transformation context instead. */\n' +
    '    const createIf: (expression: Expression, thenStatement: Statement, elseStatement?: Statement | undefined) => IfStatement;\n' +
    '    /** @deprecated Use `factory.updateIfStatement` or the factory supplied by your transformation context instead. */\n' +
    '    const updateIf: (node: IfStatement, expression: Expression, thenStatement: Statement, elseStatement: Statement | undefined) => IfStatement;\n' +
    '    /** @deprecated Use `factory.createDoStatement` or the factory supplied by your transformation context instead. */\n' +
    '    const createDo: (statement: Statement, expression: Expression) => DoStatement;\n' +
    '    /** @deprecated Use `factory.updateDoStatement` or the factory supplied by your transformation context instead. */\n' +
    '    const updateDo: (node: DoStatement, statement: Statement, expression: Expression) => DoStatement;\n' +
    '    /** @deprecated Use `factory.createWhileStatement` or the factory supplied by your transformation context instead. */\n' +
    '    const createWhile: (expression: Expression, statement: Statement) => WhileStatement;\n' +
    '    /** @deprecated Use `factory.updateWhileStatement` or the factory supplied by your transformation context instead. */\n' +
    '    const updateWhile: (node: WhileStatement, expression: Expression, statement: Statement) => WhileStatement;\n' +
    '    /** @deprecated Use `factory.createForStatement` or the factory supplied by your transformation context instead. */\n' +
    '    const createFor: (initializer: ForInitializer | undefined, condition: Expression | undefined, incrementor: Expression | undefined, statement: Statement) => ForStatement;\n' +
    '    /** @deprecated Use `factory.updateForStatement` or the factory supplied by your transformation context instead. */\n' +
    '    const updateFor: (node: ForStatement, initializer: ForInitializer | undefined, condition: Expression | undefined, incrementor: Expression | undefined, statement: Statement) => ForStatement;\n' +
    '    /** @deprecated Use `factory.createForInStatement` or the factory supplied by your transformation context instead. */\n' +
    '    const createForIn: (initializer: ForInitializer, expression: Expression, statement: Statement) => ForInStatement;\n' +
    '    /** @deprecated Use `factory.updateForInStatement` or the factory supplied by your transformation context instead. */\n' +
    '    const updateForIn: (node: ForInStatement, initializer: ForInitializer, expression: Expression, statement: Statement) => ForInStatement;\n' +
    '    /** @deprecated Use `factory.createForOfStatement` or the factory supplied by your transformation context instead. */\n' +
    '    const createForOf: (awaitModifier: AwaitKeyword | undefined, initializer: ForInitializer, expression: Expression, statement: Statement) => ForOfStatement;\n' +
    '    /** @deprecated Use `factory.updateForOfStatement` or the factory supplied by your transformation context instead. */\n' +
    '    const updateForOf: (node: ForOfStatement, awaitModifier: AwaitKeyword | undefined, initializer: ForInitializer, expression: Expression, statement: Statement) => ForOfStatement;\n' +
    '    /** @deprecated Use `factory.createContinueStatement` or the factory supplied by your transformation context instead. */\n' +
    '    const createContinue: (label?: string | Identifier | undefined) => ContinueStatement;\n' +
    '    /** @deprecated Use `factory.updateContinueStatement` or the factory supplied by your transformation context instead. */\n' +
    '    const updateContinue: (node: ContinueStatement, label: Identifier | undefined) => ContinueStatement;\n' +
    '    /** @deprecated Use `factory.createBreakStatement` or the factory supplied by your transformation context instead. */\n' +
    '    const createBreak: (label?: string | Identifier | undefined) => BreakStatement;\n' +
    '    /** @deprecated Use `factory.updateBreakStatement` or the factory supplied by your transformation context instead. */\n' +
    '    const updateBreak: (node: BreakStatement, label: Identifier | undefined) => BreakStatement;\n' +
    '    /** @deprecated Use `factory.createReturnStatement` or the factory supplied by your transformation context instead. */\n' +
    '    const createReturn: (expression?: Expression | undefined) => ReturnStatement;\n' +
    '    /** @deprecated Use `factory.updateReturnStatement` or the factory supplied by your transformation context instead. */\n' +
    '    const updateReturn: (node: ReturnStatement, expression: Expression | undefined) => ReturnStatement;\n' +
    '    /** @deprecated Use `factory.createWithStatement` or the factory supplied by your transformation context instead. */\n' +
    '    const createWith: (expression: Expression, statement: Statement) => WithStatement;\n' +
    '    /** @deprecated Use `factory.updateWithStatement` or the factory supplied by your transformation context instead. */\n' +
    '    const updateWith: (node: WithStatement, expression: Expression, statement: Statement) => WithStatement;\n' +
    '    /** @deprecated Use `factory.createSwitchStatement` or the factory supplied by your transformation context instead. */\n' +
    '    const createSwitch: (expression: Expression, caseBlock: CaseBlock) => SwitchStatement;\n' +
    '    /** @deprecated Use `factory.updateSwitchStatement` or the factory supplied by your transformation context instead. */\n' +
    '    const updateSwitch: (node: SwitchStatement, expression: Expression, caseBlock: CaseBlock) => SwitchStatement;\n' +
    '    /** @deprecated Use `factory.createLabelStatement` or the factory supplied by your transformation context instead. */\n' +
    '    const createLabel: (label: string | Identifier, statement: Statement) => LabeledStatement;\n' +
    '    /** @deprecated Use `factory.updateLabelStatement` or the factory supplied by your transformation context instead. */\n' +
    '    const updateLabel: (node: LabeledStatement, label: Identifier, statement: Statement) => LabeledStatement;\n' +
    '    /** @deprecated Use `factory.createThrowStatement` or the factory supplied by your transformation context instead. */\n' +
    '    const createThrow: (expression: Expression) => ThrowStatement;\n' +
    '    /** @deprecated Use `factory.updateThrowStatement` or the factory supplied by your transformation context instead. */\n' +
    '    const updateThrow: (node: ThrowStatement, expression: Expression) => ThrowStatement;\n' +
    '    /** @deprecated Use `factory.createTryStatement` or the factory supplied by your transformation context instead. */\n' +
    '    const createTry: (tryBlock: Block, catchClause: CatchClause | undefined, finallyBlock: Block | undefined) => TryStatement;\n' +
    '    /** @deprecated Use `factory.updateTryStatement` or the factory supplied by your transformation context instead. */\n' +
    '    const updateTry: (node: TryStatement, tryBlock: Block, catchClause: CatchClause | undefined, finallyBlock: Block | undefined) => TryStatement;\n' +
    '    /** @deprecated Use `factory.createDebuggerStatement` or the factory supplied by your transformation context instead. */\n' +
    '    const createDebuggerStatement: () => DebuggerStatement;\n' +
    '    /** @deprecated Use `factory.createVariableDeclarationList` or the factory supplied by your transformation context instead. */\n' +
    '    const createVariableDeclarationList: (declarations: readonly VariableDeclaration[], flags?: NodeFlags | undefined) => VariableDeclarationList;\n' +
    '    /** @deprecated Use `factory.updateVariableDeclarationList` or the factory supplied by your transformation context instead. */\n' +
    '    const updateVariableDeclarationList: (node: VariableDeclarationList, declarations: readonly VariableDeclaration[]) => VariableDeclarationList;\n' +
    '    /** @deprecated Use `factory.createFunctionDeclaration` or the factory supplied by your transformation context instead. */\n' +
    '    const createFunctionDeclaration: (decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, asteriskToken: AsteriskToken | undefined, name: string | Identifier | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, body: Block | undefined) => FunctionDeclaration;\n' +
    '    /** @deprecated Use `factory.updateFunctionDeclaration` or the factory supplied by your transformation context instead. */\n' +
    '    const updateFunctionDeclaration: (node: FunctionDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, asteriskToken: AsteriskToken | undefined, name: Identifier | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, body: Block | undefined) => FunctionDeclaration;\n' +
    '    /** @deprecated Use `factory.createClassDeclaration` or the factory supplied by your transformation context instead. */\n' +
    '    const createClassDeclaration: (decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: string | Identifier | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, heritageClauses: readonly HeritageClause[] | undefined, members: readonly ClassElement[]) => ClassDeclaration;\n' +
    '    /** @deprecated Use `factory.updateClassDeclaration` or the factory supplied by your transformation context instead. */\n' +
    '    const updateClassDeclaration: (node: ClassDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: Identifier | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, heritageClauses: readonly HeritageClause[] | undefined, members: readonly ClassElement[]) => ClassDeclaration;\n' +
    '    /** @deprecated Use `factory.createInterfaceDeclaration` or the factory supplied by your transformation context instead. */\n' +
    '    const createInterfaceDeclaration: (decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: string | Identifier, typeParameters: readonly TypeParameterDeclaration[] | undefined, heritageClauses: readonly HeritageClause[] | undefined, members: readonly TypeElement[]) => InterfaceDeclaration;\n' +
    '    /** @deprecated Use `factory.updateInterfaceDeclaration` or the factory supplied by your transformation context instead. */\n' +
    '    const updateInterfaceDeclaration: (node: InterfaceDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: Identifier, typeParameters: readonly TypeParameterDeclaration[] | undefined, heritageClauses: readonly HeritageClause[] | undefined, members: readonly TypeElement[]) => InterfaceDeclaration;\n' +
    '    /** @deprecated Use `factory.createTypeAliasDeclaration` or the factory supplied by your transformation context instead. */\n' +
    '    const createTypeAliasDeclaration: (decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: string | Identifier, typeParameters: readonly TypeParameterDeclaration[] | undefined, type: TypeNode) => TypeAliasDeclaration;\n' +
    '    /** @deprecated Use `factory.updateTypeAliasDeclaration` or the factory supplied by your transformation context instead. */\n' +
    '    const updateTypeAliasDeclaration: (node: TypeAliasDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: Identifier, typeParameters: readonly TypeParameterDeclaration[] | undefined, type: TypeNode) => TypeAliasDeclaration;\n' +
    '    /** @deprecated Use `factory.createEnumDeclaration` or the factory supplied by your transformation context instead. */\n' +
    '    const createEnumDeclaration: (decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: string | Identifier, members: readonly EnumMember[]) => EnumDeclaration;\n' +
    '    /** @deprecated Use `factory.updateEnumDeclaration` or the factory supplied by your transformation context instead. */\n' +
    '    const updateEnumDeclaration: (node: EnumDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: Identifier, members: readonly EnumMember[]) => EnumDeclaration;\n' +
    '    /** @deprecated Use `factory.createModuleDeclaration` or the factory supplied by your transformation context instead. */\n' +
    '    const createModuleDeclaration: (decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: ModuleName, body: ModuleBody | undefined, flags?: NodeFlags | undefined) => ModuleDeclaration;\n' +
    '    /** @deprecated Use `factory.updateModuleDeclaration` or the factory supplied by your transformation context instead. */\n' +
    '    const updateModuleDeclaration: (node: ModuleDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, name: ModuleName, body: ModuleBody | undefined) => ModuleDeclaration;\n' +
    '    /** @deprecated Use `factory.createModuleBlock` or the factory supplied by your transformation context instead. */\n' +
    '    const createModuleBlock: (statements: readonly Statement[]) => ModuleBlock;\n' +
    '    /** @deprecated Use `factory.updateModuleBlock` or the factory supplied by your transformation context instead. */\n' +
    '    const updateModuleBlock: (node: ModuleBlock, statements: readonly Statement[]) => ModuleBlock;\n' +
    '    /** @deprecated Use `factory.createCaseBlock` or the factory supplied by your transformation context instead. */\n' +
    '    const createCaseBlock: (clauses: readonly CaseOrDefaultClause[]) => CaseBlock;\n' +
    '    /** @deprecated Use `factory.updateCaseBlock` or the factory supplied by your transformation context instead. */\n' +
    '    const updateCaseBlock: (node: CaseBlock, clauses: readonly CaseOrDefaultClause[]) => CaseBlock;\n' +
    '    /** @deprecated Use `factory.createNamespaceExportDeclaration` or the factory supplied by your transformation context instead. */\n' +
    '    const createNamespaceExportDeclaration: (name: string | Identifier) => NamespaceExportDeclaration;\n' +
    '    /** @deprecated Use `factory.updateNamespaceExportDeclaration` or the factory supplied by your transformation context instead. */\n' +
    '    const updateNamespaceExportDeclaration: (node: NamespaceExportDeclaration, name: Identifier) => NamespaceExportDeclaration;\n' +
    '    /** @deprecated Use `factory.createImportEqualsDeclaration` or the factory supplied by your transformation context instead. */\n' +
    '    const createImportEqualsDeclaration: (decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, isTypeOnly: boolean, name: string | Identifier, moduleReference: ModuleReference) => ImportEqualsDeclaration;\n' +
    '    /** @deprecated Use `factory.updateImportEqualsDeclaration` or the factory supplied by your transformation context instead. */\n' +
    '    const updateImportEqualsDeclaration: (node: ImportEqualsDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, isTypeOnly: boolean, name: Identifier, moduleReference: ModuleReference) => ImportEqualsDeclaration;\n' +
    '    /** @deprecated Use `factory.createImportDeclaration` or the factory supplied by your transformation context instead. */\n' +
    '    const createImportDeclaration: (decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, importClause: ImportClause | undefined, moduleSpecifier: Expression, assertClause?: AssertClause | undefined) => ImportDeclaration;\n' +
    '    /** @deprecated Use `factory.updateImportDeclaration` or the factory supplied by your transformation context instead. */\n' +
    '    const updateImportDeclaration: (node: ImportDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, importClause: ImportClause | undefined, moduleSpecifier: Expression, assertClause: AssertClause | undefined) => ImportDeclaration;\n' +
    '    /** @deprecated Use `factory.createNamespaceImport` or the factory supplied by your transformation context instead. */\n' +
    '    const createNamespaceImport: (name: Identifier) => NamespaceImport;\n' +
    '    /** @deprecated Use `factory.updateNamespaceImport` or the factory supplied by your transformation context instead. */\n' +
    '    const updateNamespaceImport: (node: NamespaceImport, name: Identifier) => NamespaceImport;\n' +
    '    /** @deprecated Use `factory.createNamedImports` or the factory supplied by your transformation context instead. */\n' +
    '    const createNamedImports: (elements: readonly ImportSpecifier[]) => NamedImports;\n' +
    '    /** @deprecated Use `factory.updateNamedImports` or the factory supplied by your transformation context instead. */\n' +
    '    const updateNamedImports: (node: NamedImports, elements: readonly ImportSpecifier[]) => NamedImports;\n' +
    '    /** @deprecated Use `factory.createImportSpecifier` or the factory supplied by your transformation context instead. */\n' +
    '    const createImportSpecifier: (isTypeOnly: boolean, propertyName: Identifier | undefined, name: Identifier) => ImportSpecifier;\n' +
    '    /** @deprecated Use `factory.updateImportSpecifier` or the factory supplied by your transformation context instead. */\n' +
    '    const updateImportSpecifier: (node: ImportSpecifier, isTypeOnly: boolean, propertyName: Identifier | undefined, name: Identifier) => ImportSpecifier;\n' +
    '    /** @deprecated Use `factory.createExportAssignment` or the factory supplied by your transformation context instead. */\n' +
    '    const createExportAssignment: (decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, isExportEquals: boolean | undefined, expression: Expression) => ExportAssignment;\n' +
    '    /** @deprecated Use `factory.updateExportAssignment` or the factory supplied by your transformation context instead. */\n' +
    '    const updateExportAssignment: (node: ExportAssignment, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, expression: Expression) => ExportAssignment;\n' +
    '    /** @deprecated Use `factory.createNamedExports` or the factory supplied by your transformation context instead. */\n' +
    '    const createNamedExports: (elements: readonly ExportSpecifier[]) => NamedExports;\n' +
    '    /** @deprecated Use `factory.updateNamedExports` or the factory supplied by your transformation context instead. */\n' +
    '    const updateNamedExports: (node: NamedExports, elements: readonly ExportSpecifier[]) => NamedExports;\n' +
    '    /** @deprecated Use `factory.createExportSpecifier` or the factory supplied by your transformation context instead. */\n' +
    '    const createExportSpecifier: (isTypeOnly: boolean, propertyName: string | Identifier | undefined, name: string | Identifier) => ExportSpecifier;\n' +
    '    /** @deprecated Use `factory.updateExportSpecifier` or the factory supplied by your transformation context instead. */\n' +
    '    const updateExportSpecifier: (node: ExportSpecifier, isTypeOnly: boolean, propertyName: Identifier | undefined, name: Identifier) => ExportSpecifier;\n' +
    '    /** @deprecated Use `factory.createExternalModuleReference` or the factory supplied by your transformation context instead. */\n' +
    '    const createExternalModuleReference: (expression: Expression) => ExternalModuleReference;\n' +
    '    /** @deprecated Use `factory.updateExternalModuleReference` or the factory supplied by your transformation context instead. */\n' +
    '    const updateExternalModuleReference: (node: ExternalModuleReference, expression: Expression) => ExternalModuleReference;\n' +
    '    /** @deprecated Use `factory.createJSDocTypeExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const createJSDocTypeExpression: (type: TypeNode) => JSDocTypeExpression;\n' +
    '    /** @deprecated Use `factory.createJSDocTypeTag` or the factory supplied by your transformation context instead. */\n' +
    '    const createJSDocTypeTag: (tagName: Identifier | undefined, typeExpression: JSDocTypeExpression, comment?: string | NodeArray<JSDocComment> | undefined) => JSDocTypeTag;\n' +
    '    /** @deprecated Use `factory.createJSDocReturnTag` or the factory supplied by your transformation context instead. */\n' +
    '    const createJSDocReturnTag: (tagName: Identifier | undefined, typeExpression?: JSDocTypeExpression | undefined, comment?: string | NodeArray<JSDocComment> | undefined) => JSDocReturnTag;\n' +
    '    /** @deprecated Use `factory.createJSDocThisTag` or the factory supplied by your transformation context instead. */\n' +
    '    const createJSDocThisTag: (tagName: Identifier | undefined, typeExpression: JSDocTypeExpression, comment?: string | NodeArray<JSDocComment> | undefined) => JSDocThisTag;\n' +
    '    /** @deprecated Use `factory.createJSDocComment` or the factory supplied by your transformation context instead. */\n' +
    '    const createJSDocComment: (comment?: string | NodeArray<JSDocComment> | undefined, tags?: readonly JSDocTag[] | undefined) => JSDoc;\n' +
    '    /** @deprecated Use `factory.createJSDocParameterTag` or the factory supplied by your transformation context instead. */\n' +
    '    const createJSDocParameterTag: (tagName: Identifier | undefined, name: EntityName, isBracketed: boolean, typeExpression?: JSDocTypeExpression | undefined, isNameFirst?: boolean | undefined, comment?: string | NodeArray<JSDocComment> | undefined) => JSDocParameterTag;\n' +
    '    /** @deprecated Use `factory.createJSDocClassTag` or the factory supplied by your transformation context instead. */\n' +
    '    const createJSDocClassTag: (tagName: Identifier | undefined, comment?: string | NodeArray<JSDocComment> | undefined) => JSDocClassTag;\n' +
    '    /** @deprecated Use `factory.createJSDocAugmentsTag` or the factory supplied by your transformation context instead. */\n' +
    '    const createJSDocAugmentsTag: (tagName: Identifier | undefined, className: ExpressionWithTypeArguments & {\n' +
    '        readonly expression: Identifier | PropertyAccessEntityNameExpression;\n' +
    '    }, comment?: string | NodeArray<JSDocComment> | undefined) => JSDocAugmentsTag;\n' +
    '    /** @deprecated Use `factory.createJSDocEnumTag` or the factory supplied by your transformation context instead. */\n' +
    '    const createJSDocEnumTag: (tagName: Identifier | undefined, typeExpression: JSDocTypeExpression, comment?: string | NodeArray<JSDocComment> | undefined) => JSDocEnumTag;\n' +
    '    /** @deprecated Use `factory.createJSDocTemplateTag` or the factory supplied by your transformation context instead. */\n' +
    '    const createJSDocTemplateTag: (tagName: Identifier | undefined, constraint: JSDocTypeExpression | undefined, typeParameters: readonly TypeParameterDeclaration[], comment?: string | NodeArray<JSDocComment> | undefined) => JSDocTemplateTag;\n' +
    '    /** @deprecated Use `factory.createJSDocTypedefTag` or the factory supplied by your transformation context instead. */\n' +
    '    const createJSDocTypedefTag: (tagName: Identifier | undefined, typeExpression?: JSDocTypeLiteral | JSDocTypeExpression | undefined, fullName?: Identifier | JSDocNamespaceDeclaration | undefined, comment?: string | NodeArray<JSDocComment> | undefined) => JSDocTypedefTag;\n' +
    '    /** @deprecated Use `factory.createJSDocCallbackTag` or the factory supplied by your transformation context instead. */\n' +
    '    const createJSDocCallbackTag: (tagName: Identifier | undefined, typeExpression: JSDocSignature, fullName?: Identifier | JSDocNamespaceDeclaration | undefined, comment?: string | NodeArray<JSDocComment> | undefined) => JSDocCallbackTag;\n' +
    '    /** @deprecated Use `factory.createJSDocSignature` or the factory supplied by your transformation context instead. */\n' +
    '    const createJSDocSignature: (typeParameters: readonly JSDocTemplateTag[] | undefined, parameters: readonly JSDocParameterTag[], type?: JSDocReturnTag | undefined) => JSDocSignature;\n' +
    '    /** @deprecated Use `factory.createJSDocPropertyTag` or the factory supplied by your transformation context instead. */\n' +
    '    const createJSDocPropertyTag: (tagName: Identifier | undefined, name: EntityName, isBracketed: boolean, typeExpression?: JSDocTypeExpression | undefined, isNameFirst?: boolean | undefined, comment?: string | NodeArray<JSDocComment> | undefined) => JSDocPropertyTag;\n' +
    '    /** @deprecated Use `factory.createJSDocTypeLiteral` or the factory supplied by your transformation context instead. */\n' +
    '    const createJSDocTypeLiteral: (jsDocPropertyTags?: readonly JSDocPropertyLikeTag[] | undefined, isArrayType?: boolean | undefined) => JSDocTypeLiteral;\n' +
    '    /** @deprecated Use `factory.createJSDocImplementsTag` or the factory supplied by your transformation context instead. */\n' +
    '    const createJSDocImplementsTag: (tagName: Identifier | undefined, className: ExpressionWithTypeArguments & {\n' +
    '        readonly expression: Identifier | PropertyAccessEntityNameExpression;\n' +
    '    }, comment?: string | NodeArray<JSDocComment> | undefined) => JSDocImplementsTag;\n' +
    '    /** @deprecated Use `factory.createJSDocAuthorTag` or the factory supplied by your transformation context instead. */\n' +
    '    const createJSDocAuthorTag: (tagName: Identifier | undefined, comment?: string | NodeArray<JSDocComment> | undefined) => JSDocAuthorTag;\n' +
    '    /** @deprecated Use `factory.createJSDocPublicTag` or the factory supplied by your transformation context instead. */\n' +
    '    const createJSDocPublicTag: (tagName: Identifier | undefined, comment?: string | NodeArray<JSDocComment> | undefined) => JSDocPublicTag;\n' +
    '    /** @deprecated Use `factory.createJSDocPrivateTag` or the factory supplied by your transformation context instead. */\n' +
    '    const createJSDocPrivateTag: (tagName: Identifier | undefined, comment?: string | NodeArray<JSDocComment> | undefined) => JSDocPrivateTag;\n' +
    '    /** @deprecated Use `factory.createJSDocProtectedTag` or the factory supplied by your transformation context instead. */\n' +
    '    const createJSDocProtectedTag: (tagName: Identifier | undefined, comment?: string | NodeArray<JSDocComment> | undefined) => JSDocProtectedTag;\n' +
    '    /** @deprecated Use `factory.createJSDocReadonlyTag` or the factory supplied by your transformation context instead. */\n' +
    '    const createJSDocReadonlyTag: (tagName: Identifier | undefined, comment?: string | NodeArray<JSDocComment> | undefined) => JSDocReadonlyTag;\n' +
    '    /** @deprecated Use `factory.createJSDocUnknownTag` or the factory supplied by your transformation context instead. */\n' +
    '    const createJSDocTag: (tagName: Identifier, comment?: string | NodeArray<JSDocComment> | undefined) => JSDocUnknownTag;\n' +
    '    /** @deprecated Use `factory.createJsxElement` or the factory supplied by your transformation context instead. */\n' +
    '    const createJsxElement: (openingElement: JsxOpeningElement, children: readonly JsxChild[], closingElement: JsxClosingElement) => JsxElement;\n' +
    '    /** @deprecated Use `factory.updateJsxElement` or the factory supplied by your transformation context instead. */\n' +
    '    const updateJsxElement: (node: JsxElement, openingElement: JsxOpeningElement, children: readonly JsxChild[], closingElement: JsxClosingElement) => JsxElement;\n' +
    '    /** @deprecated Use `factory.createJsxSelfClosingElement` or the factory supplied by your transformation context instead. */\n' +
    '    const createJsxSelfClosingElement: (tagName: JsxTagNameExpression, typeArguments: readonly TypeNode[] | undefined, attributes: JsxAttributes) => JsxSelfClosingElement;\n' +
    '    /** @deprecated Use `factory.updateJsxSelfClosingElement` or the factory supplied by your transformation context instead. */\n' +
    '    const updateJsxSelfClosingElement: (node: JsxSelfClosingElement, tagName: JsxTagNameExpression, typeArguments: readonly TypeNode[] | undefined, attributes: JsxAttributes) => JsxSelfClosingElement;\n' +
    '    /** @deprecated Use `factory.createJsxOpeningElement` or the factory supplied by your transformation context instead. */\n' +
    '    const createJsxOpeningElement: (tagName: JsxTagNameExpression, typeArguments: readonly TypeNode[] | undefined, attributes: JsxAttributes) => JsxOpeningElement;\n' +
    '    /** @deprecated Use `factory.updateJsxOpeningElement` or the factory supplied by your transformation context instead. */\n' +
    '    const updateJsxOpeningElement: (node: JsxOpeningElement, tagName: JsxTagNameExpression, typeArguments: readonly TypeNode[] | undefined, attributes: JsxAttributes) => JsxOpeningElement;\n' +
    '    /** @deprecated Use `factory.createJsxClosingElement` or the factory supplied by your transformation context instead. */\n' +
    '    const createJsxClosingElement: (tagName: JsxTagNameExpression) => JsxClosingElement;\n' +
    '    /** @deprecated Use `factory.updateJsxClosingElement` or the factory supplied by your transformation context instead. */\n' +
    '    const updateJsxClosingElement: (node: JsxClosingElement, tagName: JsxTagNameExpression) => JsxClosingElement;\n' +
    '    /** @deprecated Use `factory.createJsxFragment` or the factory supplied by your transformation context instead. */\n' +
    '    const createJsxFragment: (openingFragment: JsxOpeningFragment, children: readonly JsxChild[], closingFragment: JsxClosingFragment) => JsxFragment;\n' +
    '    /** @deprecated Use `factory.createJsxText` or the factory supplied by your transformation context instead. */\n' +
    '    const createJsxText: (text: string, containsOnlyTriviaWhiteSpaces?: boolean | undefined) => JsxText;\n' +
    '    /** @deprecated Use `factory.updateJsxText` or the factory supplied by your transformation context instead. */\n' +
    '    const updateJsxText: (node: JsxText, text: string, containsOnlyTriviaWhiteSpaces?: boolean | undefined) => JsxText;\n' +
    '    /** @deprecated Use `factory.createJsxOpeningFragment` or the factory supplied by your transformation context instead. */\n' +
    '    const createJsxOpeningFragment: () => JsxOpeningFragment;\n' +
    '    /** @deprecated Use `factory.createJsxJsxClosingFragment` or the factory supplied by your transformation context instead. */\n' +
    '    const createJsxJsxClosingFragment: () => JsxClosingFragment;\n' +
    '    /** @deprecated Use `factory.updateJsxFragment` or the factory supplied by your transformation context instead. */\n' +
    '    const updateJsxFragment: (node: JsxFragment, openingFragment: JsxOpeningFragment, children: readonly JsxChild[], closingFragment: JsxClosingFragment) => JsxFragment;\n' +
    '    /** @deprecated Use `factory.createJsxAttribute` or the factory supplied by your transformation context instead. */\n' +
    '    const createJsxAttribute: (name: Identifier, initializer: StringLiteral | JsxExpression | undefined) => JsxAttribute;\n' +
    '    /** @deprecated Use `factory.updateJsxAttribute` or the factory supplied by your transformation context instead. */\n' +
    '    const updateJsxAttribute: (node: JsxAttribute, name: Identifier, initializer: StringLiteral | JsxExpression | undefined) => JsxAttribute;\n' +
    '    /** @deprecated Use `factory.createJsxAttributes` or the factory supplied by your transformation context instead. */\n' +
    '    const createJsxAttributes: (properties: readonly JsxAttributeLike[]) => JsxAttributes;\n' +
    '    /** @deprecated Use `factory.updateJsxAttributes` or the factory supplied by your transformation context instead. */\n' +
    '    const updateJsxAttributes: (node: JsxAttributes, properties: readonly JsxAttributeLike[]) => JsxAttributes;\n' +
    '    /** @deprecated Use `factory.createJsxSpreadAttribute` or the factory supplied by your transformation context instead. */\n' +
    '    const createJsxSpreadAttribute: (expression: Expression) => JsxSpreadAttribute;\n' +
    '    /** @deprecated Use `factory.updateJsxSpreadAttribute` or the factory supplied by your transformation context instead. */\n' +
    '    const updateJsxSpreadAttribute: (node: JsxSpreadAttribute, expression: Expression) => JsxSpreadAttribute;\n' +
    '    /** @deprecated Use `factory.createJsxExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const createJsxExpression: (dotDotDotToken: DotDotDotToken | undefined, expression: Expression | undefined) => JsxExpression;\n' +
    '    /** @deprecated Use `factory.updateJsxExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const updateJsxExpression: (node: JsxExpression, expression: Expression | undefined) => JsxExpression;\n' +
    '    /** @deprecated Use `factory.createCaseClause` or the factory supplied by your transformation context instead. */\n' +
    '    const createCaseClause: (expression: Expression, statements: readonly Statement[]) => CaseClause;\n' +
    '    /** @deprecated Use `factory.updateCaseClause` or the factory supplied by your transformation context instead. */\n' +
    '    const updateCaseClause: (node: CaseClause, expression: Expression, statements: readonly Statement[]) => CaseClause;\n' +
    '    /** @deprecated Use `factory.createDefaultClause` or the factory supplied by your transformation context instead. */\n' +
    '    const createDefaultClause: (statements: readonly Statement[]) => DefaultClause;\n' +
    '    /** @deprecated Use `factory.updateDefaultClause` or the factory supplied by your transformation context instead. */\n' +
    '    const updateDefaultClause: (node: DefaultClause, statements: readonly Statement[]) => DefaultClause;\n' +
    '    /** @deprecated Use `factory.createHeritageClause` or the factory supplied by your transformation context instead. */\n' +
    '    const createHeritageClause: (token: SyntaxKind.ExtendsKeyword | SyntaxKind.ImplementsKeyword, types: readonly ExpressionWithTypeArguments[]) => HeritageClause;\n' +
    '    /** @deprecated Use `factory.updateHeritageClause` or the factory supplied by your transformation context instead. */\n' +
    '    const updateHeritageClause: (node: HeritageClause, types: readonly ExpressionWithTypeArguments[]) => HeritageClause;\n' +
    '    /** @deprecated Use `factory.createCatchClause` or the factory supplied by your transformation context instead. */\n' +
    '    const createCatchClause: (variableDeclaration: string | VariableDeclaration | BindingName | undefined, block: Block) => CatchClause;\n' +
    '    /** @deprecated Use `factory.updateCatchClause` or the factory supplied by your transformation context instead. */\n' +
    '    const updateCatchClause: (node: CatchClause, variableDeclaration: VariableDeclaration | undefined, block: Block) => CatchClause;\n' +
    '    /** @deprecated Use `factory.createPropertyAssignment` or the factory supplied by your transformation context instead. */\n' +
    '    const createPropertyAssignment: (name: string | PropertyName, initializer: Expression) => PropertyAssignment;\n' +
    '    /** @deprecated Use `factory.updatePropertyAssignment` or the factory supplied by your transformation context instead. */\n' +
    '    const updatePropertyAssignment: (node: PropertyAssignment, name: PropertyName, initializer: Expression) => PropertyAssignment;\n' +
    '    /** @deprecated Use `factory.createShorthandPropertyAssignment` or the factory supplied by your transformation context instead. */\n' +
    '    const createShorthandPropertyAssignment: (name: string | Identifier, objectAssignmentInitializer?: Expression | undefined) => ShorthandPropertyAssignment;\n' +
    '    /** @deprecated Use `factory.updateShorthandPropertyAssignment` or the factory supplied by your transformation context instead. */\n' +
    '    const updateShorthandPropertyAssignment: (node: ShorthandPropertyAssignment, name: Identifier, objectAssignmentInitializer: Expression | undefined) => ShorthandPropertyAssignment;\n' +
    '    /** @deprecated Use `factory.createSpreadAssignment` or the factory supplied by your transformation context instead. */\n' +
    '    const createSpreadAssignment: (expression: Expression) => SpreadAssignment;\n' +
    '    /** @deprecated Use `factory.updateSpreadAssignment` or the factory supplied by your transformation context instead. */\n' +
    '    const updateSpreadAssignment: (node: SpreadAssignment, expression: Expression) => SpreadAssignment;\n' +
    '    /** @deprecated Use `factory.createEnumMember` or the factory supplied by your transformation context instead. */\n' +
    '    const createEnumMember: (name: string | PropertyName, initializer?: Expression | undefined) => EnumMember;\n' +
    '    /** @deprecated Use `factory.updateEnumMember` or the factory supplied by your transformation context instead. */\n' +
    '    const updateEnumMember: (node: EnumMember, name: PropertyName, initializer: Expression | undefined) => EnumMember;\n' +
    '    /** @deprecated Use `factory.updateSourceFile` or the factory supplied by your transformation context instead. */\n' +
    '    const updateSourceFileNode: (node: SourceFile, statements: readonly Statement[], isDeclarationFile?: boolean | undefined, referencedFiles?: readonly FileReference[] | undefined, typeReferences?: readonly FileReference[] | undefined, hasNoDefaultLib?: boolean | undefined, libReferences?: readonly FileReference[] | undefined) => SourceFile;\n' +
    '    /** @deprecated Use `factory.createNotEmittedStatement` or the factory supplied by your transformation context instead. */\n' +
    '    const createNotEmittedStatement: (original: Node) => NotEmittedStatement;\n' +
    '    /** @deprecated Use `factory.createPartiallyEmittedExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const createPartiallyEmittedExpression: (expression: Expression, original?: Node | undefined) => PartiallyEmittedExpression;\n' +
    '    /** @deprecated Use `factory.updatePartiallyEmittedExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const updatePartiallyEmittedExpression: (node: PartiallyEmittedExpression, expression: Expression) => PartiallyEmittedExpression;\n' +
    '    /** @deprecated Use `factory.createCommaListExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const createCommaList: (elements: readonly Expression[]) => CommaListExpression;\n' +
    '    /** @deprecated Use `factory.updateCommaListExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const updateCommaList: (node: CommaListExpression, elements: readonly Expression[]) => CommaListExpression;\n' +
    '    /** @deprecated Use `factory.createBundle` or the factory supplied by your transformation context instead. */\n' +
    '    const createBundle: (sourceFiles: readonly SourceFile[], prepends?: readonly (UnparsedSource | InputFiles)[] | undefined) => Bundle;\n' +
    '    /** @deprecated Use `factory.updateBundle` or the factory supplied by your transformation context instead. */\n' +
    '    const updateBundle: (node: Bundle, sourceFiles: readonly SourceFile[], prepends?: readonly (UnparsedSource | InputFiles)[] | undefined) => Bundle;\n' +
    '    /** @deprecated Use `factory.createImmediatelyInvokedFunctionExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const createImmediatelyInvokedFunctionExpression: {\n' +
    '        (statements: readonly Statement[]): CallExpression;\n' +
    '        (statements: readonly Statement[], param: ParameterDeclaration, paramValue: Expression): CallExpression;\n' +
    '    };\n' +
    '    /** @deprecated Use `factory.createImmediatelyInvokedArrowFunction` or the factory supplied by your transformation context instead. */\n' +
    '    const createImmediatelyInvokedArrowFunction: {\n' +
    '        (statements: readonly Statement[]): CallExpression;\n' +
    '        (statements: readonly Statement[], param: ParameterDeclaration, paramValue: Expression): CallExpression;\n' +
    '    };\n' +
    '    /** @deprecated Use `factory.createVoidZero` or the factory supplied by your transformation context instead. */\n' +
    '    const createVoidZero: () => VoidExpression;\n' +
    '    /** @deprecated Use `factory.createExportDefault` or the factory supplied by your transformation context instead. */\n' +
    '    const createExportDefault: (expression: Expression) => ExportAssignment;\n' +
    '    /** @deprecated Use `factory.createExternalModuleExport` or the factory supplied by your transformation context instead. */\n' +
    '    const createExternalModuleExport: (exportName: Identifier) => ExportDeclaration;\n' +
    '    /** @deprecated Use `factory.createNamespaceExport` or the factory supplied by your transformation context instead. */\n' +
    '    const createNamespaceExport: (name: Identifier) => NamespaceExport;\n' +
    '    /** @deprecated Use `factory.updateNamespaceExport` or the factory supplied by your transformation context instead. */\n' +
    '    const updateNamespaceExport: (node: NamespaceExport, name: Identifier) => NamespaceExport;\n' +
    '    /** @deprecated Use `factory.createToken` or the factory supplied by your transformation context instead. */\n' +
    '    const createToken: <TKind extends SyntaxKind>(kind: TKind) => Token<TKind>;\n' +
    '    /** @deprecated Use `factory.createIdentifier` or the factory supplied by your transformation context instead. */\n' +
    '    const createIdentifier: (text: string) => Identifier;\n' +
    '    /** @deprecated Use `factory.createTempVariable` or the factory supplied by your transformation context instead. */\n' +
    '    const createTempVariable: (recordTempVariable: ((node: Identifier) => void) | undefined) => Identifier;\n' +
    '    /** @deprecated Use `factory.getGeneratedNameForNode` or the factory supplied by your transformation context instead. */\n' +
    '    const getGeneratedNameForNode: (node: Node | undefined) => Identifier;\n' +
    '    /** @deprecated Use `factory.createUniqueName(text, GeneratedIdentifierFlags.Optimistic)` or the factory supplied by your transformation context instead. */\n' +
    '    const createOptimisticUniqueName: (text: string) => Identifier;\n' +
    '    /** @deprecated Use `factory.createUniqueName(text, GeneratedIdentifierFlags.Optimistic | GeneratedIdentifierFlags.FileLevel)` or the factory supplied by your transformation context instead. */\n' +
    '    const createFileLevelUniqueName: (text: string) => Identifier;\n' +
    '    /** @deprecated Use `factory.createIndexSignature` or the factory supplied by your transformation context instead. */\n' +
    '    const createIndexSignature: (decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode) => IndexSignatureDeclaration;\n' +
    '    /** @deprecated Use `factory.createTypePredicateNode` or the factory supplied by your transformation context instead. */\n' +
    '    const createTypePredicateNode: (parameterName: Identifier | ThisTypeNode | string, type: TypeNode) => TypePredicateNode;\n' +
    '    /** @deprecated Use `factory.updateTypePredicateNode` or the factory supplied by your transformation context instead. */\n' +
    '    const updateTypePredicateNode: (node: TypePredicateNode, parameterName: Identifier | ThisTypeNode, type: TypeNode) => TypePredicateNode;\n' +
    '    /** @deprecated Use `factory.createStringLiteral`, `factory.createStringLiteralFromNode`, `factory.createNumericLiteral`, `factory.createBigIntLiteral`, `factory.createTrue`, `factory.createFalse`, or the factory supplied by your transformation context instead. */\n' +
    '    const createLiteral: {\n' +
    '        (value: string | StringLiteral | NoSubstitutionTemplateLiteral | NumericLiteral | Identifier): StringLiteral;\n' +
    '        (value: number | PseudoBigInt): NumericLiteral;\n' +
    '        (value: boolean): BooleanLiteral;\n' +
    '        (value: string | number | PseudoBigInt | boolean): PrimaryExpression;\n' +
    '    };\n' +
    '    /** @deprecated Use `factory.createMethodSignature` or the factory supplied by your transformation context instead. */\n' +
    '    const createMethodSignature: (typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, name: string | PropertyName, questionToken: QuestionToken | undefined) => MethodSignature;\n' +
    '    /** @deprecated Use `factory.updateMethodSignature` or the factory supplied by your transformation context instead. */\n' +
    '    const updateMethodSignature: (node: MethodSignature, typeParameters: NodeArray<TypeParameterDeclaration> | undefined, parameters: NodeArray<ParameterDeclaration>, type: TypeNode | undefined, name: PropertyName, questionToken: QuestionToken | undefined) => MethodSignature;\n' +
    '    /** @deprecated Use `factory.createTypeOperatorNode` or the factory supplied by your transformation context instead. */\n' +
    '    const createTypeOperatorNode: {\n' +
    '        (type: TypeNode): TypeOperatorNode;\n' +
    '        (operator: SyntaxKind.KeyOfKeyword | SyntaxKind.UniqueKeyword | SyntaxKind.ReadonlyKeyword, type: TypeNode): TypeOperatorNode;\n' +
    '    };\n' +
    '    /** @deprecated Use `factory.createTaggedTemplate` or the factory supplied by your transformation context instead. */\n' +
    '    const createTaggedTemplate: {\n' +
    '        (tag: Expression, template: TemplateLiteral): TaggedTemplateExpression;\n' +
    '        (tag: Expression, typeArguments: readonly TypeNode[] | undefined, template: TemplateLiteral): TaggedTemplateExpression;\n' +
    '    };\n' +
    '    /** @deprecated Use `factory.updateTaggedTemplate` or the factory supplied by your transformation context instead. */\n' +
    '    const updateTaggedTemplate: {\n' +
    '        (node: TaggedTemplateExpression, tag: Expression, template: TemplateLiteral): TaggedTemplateExpression;\n' +
    '        (node: TaggedTemplateExpression, tag: Expression, typeArguments: readonly TypeNode[] | undefined, template: TemplateLiteral): TaggedTemplateExpression;\n' +
    '    };\n' +
    '    /** @deprecated Use `factory.updateBinary` or the factory supplied by your transformation context instead. */\n' +
    '    const updateBinary: (node: BinaryExpression, left: Expression, right: Expression, operator?: BinaryOperator | BinaryOperatorToken) => BinaryExpression;\n' +
    '    /** @deprecated Use `factory.createConditional` or the factory supplied by your transformation context instead. */\n' +
    '    const createConditional: {\n' +
    '        (condition: Expression, whenTrue: Expression, whenFalse: Expression): ConditionalExpression;\n' +
    '        (condition: Expression, questionToken: QuestionToken, whenTrue: Expression, colonToken: ColonToken, whenFalse: Expression): ConditionalExpression;\n' +
    '    };\n' +
    '    /** @deprecated Use `factory.createYield` or the factory supplied by your transformation context instead. */\n' +
    '    const createYield: {\n' +
    '        (expression?: Expression | undefined): YieldExpression;\n' +
    '        (asteriskToken: AsteriskToken | undefined, expression: Expression): YieldExpression;\n' +
    '    };\n' +
    '    /** @deprecated Use `factory.createClassExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const createClassExpression: (modifiers: readonly Modifier[] | undefined, name: string | Identifier | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, heritageClauses: readonly HeritageClause[] | undefined, members: readonly ClassElement[]) => ClassExpression;\n' +
    '    /** @deprecated Use `factory.updateClassExpression` or the factory supplied by your transformation context instead. */\n' +
    '    const updateClassExpression: (node: ClassExpression, modifiers: readonly Modifier[] | undefined, name: Identifier | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, heritageClauses: readonly HeritageClause[] | undefined, members: readonly ClassElement[]) => ClassExpression;\n' +
    '    /** @deprecated Use `factory.createPropertySignature` or the factory supplied by your transformation context instead. */\n' +
    '    const createPropertySignature: (modifiers: readonly Modifier[] | undefined, name: PropertyName | string, questionToken: QuestionToken | undefined, type: TypeNode | undefined, initializer?: Expression | undefined) => PropertySignature;\n' +
    '    /** @deprecated Use `factory.updatePropertySignature` or the factory supplied by your transformation context instead. */\n' +
    '    const updatePropertySignature: (node: PropertySignature, modifiers: readonly Modifier[] | undefined, name: PropertyName, questionToken: QuestionToken | undefined, type: TypeNode | undefined, initializer: Expression | undefined) => PropertySignature;\n' +
    '    /** @deprecated Use `factory.createExpressionWithTypeArguments` or the factory supplied by your transformation context instead. */\n' +
    '    const createExpressionWithTypeArguments: (typeArguments: readonly TypeNode[] | undefined, expression: Expression) => ExpressionWithTypeArguments;\n' +
    '    /** @deprecated Use `factory.updateExpressionWithTypeArguments` or the factory supplied by your transformation context instead. */\n' +
    '    const updateExpressionWithTypeArguments: (node: ExpressionWithTypeArguments, typeArguments: readonly TypeNode[] | undefined, expression: Expression) => ExpressionWithTypeArguments;\n' +
    '    /** @deprecated Use `factory.createArrowFunction` or the factory supplied by your transformation context instead. */\n' +
    '    const createArrowFunction: {\n' +
    '        (modifiers: readonly Modifier[] | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, equalsGreaterThanToken: EqualsGreaterThanToken | undefined, body: ConciseBody): ArrowFunction;\n' +
    '        (modifiers: readonly Modifier[] | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, body: ConciseBody): ArrowFunction;\n' +
    '    };\n' +
    '    /** @deprecated Use `factory.updateArrowFunction` or the factory supplied by your transformation context instead. */\n' +
    '    const updateArrowFunction: {\n' +
    '        (node: ArrowFunction, modifiers: readonly Modifier[] | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, equalsGreaterThanToken: EqualsGreaterThanToken, body: ConciseBody): ArrowFunction;\n' +
    '        (node: ArrowFunction, modifiers: readonly Modifier[] | undefined, typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode | undefined, body: ConciseBody): ArrowFunction;\n' +
    '    };\n' +
    '    /** @deprecated Use `factory.createVariableDeclaration` or the factory supplied by your transformation context instead. */\n' +
    '    const createVariableDeclaration: {\n' +
    '        (name: string | BindingName, type?: TypeNode | undefined, initializer?: Expression | undefined): VariableDeclaration;\n' +
    '        (name: string | BindingName, exclamationToken: ExclamationToken | undefined, type: TypeNode | undefined, initializer: Expression | undefined): VariableDeclaration;\n' +
    '    };\n' +
    '    /** @deprecated Use `factory.updateVariableDeclaration` or the factory supplied by your transformation context instead. */\n' +
    '    const updateVariableDeclaration: {\n' +
    '        (node: VariableDeclaration, name: BindingName, type: TypeNode | undefined, initializer: Expression | undefined): VariableDeclaration;\n' +
    '        (node: VariableDeclaration, name: BindingName, exclamationToken: ExclamationToken | undefined, type: TypeNode | undefined, initializer: Expression | undefined): VariableDeclaration;\n' +
    '    };\n' +
    '    /** @deprecated Use `factory.createImportClause` or the factory supplied by your transformation context instead. */\n' +
    '    const createImportClause: (name: Identifier | undefined, namedBindings: NamedImportBindings | undefined, isTypeOnly?: any) => ImportClause;\n' +
    '    /** @deprecated Use `factory.updateImportClause` or the factory supplied by your transformation context instead. */\n' +
    '    const updateImportClause: (node: ImportClause, name: Identifier | undefined, namedBindings: NamedImportBindings | undefined, isTypeOnly: boolean) => ImportClause;\n' +
    '    /** @deprecated Use `factory.createExportDeclaration` or the factory supplied by your transformation context instead. */\n' +
    '    const createExportDeclaration: (decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, exportClause: NamedExportBindings | undefined, moduleSpecifier?: Expression | undefined, isTypeOnly?: any) => ExportDeclaration;\n' +
    '    /** @deprecated Use `factory.updateExportDeclaration` or the factory supplied by your transformation context instead. */\n' +
    '    const updateExportDeclaration: (node: ExportDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, exportClause: NamedExportBindings | undefined, moduleSpecifier: Expression | undefined, isTypeOnly: boolean) => ExportDeclaration;\n' +
    '    /** @deprecated Use `factory.createJSDocParameterTag` or the factory supplied by your transformation context instead. */\n' +
    '    const createJSDocParamTag: (name: EntityName, isBracketed: boolean, typeExpression?: JSDocTypeExpression | undefined, comment?: string | undefined) => JSDocParameterTag;\n' +
    '    /** @deprecated Use `factory.createComma` or the factory supplied by your transformation context instead. */\n' +
    '    const createComma: (left: Expression, right: Expression) => Expression;\n' +
    '    /** @deprecated Use `factory.createLessThan` or the factory supplied by your transformation context instead. */\n' +
    '    const createLessThan: (left: Expression, right: Expression) => Expression;\n' +
    '    /** @deprecated Use `factory.createAssignment` or the factory supplied by your transformation context instead. */\n' +
    '    const createAssignment: (left: Expression, right: Expression) => BinaryExpression;\n' +
    '    /** @deprecated Use `factory.createStrictEquality` or the factory supplied by your transformation context instead. */\n' +
    '    const createStrictEquality: (left: Expression, right: Expression) => BinaryExpression;\n' +
    '    /** @deprecated Use `factory.createStrictInequality` or the factory supplied by your transformation context instead. */\n' +
    '    const createStrictInequality: (left: Expression, right: Expression) => BinaryExpression;\n' +
    '    /** @deprecated Use `factory.createAdd` or the factory supplied by your transformation context instead. */\n' +
    '    const createAdd: (left: Expression, right: Expression) => BinaryExpression;\n' +
    '    /** @deprecated Use `factory.createSubtract` or the factory supplied by your transformation context instead. */\n' +
    '    const createSubtract: (left: Expression, right: Expression) => BinaryExpression;\n' +
    '    /** @deprecated Use `factory.createLogicalAnd` or the factory supplied by your transformation context instead. */\n' +
    '    const createLogicalAnd: (left: Expression, right: Expression) => BinaryExpression;\n' +
    '    /** @deprecated Use `factory.createLogicalOr` or the factory supplied by your transformation context instead. */\n' +
    '    const createLogicalOr: (left: Expression, right: Expression) => BinaryExpression;\n' +
    '    /** @deprecated Use `factory.createPostfixIncrement` or the factory supplied by your transformation context instead. */\n' +
    '    const createPostfixIncrement: (operand: Expression) => PostfixUnaryExpression;\n' +
    '    /** @deprecated Use `factory.createLogicalNot` or the factory supplied by your transformation context instead. */\n' +
    '    const createLogicalNot: (operand: Expression) => PrefixUnaryExpression;\n' +
    '    /** @deprecated Use an appropriate `factory` method instead. */\n' +
    '    const createNode: (kind: SyntaxKind, pos?: any, end?: any) => Node;\n' +
    '    /**\n' +
    '     * Creates a shallow, memberwise clone of a node ~for mutation~ with its `pos`, `end`, and `parent` set.\n' +
    '     *\n' +
    "     * NOTE: It is unsafe to change any properties of a `Node` that relate to its AST children, as those changes won't be\n" +
    '     * captured with respect to transformations.\n' +
    '     *\n' +
    '     * @deprecated Use an appropriate `factory.update...` method instead, use `setCommentRange` or `setSourceMapRange`, and avoid setting `parent`.\n' +
    '     */\n' +
    '    const getMutableClone: <T extends Node>(node: T) => T;\n' +
    '    /** @deprecated Use `isTypeAssertionExpression` instead. */\n' +
    '    const isTypeAssertion: (node: Node) => node is TypeAssertion;\n' +
    '    /**\n' +
    '     * @deprecated Use `ts.ReadonlyESMap<K, V>` instead.\n' +
    '     */\n' +
    '    interface ReadonlyMap<T> extends ReadonlyESMap<string, T> {\n' +
    '    }\n' +
    '    /**\n' +
    '     * @deprecated Use `ts.ESMap<K, V>` instead.\n' +
    '     */\n' +
    '    interface Map<T> extends ESMap<string, T> {\n' +
    '    }\n' +
    '    /**\n' +
    '     * @deprecated Use `isMemberName` instead.\n' +
    '     */\n' +
    '    const isIdentifierOrPrivateIdentifier: (node: Node) => node is MemberName;\n' +
    '}\n' +
    '\n' +
    'export = ts;',
  timestamp: 1669130813364
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost:getSourceFile for, C:/Users/gparl/projects/scuri/node_modules/typescript/lib/lib.d.ts, [object Object]',
  timestamp: 1669130813607
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'treeHost: readFile C:/Users/gparl/projects/scuri/node_modules/typescript/lib/lib.d.ts: undefined',
  timestamp: 1669130813608
}
{
  name: 'createTsProgram',
  path: [ 'base' ],
  level: 'debug',
  message: 'Could not find C:/Users/gparl/projects/scuri/node_modules/typescript/lib/lib.d.ts',
  timestamp: 1669130813608
}
{
  name: 'readDependencyCalls',
  path: [ 'base' ],
  level: 'debug',
  message: 'accessExpr  this.service kind:PropertyAccessExpression, type: ServiceWithMethods',
  timestamp: 1669130813878
}
{
  name: 'readDependencyCalls',
  path: [ 'base' ],
  level: 'debug',
  message: 'processing, this.service.justAMethod kind:PropertyAccessExpression: () => ClassDescription',
  timestamp: 1669130813885
}
{
  name: 'readDependencyCalls',
  path: [ 'base' ],
  level: 'debug',
  message: 'method: service.justAMethod of type: () => ClassDescription',
  timestamp: 1669130813886
}
{
  name: 'readDependencyCalls',
  path: [ 'base' ],
  level: 'debug',
  message: 'accessExpr  this.service kind:PropertyAccessExpression, type: ServiceWithMethods',
  timestamp: 1669130813886
}
{
  name: 'readDependencyCalls',
  path: [ 'base' ],
  level: 'debug',
  message: 'processing, this.service.observableReturning kind:PropertyAccessExpression: () => Observable<unknown>',
  timestamp: 1669130813899
}
{
  name: 'readDependencyCalls',
  path: [ 'base' ],
  level: 'debug',
  message: 'method: service.observableReturning of type: () => Observable<unknown>',
  timestamp: 1669130813900
}
{
  name: 'readDependencyCalls',
  path: [ 'base' ],
  level: 'debug',
  message: 'accessExpr  this.service kind:PropertyAccessExpression, type: ServiceWithMethods',
  timestamp: 1669130813901
}
{
  name: 'readDependencyCalls',
  path: [ 'base' ],
  level: 'debug',
  message: 'processing, this.service.promiseReturning kind:PropertyAccessExpression: () => any',
  timestamp: 1669130813901
}
{
  name: 'readDependencyCalls',
  path: [ 'base' ],
  level: 'debug',
  message: 'method: service.promiseReturning of type: () => any',
  timestamp: 1669130813901
}
{
  name: 'readDependencyCalls',
  path: [ 'base' ],
  level: 'debug',
  message: 'accessExpr \r\n' +
    '        this.service kind:PropertyAccessExpression, type: ServiceWithMethods',
  timestamp: 1669130813902
}
{
  name: 'readDependencyCalls',
  path: [ 'base' ],
  level: 'debug',
  message: 'processing,\r\n' +
    '        this.service.aVoidMethod kind:PropertyAccessExpression: () => void',
  timestamp: 1669130813902
}
{
  name: 'readDependencyCalls',
  path: [ 'base' ],
  level: 'debug',
  message: 'method: service.aVoidMethod of type: () => void',
  timestamp: 1669130813902
}
{
  name: 'readDependencyCalls',
  path: [ 'base' ],
  level: 'debug',
  message: 'accessExpr \r\n' +
    '        this.service kind:PropertyAccessExpression, type: ServiceWithMethods',
  timestamp: 1669130813903
}
{
  name: 'readDependencyCalls',
  path: [ 'base' ],
  level: 'debug',
  message: 'processing,\r\n' +
    '        this.service.property$ kind:PropertyAccessExpression: BehaviorSubject<string>',
  timestamp: 1669130813903
}
{
  name: 'readDependencyCalls',
  path: [ 'base' ],
  level: 'debug',
  message: 'property: service.property$ of type: BehaviorSubject<string>',
  timestamp: 1669130813905
}
{
  name: 'readDependencyCalls',
  path: [ 'base' ],
  level: 'debug',
  message: 'accessExpr  this.service kind:PropertyAccessExpression, type: ServiceWithMethods',
  timestamp: 1669130813905
}
{
  name: 'readDependencyCalls',
  path: [ 'base' ],
  level: 'debug',
  message: 'processing, this.service.promiseProp kind:PropertyAccessExpression: Promise<string>',
  timestamp: 1669130813906
}
{
  name: 'readDependencyCalls',
  path: [ 'base' ],
  level: 'debug',
  message: 'property: service.promiseProp of type: Promise<string>',
  timestamp: 1669130813906
}
{
  name: 'readDependencyCalls',
  path: [ 'base' ],
  level: 'debug',
  message: 'accessExpr this.service kind:PropertyAccessExpression, type: ServiceWithMethods',
  timestamp: 1669130813907
}
{
  name: 'readDependencyCalls',
  path: [ 'base' ],
  level: 'debug',
  message: 'processing,this.service.observable$ kind:PropertyAccessExpression: Observable<Array<ClassDescription>>',
  timestamp: 1669130813907
}
{
  name: 'readDependencyCalls',
  path: [ 'base' ],
  level: 'debug',
  message: 'property: service.observable$ of type: Observable<Array<ClassDescription>>',
  timestamp: 1669130813907
}
{
  name: 'readDependencyCalls',
  path: [ 'base' ],
  level: 'debug',
  message: 'accessExpr this.service kind:PropertyAccessExpression, type: ServiceWithMethods',
  timestamp: 1669130813908
}
{
  name: 'readDependencyCalls',
  path: [ 'base' ],
  level: 'debug',
  message: 'processing,this.service.subject$ kind:PropertyAccessExpression: Subject<string>',
  timestamp: 1669130813908
}
{
  name: 'readDependencyCalls',
  path: [ 'base' ],
  level: 'debug',
  message: 'property: service.subject$ of type: Subject<string>',
  timestamp: 1669130813908
}
{
  name: 'readDependencyCalls',
  path: [ 'base' ],
  level: 'debug',
  message: 'accessExpr  this.service kind:PropertyAccessExpression, type: ServiceWithMethods',
  timestamp: 1669130813909
}
{
  name: 'readDependencyCalls',
  path: [ 'base' ],
  level: 'debug',
  message: 'processing, this.service.aNeverMethod kind:PropertyAccessExpression: () => void',
  timestamp: 1669130813909
}
{
  name: 'readDependencyCalls',
  path: [ 'base' ],
  level: 'debug',
  message: 'method: service.aNeverMethod of type: () => void',
  timestamp: 1669130813909
}
\deps-calls-with-return-types.ts /** starts on next line*/
import { switchMap, switchMapTo, tap } from 'rxjs/operators';
import { ServiceWithMethods } from './deps-calls-with-return-types.dependency';

export class ExampleComponent {
    constructor(private readonly service:ServiceWithMethods) {}

    async aMethod() {
        const d = this.service.justAMethod();

        return this.service.observableReturning().pipe(
            switchMap(v => this.service.promiseReturning())
        );
    }

    async anotherMethod() {
        this.service.aVoidMethod();
        this.service.property$.pipe(
            switchMap(v => this.service.promiseProp),
            switchMapTo(this.service.observable$),
            switchMapTo(this.service.subject$),
            tap({error: () => this.service.aNeverMethod()})
        )
    }
}


// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`spec for a class with a method calling a dependency method should add EMPTY/a Promise for the dep method returning an observable/Promise when dependency is already part of the spec 1`] = `
"import { ExampleComponent } from './deps-calls-with-return-types';
import { ServiceWithMethods } from './deps-calls-with-return-types.dependency';
import { EMPTY, Observable } from 'rxjs';
import { autoSpy } from 'autoSpy';

describe('ExampleComponent', () => {
    it('when aMethod is called it should', () => {
        // arrange
        const { build } = setup().default();
        const e = build();
        // act
        e.aMethod();
        // assert
        // expect(e).toEqual
    });
});

function setup() {
  const service = autoSpy(ServiceWithMethods);
  const x: Observable<void> = EMPTY;
  service.observableReturning.and.returnValue(EMPTY);
  service.promiseReturning.and.returnValue(new Promise(res => {}));
  
  const builder = {
    default() {
      return builder;
    },
    build() {
      return new ExampleComponent(service);
    },
    
  withServiceJustAMethodReturn(j: ClassDescription) {
        service.justAMethod.and.returnValue(j);
        return builder;
    },
    withServiceObservableReturningReturn(o: Observable<string>) {
        service.observableReturning.and.returnValue(o);
        return builder;
    },
    withServicePromiseReturningReturn(p: Promise<string>) {
        service.promiseReturning.and.returnValue(p);
        return builder;
    },};

  return builder;
}
"
`;

exports[`spec for a class with a method calling a dependency method should add methods for changing the property when adding it as a dep 1`] = `
"
import { ExampleComponent } from './component';
import { autoSpy } from 'autoSpy';
import { ServiceWithMethods } from './dependency';
import { EMPTY, Observable, ReplaySubject } from 'rxjs';

describe('ExampleComponent', () => {
    it('when aMethod is called it should', () => {
        // arrange
        const { build } = setup().default();
        const e = build();
        // act
        e.aMethod();
        // assert
        // expect(e).toEqual
    });
    it('when anotherMethod is called it should', () => {
        // arrange
        const { build } = setup().default();
        const e = build();
        // act
        e.anotherMethod();
        // assert
        // expect(e).toEqual
    });


});

function setup() {
  const serviceProperty$ = new ReplaySubject<string>(1);
 let resolvePromiseProp: Function;
 let rejectPromiseProp: Function;
 const servicePromiseProp = new Promise((res, rej) => {
     resolvePromiseProp = res;
     rejectPromiseProp = rej;
 });
 const serviceObservable$ = new ReplaySubject<ClassDescription[]>(1);
 const serviceSubject$ = new ReplaySubject<string>(1);
 const service = autoSpy(ServiceWithMethods, { property$: serviceProperty$, promiseProp: servicePromiseProp, observable$: serviceObservable$, subject$: serviceSubject$ });
  service.observableReturning.and.returnValue(EMPTY);
  service.promiseReturning.and.returnValue(new Promise(res => {}));
  const service = autoSpy(ServiceWithMethods);

  const builder = {
    service,
    withJustReturns(j: ClassDescription) {
      // this should still be in for the just-a-method method
      service.justAMethod.and.returnValue(j);
      return builder;
    },
    withPromiseProp() {
      // this should still be in for the promise prop method
      return builder;
    },
    default() {
      return builder;
    },
    build() {
      return new ExampleComponent(service);
    },
    
  withServiceObservableReturningReturn(o: Observable<string>) {
        service.observableReturning.and.returnValue(o);
        return builder;
    },
    withServicePromiseReturningReturn(p: Promise<string>) {
        service.promiseReturning.and.returnValue(p);
        return builder;
    },
    withServiceProperty$(p$: Observable<string>) {
        p$.subscribe({
            next: (v) => serviceProperty$.next(v),
            error: (e) => serviceProperty$.error(e),
            complete: () => serviceProperty$.complete()
        });
        return builder;
    },
    withServicePromiseProp(p: Promise<string>) {
        p
            .then((v) => resolveServicePromiseProp(v))
            .catch((e) => rejectServicePromiseProp(e));
        return builder;
    },
    withServiceObservable$(o$: Observable<ClassDescription[]>) {
        o$.subscribe({
            next: (v) => serviceObservable$.next(v),
            error: (e) => serviceObservable$.error(e),
            complete: () => serviceObservable$.complete()
        });
        return builder;
    },
    withServiceSubject$(s$: Observable<string>) {
        s$.subscribe({
            next: (v) => serviceSubject$.next(v),
            error: (e) => serviceSubject$.error(e),
            complete: () => serviceSubject$.complete()
        });
        return builder;
    },};

  return builder;
}
"
`;

exports[`spec for a class with a method calling a dependency method should add methods for changing the property when adding it as a dep when builder ends with comma 1`] = `
"
import { ExampleComponent } from './component';
import { autoSpy } from 'autoSpy';
import { ServiceWithMethods } from './dependency';
import { EMPTY, Observable, ReplaySubject } from 'rxjs';

describe('ExampleComponent', () => {
    it('when aMethod is called it should', () => {
        // arrange
        const { build } = setup().default();
        const e = build();
        // act
        e.aMethod();
        // assert
        // expect(e).toEqual
    });
    it('when anotherMethod is called it should', () => {
        // arrange
        const { build } = setup().default();
        const e = build();
        // act
        e.anotherMethod();
        // assert
        // expect(e).toEqual
    });


});

function setup() {
  const serviceProperty$ = new ReplaySubject<string>(1);
 let resolvePromiseProp: Function;
 let rejectPromiseProp: Function;
 const servicePromiseProp = new Promise((res, rej) => {
     resolvePromiseProp = res;
     rejectPromiseProp = rej;
 });
 const serviceObservable$ = new ReplaySubject<ClassDescription[]>(1);
 const serviceSubject$ = new ReplaySubject<string>(1);
 const service = autoSpy(ServiceWithMethods, { property$: serviceProperty$, promiseProp: servicePromiseProp, observable$: serviceObservable$, subject$: serviceSubject$ });
  service.observableReturning.and.returnValue(EMPTY);
  service.promiseReturning.and.returnValue(new Promise(res => {}));
  const service = autoSpy(ServiceWithMethods);

  const builder = {
    service,
    withJustReturns(j: ClassDescription) {
      // this should still be in for the just-a-method method
      service.justAMethod.and.returnValue(j);
      return builder;
    },
    withPromiseProp() {
      // this should still be in for the promise prop method
      return builder;
    },
    default() {
      return builder;
    },
    build() {
      return new ExampleComponent(service);
    },
  withServiceObservableReturningReturn(o: Observable<string>) {
        service.observableReturning.and.returnValue(o);
        return builder;
    },
    withServicePromiseReturningReturn(p: Promise<string>) {
        service.promiseReturning.and.returnValue(p);
        return builder;
    },
    withServiceProperty$(p$: Observable<string>) {
        p$.subscribe({
            next: (v) => serviceProperty$.next(v),
            error: (e) => serviceProperty$.error(e),
            complete: () => serviceProperty$.complete()
        });
        return builder;
    },
    withServicePromiseProp(p: Promise<string>) {
        p
            .then((v) => resolveServicePromiseProp(v))
            .catch((e) => rejectServicePromiseProp(e));
        return builder;
    },
    withServiceObservable$(o$: Observable<ClassDescription[]>) {
        o$.subscribe({
            next: (v) => serviceObservable$.next(v),
            error: (e) => serviceObservable$.error(e),
            complete: () => serviceObservable$.complete()
        });
        return builder;
    },
    withServiceSubject$(s$: Observable<string>) {
        s$.subscribe({
            next: (v) => serviceSubject$.next(v),
            error: (e) => serviceSubject$.error(e),
            complete: () => serviceSubject$.complete()
        });
        return builder;
    },};

  return builder;
}
"
`;
